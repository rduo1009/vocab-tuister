name: build
on:
  push:
    tags:
      - "v*.*.*"
      - "v*.*.*-*"

permissions:
  contents: write

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build project
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          [
            ubuntu-22.04,
            ubuntu-22.04-arm,
            macos-14,
            windows-2022,
            windows-11-arm,
          ]
      fail-fast: false

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: "recursive"

      - name: Verify .python-version file
        run: |
          if [ ! -s .python-version ]; then echo ".python-version is missing or empty" >&2; exit 1; else echo "Found .python-version:"; cat .python-version; fi

      - name: Verify go.mod file
        run: |
          if [ ! -s go.mod ]; then echo "go.mod is missing or empty" >&2; exit 1; else echo "Found go.mod:"; grep '^go ' go.mod; fi

      - uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
        env:
          GOEXPERIMENT: jsonv2

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          plugins: poetry-dynamic-versioning

      # Windows builds do not use poethepoet atm
      - name: Install deps
        if: ${{ !startsWith(matrix.os, 'windows') }}
        run: |
          python -m pip install --user pipx
          pipx ensurepath
          pipx install poethepoet

      - name: Setup project
        run: |
          go install ./src/_vendor/mkunion/cmd/mkunion
          go install ./src/_vendor/go-jsonstruct/cmd/gojsonstruct
          echo PATH=$PATH >> $GITHUB_ENV
        env:
          GOEXPERIMENT: jsonv2

      - name: Ensure Poetry is on PATH
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: |
          echo "C:\Users\runneradmin\.local\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Ensure Git is on PATH
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: |
          echo "C:\Program Files\Git\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      # HACK: Have to workaround using poe as there are weird errors for some reason
      - name: Build project
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: |
          scripts/build-gh.ps1
        shell: pwsh
        env:
          GOEXPERIMENT: jsonv2

      - name: Build project
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          poe build
        env:
          GOEXPERIMENT: jsonv2

      - name: Build project
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          poe build --target-arch universal2
        env:
          GOEXPERIMENT: jsonv2

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*
