name: coverage
on: push

jobs:
  coverage:
    name: Collect and upload coverage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: "recursive"

      - name: Verify .python-version file
        run: |
          if [ ! -s .python-version ]; then echo ".python-version is missing or empty" >&2; exit 1; else echo "Found .python-version:"; cat .python-version; fi

      - name: Verify go.mod file
        run: |
          if [ ! -s go.mod ]; then echo "go.mod is missing or empty" >&2; exit 1; else echo "Found go.mod:"; grep '^go ' go.mod; fi

      - uses: actions/setup-python@v6
        with:
          python-version-file: ".python-version"

      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local # Poetry installs here on Ubuntu
          key: poetry-${{ runner.os }}-1

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Configure Poetry if cached
        if: steps.cached-poetry.outputs.cache-hit == 'true'
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry config installer.parallel true

      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Install and cache apt deps
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: ffmpeg pipx
          version: 1.0

      - name: Install other deps
        run: |
          sudo snap install ttyd --classic
          pipx install dunamai
          poetry install
          go mod download

      - name: Run tests with coverage
        run: ./scripts/coverage.sh

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./reports/coverage/pycoverage.xml,./reports/coverage/go-combined.out
          token: ${{ secrets.CODECOV_TOKEN }}
