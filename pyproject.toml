[build-system]
build-backend = "poetry_dynamic_versioning.backend"
requires = [ "poetry-core>=2.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0" ]

[project]
name = "vocab-tester"
description = "An application that tests Latin vocabulary and grammar."
readme = "README.md"
license = "MIT"
license-files = [ "LICENSE" ]
authors = [ { name = "rduo1009", email = "robertduong09alt@gmail.com" } ]
requires-python = ">=3.14,<3.15"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.14",
]
dynamic = [ "version" ]

dependencies = [
  "aenum==3.1.16",
  "ansicolors==1.1.8",
  "cyclopts==3.24.0",
  "dill==0.4.0",
  "dunamai==1.25.0",
  "flask==3.1.2",
  "inflect==7.5.0",
  "lemminflect==0.2.3",
  "platformdirs==4.5.0",
  "pyinstaller==6.16.0",
  "waitress==3.0.2",
  "wn @ git+https://github.com/goodmami/wn.git",
]

[dependency-groups]
dev = [
  "basedpyright==1.31.7",
  "coverage==7.10.7",
  "doc8==2.0.0",
  "griffe==1.14.0",
  "icecream==2.1.8",
  "interrogate==1.7.0",
  "mypy[faster-cache]==1.18.2",
  "pytest==8.4.2",
  "pytest-env==1.2.0",
  "pytest-pythonhashseed==2.0.0",
  "pytest-sugar==1.1.1",
  "pytest-xdist==3.8.0",
  "rstfmt==0.0.14",
  "ruff==0.14.0",
  "syrupy==5.0.0",
]

types = [
  "optype==0.14.0",
  "types-regex==2025.9.18.20250921",
  "types-waitress==3.0.1.20250801",
]

[tool.poetry]
requires-poetry = ">=2.0"
packages = [ { include = "src" } ]
exclude = [ "**/*.go", "src/scripts/**" ]
include = [ "src/core/transfero/wn_data/wn.db.xz" ]
version = "0.0.0"                                   # placeholder

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = [ "plugin" ] }

[tool.poetry-dynamic-versioning]
enable = true

[tool.ruff]
target-version = "py314"
line-length = 79
exclude = [ "src/_vendor/**" ]
unsafe-fixes = true

format.preview = true
format.indent-style = "space"
format.quote-style = "double"
format.skip-magic-trailing-comma = true
format.docstring-code-line-length = 72
format.docstring-code-format = true

lint.select = [ "ALL" ]
lint.extend-select = [ "W505" ] # doc line too long
lint.ignore = [
  "ANN401",  # `Any` in function arguments
  "C901",    # mccabe complexity
  "COM812",  # trailing commas
  "CPY001",  # no copyright
  "D105",    # magic method docstrings
  "DOC502",  # extraneous docstring exceptions 
  "E",
  "EM101",   # raw string in exception 
  "EM102",   # fstring in exception
  "ERA001",  # commented out code
  "FIX001",  # fixme comments
  "FIX002",  # todo comments
  "FIX003",  # xxx comments
  "FIX004",  # hack comments
  "I",
  "PLC0414", # 'useless' import aliases 
  "PLR0911", # too many `return`s
  "PLR0912", # too many branches
  "PLR0913", # too many arguments
  "PLW1514", # encoding in `open()`
  "S101",    # assertions
  "S301",    # using `pickle`
  "S311",    # using `random`
  "S403",    # importing `pickle`
  "TD001",   # banning `fixme`
  "TD002",   # missing author in todo
  "TD003",   # missing issue link in todo
  "TID252",  # relative imports
  "TRY003",  # use args in exceptions
  "W",
]
lint.per-file-ignores."src/core/accido/_class_*.py" = [ "PLR2004" ]
lint.per-file-ignores."src/core/lego/reader.py" = [ "PLR2004" ]
lint.per-file-ignores."src/core/rogo/asker.py" = [ "PLR2004" ]
lint.per-file-ignores."src/core/rogo/rules.py" = [ "PLR2004" ]
lint.per-file-ignores."src/server/app.py" = [ "ANN" ]
lint.flake8-type-checking.quote-annotations = true
lint.flake8-type-checking.strict = true
lint.isort.combine-as-imports = true
lint.pydocstyle.convention = "numpy"
lint.preview = true

[tool.pytest.ini_options]
addopts = [
  "--strict-markers",
  "--ignore=src/_vendor",
  "--ignore=src/_build",
  "-n4",
]
markers = [ "manual: manually checked tests", "integration: integration tests" ]
env = [ "VOCAB_TUISTER_RANDOM_SEED=10" ]

[tool.coverage.run]
branch = true
parallel = true
omit = [ "tests/*", "src/_vendor/*", "src/scripts/*" ]

[tool.coverage.report]
exclude_also = [
  "raise AssertionError",
  "raise NotImplementedError",
  "return NotImplemented",
  "if __name__ == .__main__.:",
  "@(abc\\.)?abstractmethod",
  "@overload",
  "if TYPE_CHECKING:",
  "if _seed is not None",
  'if getattr\(_sys, "frozen", False\) and hasattr\(_sys, "_MEIPASS"\):',
]

[tool.tox]
requires = [ "tox>=4.2" ]
env_list = [ "py314", "doctest", "type" ]
skip_missing_interpreters = true

[tool.tox.env_run_base]
description = "run tests using pytest"
deps = [ "icecream", "pytest", "pytest-xdist", "requests", "syrupy" ]
commands = [ [ "pytest", "-m", "not manual and not integration" ] ]

[tool.tox.env.doctest]
description = "run doctests"
deps = [ "icecream", "pytest", "pytest-xdist", "requests", "syrupy" ]
commands = [
  [
    "pytest",
    "--doctest-ignore-import-errors",
    "--doctest-modules",
    "--doctest-glob=*.rst",
    "-m",
    "not manual and not integration",
    "src/",
    "docs/",
  ],
]

[tool.tox.env.type]
description = "run type checks and check stubs"
deps = [ "basedpyright", "icecream", "mypy", "optype", "pytest", "requests" ]
set_env = { MYPYPATH = "stubs" }
commands = [
  [
    "basedpyright",
  ],
  [
    "stubtest",
    "dill",
    "--allowlist",
    "stubs/dill/allowlist",
    "--ignore-unused-allowlist",
  ],
  [
    "stubtest",
    "lemminflect",
    "--allowlist",
    "stubs/lemminflect/allowlist",
    "--ignore-unused-allowlist",
  ],
  [
    "stubtest",
    "colors",
    "--allowlist",
    "stubs/colors/allowlist",
    "--ignore-unused-allowlist",
  ],
  [
    "stubtest",
    "aenum",
    "--allowlist",
    "stubs/aenum/allowlist",
    "--ignore-unused-allowlist",
  ],
]

[tool.tox.gh]
python = { "3.14" = [ "py314", "type", "doctest" ] }

[tool.mypy]
mypy_path = "stubs"
python_version = "3.14"
warn_return_any = true
warn_unused_configs = true
check_untyped_defs = true

[tool.basedpyright]
include = [ "src", "tests", "stubs" ]
exclude = [ "src/_build", "src/_vendor", "tests/conftest.py" ]
stubPath = "stubs"
extraPaths = [ "./src" ]

reportImportCycles = "information"
reportPossiblyUnboundVariable = "warning"

reportImplicitStringConcatenation = false
reportImplicitOverride = false
reportUnusedImport = false
reportPrivateUsage = false
reportPrivateImportUsage = false
reportPrivateLocalImportUsage = false

[[tool.basedpyright.executionEnvironments]]
root = "./src/server"
reportAny = false
reportExplicitAny = false

[[tool.basedpyright.executionEnvironments]]
root = "./src/scripts"
reportAny = false
reportExplicitAny = false
reportUnusedCallResult = false

[[tool.basedpyright.executionEnvironments]]
root = "./tests"
reportUnknownParameterType = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportUnknownLambdaType = false
reportMissingParameterType = false
reportUndefinedVariable = false
reportUnusedCallResult = false
reportUnusedExpression = false

[[tool.basedpyright.executionEnvironments]]
root = "./stubs"
reportUnannotatedClassAttribute = false

[tool.interrogate]
ignore-init-method = false
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-nested-functions = true
ignore-nested-classes = true
ignore-overloaded-functions = true
exclude = [ "setup.py", "docs", "build", "src/_vendor" ]

[tool.poe.tasks.coverage]
shell = "./scripts/coverage.sh"
help = "Run coverage on the project."

[tool.poe.tasks.build]
cmd = "./scripts/build.sh"
help = "Build the project."
args = [
  { name = "debug", default = false, type = "boolean", help = "Build the project into a folder instead of a single file." },
  { name = "target-arch", default = "", type = "string", help = "What architecture should be targeted (macOS only)." },
]

[tool.poe.tasks.test]
cmd = "tox --parallel"
help = "Run tests on the project."

[tool.poe.tasks.badges]
cmd = "./scripts/badges.sh"
help = "Generate badges for the project."
