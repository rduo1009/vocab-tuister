// Code generated by mkunion. DO NOT EDIT.
package projection

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
	"github.com/widmogrod/mkunion/x/stream"
)

type SnapshotStateVisitor interface {
	VisitPullPushContextState(v *PullPushContextState) any
	VisitJoinContextState(v *JoinContextState) any
}

type SnapshotState interface {
	AcceptSnapshotState(g SnapshotStateVisitor) any
}

var (
	_ SnapshotState = (*PullPushContextState)(nil)
	_ SnapshotState = (*JoinContextState)(nil)
)

func (r *PullPushContextState) AcceptSnapshotState(v SnapshotStateVisitor) any {
	return v.VisitPullPushContextState(r)
}
func (r *JoinContextState) AcceptSnapshotState(v SnapshotStateVisitor) any {
	return v.VisitJoinContextState(r)
}

func MatchSnapshotStateR3[T0, T1, T2 any](
	x SnapshotState,
	f1 func(x *PullPushContextState) (T0, T1, T2),
	f2 func(x *JoinContextState) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *PullPushContextState:
		return f1(v)
	case *JoinContextState:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchSnapshotStateR2[T0, T1 any](
	x SnapshotState,
	f1 func(x *PullPushContextState) (T0, T1),
	f2 func(x *JoinContextState) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *PullPushContextState:
		return f1(v)
	case *JoinContextState:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchSnapshotStateR1[T0 any](
	x SnapshotState,
	f1 func(x *PullPushContextState) T0,
	f2 func(x *JoinContextState) T0,
) T0 {
	switch v := x.(type) {
	case *PullPushContextState:
		return f1(v)
	case *JoinContextState:
		return f2(v)
	}
	var result1 T0
	return result1
}

func MatchSnapshotStateR0(
	x SnapshotState,
	f1 func(x *PullPushContextState),
	f2 func(x *JoinContextState),
) {
	switch v := x.(type) {
	case *PullPushContextState:
		f1(v)
	case *JoinContextState:
		f2(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/projection.JoinContextState", JoinContextStateFromJSON, JoinContextStateToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/projection.PullPushContextState", PullPushContextStateFromJSON, PullPushContextStateToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/projection.SnapshotState", SnapshotStateFromJSON, SnapshotStateToJSON)
}

type SnapshotStateUnionJSON struct {
	Type                 string          `json:"question_type,omitempty"`
	PullPushContextState json.RawMessage `json:"projection.PullPushContextState,omitempty"`
	JoinContextState     json.RawMessage `json:"projection.JoinContextState,omitempty"`
}

func SnapshotStateFromJSON(x []byte) (SnapshotState, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data SnapshotStateUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("projection.SnapshotStateFromJSON: %w", err)
	}

	switch data.Type {
	case "projection.PullPushContextState":
		return PullPushContextStateFromJSON(data.PullPushContextState)
	case "projection.JoinContextState":
		return JoinContextStateFromJSON(data.JoinContextState)
	}

	if data.PullPushContextState != nil {
		return PullPushContextStateFromJSON(data.PullPushContextState)
	} else if data.JoinContextState != nil {
		return JoinContextStateFromJSON(data.JoinContextState)
	}
	return nil, fmt.Errorf("projection.SnapshotStateFromJSON: unknown type: %s", data.Type)
}

func SnapshotStateToJSON(x SnapshotState) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchSnapshotStateR2(
		x,
		func(y *PullPushContextState) ([]byte, error) {
			body, err := PullPushContextStateToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("projection.SnapshotStateToJSON: %w", err)
			}
			return json.Marshal(SnapshotStateUnionJSON{
				Type:                 "projection.PullPushContextState",
				PullPushContextState: body,
			})
		},
		func(y *JoinContextState) ([]byte, error) {
			body, err := JoinContextStateToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("projection.SnapshotStateToJSON: %w", err)
			}
			return json.Marshal(SnapshotStateUnionJSON{
				Type:             "projection.JoinContextState",
				JoinContextState: body,
			})
		},
	)
}

func PullPushContextStateFromJSON(x []byte) (*PullPushContextState, error) {
	result := new(PullPushContextState)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("projection.PullPushContextStateFromJSON: %w", err)
	}
	return result, nil
}

func PullPushContextStateToJSON(x *PullPushContextState) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*PullPushContextState)(nil)
	_ json.Marshaler   = (*PullPushContextState)(nil)
)

func (r *PullPushContextState) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONPullPushContextState(*r)
}
func (r *PullPushContextState) _marshalJSONPullPushContextState(x PullPushContextState) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldOffset []byte
	fieldOffset, err = r._marshalJSONPtrstream_Offset(x.Offset)
	if err != nil {
		return nil, fmt.Errorf("projection: PullPushContextState._marshalJSONPullPushContextState: field name Offset; %w", err)
	}
	if fieldOffset != nil {
		partial["Offset"] = fieldOffset
	}
	var fieldWatermark []byte
	fieldWatermark, err = r._marshalJSONPtrstream_EventTime(x.Watermark)
	if err != nil {
		return nil, fmt.Errorf("projection: PullPushContextState._marshalJSONPullPushContextState: field name Watermark; %w", err)
	}
	if fieldWatermark != nil {
		partial["Watermark"] = fieldWatermark
	}
	var fieldPullTopic []byte
	fieldPullTopic, err = r._marshalJSONstream_Topic(x.PullTopic)
	if err != nil {
		return nil, fmt.Errorf("projection: PullPushContextState._marshalJSONPullPushContextState: field name PullTopic; %w", err)
	}
	partial["PullTopic"] = fieldPullTopic
	var fieldPushTopic []byte
	fieldPushTopic, err = r._marshalJSONstream_Topic(x.PushTopic)
	if err != nil {
		return nil, fmt.Errorf("projection: PullPushContextState._marshalJSONPullPushContextState: field name PushTopic; %w", err)
	}
	partial["PushTopic"] = fieldPushTopic
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("projection: PullPushContextState._marshalJSONPullPushContextState: struct; %w", err)
	}
	return result, nil
}
func (r *PullPushContextState) _marshalJSONPtrstream_Offset(x *stream.Offset) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return r._marshalJSONstream_Offset(*x)
}
func (r *PullPushContextState) _marshalJSONstream_Offset(x stream.Offset) ([]byte, error) {
	result, err := shared.JSONMarshal[stream.Offset](x)
	if err != nil {
		return nil, fmt.Errorf("projection: PullPushContextState._marshalJSONstream_Offset:; %w", err)
	}
	return result, nil
}
func (r *PullPushContextState) _marshalJSONPtrstream_EventTime(x *stream.EventTime) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return r._marshalJSONstream_EventTime(*x)
}
func (r *PullPushContextState) _marshalJSONstream_EventTime(x stream.EventTime) ([]byte, error) {
	result, err := shared.JSONMarshal[stream.EventTime](x)
	if err != nil {
		return nil, fmt.Errorf("projection: PullPushContextState._marshalJSONstream_EventTime:; %w", err)
	}
	return result, nil
}
func (r *PullPushContextState) _marshalJSONstream_Topic(x stream.Topic) ([]byte, error) {
	result, err := shared.JSONMarshal[stream.Topic](x)
	if err != nil {
		return nil, fmt.Errorf("projection: PullPushContextState._marshalJSONstream_Topic:; %w", err)
	}
	return result, nil
}
func (r *PullPushContextState) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONPullPushContextState(data)
	if err != nil {
		return fmt.Errorf("projection: PullPushContextState.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *PullPushContextState) _unmarshalJSONPullPushContextState(data []byte) (PullPushContextState, error) {
	result := PullPushContextState{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("projection: PullPushContextState._unmarshalJSONPullPushContextState: native struct unwrap; %w", err)
	}
	if fieldOffset, ok := partial["Offset"]; ok {
		result.Offset, err = r._unmarshalJSONPtrstream_Offset(fieldOffset)
		if err != nil {
			return result, fmt.Errorf("projection: PullPushContextState._unmarshalJSONPullPushContextState: field Offset; %w", err)
		}
	}
	if fieldWatermark, ok := partial["Watermark"]; ok {
		result.Watermark, err = r._unmarshalJSONPtrstream_EventTime(fieldWatermark)
		if err != nil {
			return result, fmt.Errorf("projection: PullPushContextState._unmarshalJSONPullPushContextState: field Watermark; %w", err)
		}
	}
	if fieldPullTopic, ok := partial["PullTopic"]; ok {
		result.PullTopic, err = r._unmarshalJSONstream_Topic(fieldPullTopic)
		if err != nil {
			return result, fmt.Errorf("projection: PullPushContextState._unmarshalJSONPullPushContextState: field PullTopic; %w", err)
		}
	}
	if fieldPushTopic, ok := partial["PushTopic"]; ok {
		result.PushTopic, err = r._unmarshalJSONstream_Topic(fieldPushTopic)
		if err != nil {
			return result, fmt.Errorf("projection: PullPushContextState._unmarshalJSONPullPushContextState: field PushTopic; %w", err)
		}
	}
	return result, nil
}
func (r *PullPushContextState) _unmarshalJSONPtrstream_Offset(data []byte) (*stream.Offset, error) {
	if len(data) == 0 {
		return nil, nil
	}
	if string(data[:4]) == "null" {
		return nil, nil
	}
	result, err := r._unmarshalJSONstream_Offset(data)
	if err != nil {
		return nil, fmt.Errorf("projection: PullPushContextState._unmarshalJSONPtrstream_Offset: pointer; %w", err)
	}
	return &result, nil
}
func (r *PullPushContextState) _unmarshalJSONstream_Offset(data []byte) (stream.Offset, error) {
	result, err := shared.JSONUnmarshal[stream.Offset](data)
	if err != nil {
		return result, fmt.Errorf("projection: PullPushContextState._unmarshalJSONstream_Offset: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *PullPushContextState) _unmarshalJSONPtrstream_EventTime(data []byte) (*stream.EventTime, error) {
	if len(data) == 0 {
		return nil, nil
	}
	if string(data[:4]) == "null" {
		return nil, nil
	}
	result, err := r._unmarshalJSONstream_EventTime(data)
	if err != nil {
		return nil, fmt.Errorf("projection: PullPushContextState._unmarshalJSONPtrstream_EventTime: pointer; %w", err)
	}
	return &result, nil
}
func (r *PullPushContextState) _unmarshalJSONstream_EventTime(data []byte) (stream.EventTime, error) {
	result, err := shared.JSONUnmarshal[stream.EventTime](data)
	if err != nil {
		return result, fmt.Errorf("projection: PullPushContextState._unmarshalJSONstream_EventTime: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *PullPushContextState) _unmarshalJSONstream_Topic(data []byte) (stream.Topic, error) {
	result, err := shared.JSONUnmarshal[stream.Topic](data)
	if err != nil {
		return result, fmt.Errorf("projection: PullPushContextState._unmarshalJSONstream_Topic: native ref unwrap; %w", err)
	}
	return result, nil
}

func JoinContextStateFromJSON(x []byte) (*JoinContextState, error) {
	result := new(JoinContextState)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("projection.JoinContextStateFromJSON: %w", err)
	}
	return result, nil
}

func JoinContextStateToJSON(x *JoinContextState) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*JoinContextState)(nil)
	_ json.Marshaler   = (*JoinContextState)(nil)
)

func (r *JoinContextState) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONJoinContextState(*r)
}
func (r *JoinContextState) _marshalJSONJoinContextState(x JoinContextState) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldOffset1 []byte
	fieldOffset1, err = r._marshalJSONPtrstream_Offset(x.Offset1)
	if err != nil {
		return nil, fmt.Errorf("projection: JoinContextState._marshalJSONJoinContextState: field name Offset1; %w", err)
	}
	if fieldOffset1 != nil {
		partial["Offset1"] = fieldOffset1
	}
	var fieldPullTopic1 []byte
	fieldPullTopic1, err = r._marshalJSONstream_Topic(x.PullTopic1)
	if err != nil {
		return nil, fmt.Errorf("projection: JoinContextState._marshalJSONJoinContextState: field name PullTopic1; %w", err)
	}
	partial["PullTopic1"] = fieldPullTopic1
	var fieldOffset2 []byte
	fieldOffset2, err = r._marshalJSONPtrstream_Offset(x.Offset2)
	if err != nil {
		return nil, fmt.Errorf("projection: JoinContextState._marshalJSONJoinContextState: field name Offset2; %w", err)
	}
	if fieldOffset2 != nil {
		partial["Offset2"] = fieldOffset2
	}
	var fieldPullTopic2 []byte
	fieldPullTopic2, err = r._marshalJSONstream_Topic(x.PullTopic2)
	if err != nil {
		return nil, fmt.Errorf("projection: JoinContextState._marshalJSONJoinContextState: field name PullTopic2; %w", err)
	}
	partial["PullTopic2"] = fieldPullTopic2
	var fieldLeftOrRight []byte
	fieldLeftOrRight, err = r._marshalJSONbool(x.LeftOrRight)
	if err != nil {
		return nil, fmt.Errorf("projection: JoinContextState._marshalJSONJoinContextState: field name LeftOrRight; %w", err)
	}
	partial["LeftOrRight"] = fieldLeftOrRight
	var fieldPushTopic []byte
	fieldPushTopic, err = r._marshalJSONstream_Topic(x.PushTopic)
	if err != nil {
		return nil, fmt.Errorf("projection: JoinContextState._marshalJSONJoinContextState: field name PushTopic; %w", err)
	}
	partial["PushTopic"] = fieldPushTopic
	var fieldWatermark []byte
	fieldWatermark, err = r._marshalJSONstream_EventTime(x.Watermark)
	if err != nil {
		return nil, fmt.Errorf("projection: JoinContextState._marshalJSONJoinContextState: field name Watermark; %w", err)
	}
	partial["Watermark"] = fieldWatermark
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("projection: JoinContextState._marshalJSONJoinContextState: struct; %w", err)
	}
	return result, nil
}
func (r *JoinContextState) _marshalJSONPtrstream_Offset(x *stream.Offset) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return r._marshalJSONstream_Offset(*x)
}
func (r *JoinContextState) _marshalJSONstream_Offset(x stream.Offset) ([]byte, error) {
	result, err := shared.JSONMarshal[stream.Offset](x)
	if err != nil {
		return nil, fmt.Errorf("projection: JoinContextState._marshalJSONstream_Offset:; %w", err)
	}
	return result, nil
}
func (r *JoinContextState) _marshalJSONstream_Topic(x stream.Topic) ([]byte, error) {
	result, err := shared.JSONMarshal[stream.Topic](x)
	if err != nil {
		return nil, fmt.Errorf("projection: JoinContextState._marshalJSONstream_Topic:; %w", err)
	}
	return result, nil
}
func (r *JoinContextState) _marshalJSONbool(x bool) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("projection: JoinContextState._marshalJSONbool:; %w", err)
	}
	return result, nil
}
func (r *JoinContextState) _marshalJSONstream_EventTime(x stream.EventTime) ([]byte, error) {
	result, err := shared.JSONMarshal[stream.EventTime](x)
	if err != nil {
		return nil, fmt.Errorf("projection: JoinContextState._marshalJSONstream_EventTime:; %w", err)
	}
	return result, nil
}
func (r *JoinContextState) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONJoinContextState(data)
	if err != nil {
		return fmt.Errorf("projection: JoinContextState.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *JoinContextState) _unmarshalJSONJoinContextState(data []byte) (JoinContextState, error) {
	result := JoinContextState{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("projection: JoinContextState._unmarshalJSONJoinContextState: native struct unwrap; %w", err)
	}
	if fieldOffset1, ok := partial["Offset1"]; ok {
		result.Offset1, err = r._unmarshalJSONPtrstream_Offset(fieldOffset1)
		if err != nil {
			return result, fmt.Errorf("projection: JoinContextState._unmarshalJSONJoinContextState: field Offset1; %w", err)
		}
	}
	if fieldPullTopic1, ok := partial["PullTopic1"]; ok {
		result.PullTopic1, err = r._unmarshalJSONstream_Topic(fieldPullTopic1)
		if err != nil {
			return result, fmt.Errorf("projection: JoinContextState._unmarshalJSONJoinContextState: field PullTopic1; %w", err)
		}
	}
	if fieldOffset2, ok := partial["Offset2"]; ok {
		result.Offset2, err = r._unmarshalJSONPtrstream_Offset(fieldOffset2)
		if err != nil {
			return result, fmt.Errorf("projection: JoinContextState._unmarshalJSONJoinContextState: field Offset2; %w", err)
		}
	}
	if fieldPullTopic2, ok := partial["PullTopic2"]; ok {
		result.PullTopic2, err = r._unmarshalJSONstream_Topic(fieldPullTopic2)
		if err != nil {
			return result, fmt.Errorf("projection: JoinContextState._unmarshalJSONJoinContextState: field PullTopic2; %w", err)
		}
	}
	if fieldLeftOrRight, ok := partial["LeftOrRight"]; ok {
		result.LeftOrRight, err = r._unmarshalJSONbool(fieldLeftOrRight)
		if err != nil {
			return result, fmt.Errorf("projection: JoinContextState._unmarshalJSONJoinContextState: field LeftOrRight; %w", err)
		}
	}
	if fieldPushTopic, ok := partial["PushTopic"]; ok {
		result.PushTopic, err = r._unmarshalJSONstream_Topic(fieldPushTopic)
		if err != nil {
			return result, fmt.Errorf("projection: JoinContextState._unmarshalJSONJoinContextState: field PushTopic; %w", err)
		}
	}
	if fieldWatermark, ok := partial["Watermark"]; ok {
		result.Watermark, err = r._unmarshalJSONstream_EventTime(fieldWatermark)
		if err != nil {
			return result, fmt.Errorf("projection: JoinContextState._unmarshalJSONJoinContextState: field Watermark; %w", err)
		}
	}
	return result, nil
}
func (r *JoinContextState) _unmarshalJSONPtrstream_Offset(data []byte) (*stream.Offset, error) {
	if len(data) == 0 {
		return nil, nil
	}
	if string(data[:4]) == "null" {
		return nil, nil
	}
	result, err := r._unmarshalJSONstream_Offset(data)
	if err != nil {
		return nil, fmt.Errorf("projection: JoinContextState._unmarshalJSONPtrstream_Offset: pointer; %w", err)
	}
	return &result, nil
}
func (r *JoinContextState) _unmarshalJSONstream_Offset(data []byte) (stream.Offset, error) {
	result, err := shared.JSONUnmarshal[stream.Offset](data)
	if err != nil {
		return result, fmt.Errorf("projection: JoinContextState._unmarshalJSONstream_Offset: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *JoinContextState) _unmarshalJSONstream_Topic(data []byte) (stream.Topic, error) {
	result, err := shared.JSONUnmarshal[stream.Topic](data)
	if err != nil {
		return result, fmt.Errorf("projection: JoinContextState._unmarshalJSONstream_Topic: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *JoinContextState) _unmarshalJSONbool(data []byte) (bool, error) {
	var result bool
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("projection: JoinContextState._unmarshalJSONbool: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *JoinContextState) _unmarshalJSONstream_EventTime(data []byte) (stream.EventTime, error) {
	result, err := shared.JSONUnmarshal[stream.EventTime](data)
	if err != nil {
		return result, fmt.Errorf("projection: JoinContextState._unmarshalJSONstream_EventTime: native ref unwrap; %w", err)
	}
	return result, nil
}
