// Code generated by mkunion. DO NOT EDIT.
package projection

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

type WindowFlushModeVisitor interface {
	VisitDiscard(v *Discard) any
}

type WindowFlushMode interface {
	AcceptWindowFlushMode(g WindowFlushModeVisitor) any
}

var (
	_ WindowFlushMode = (*Discard)(nil)
)

func (r *Discard) AcceptWindowFlushMode(v WindowFlushModeVisitor) any { return v.VisitDiscard(r) }

func MatchWindowFlushModeR3[T0, T1, T2 any](
	x WindowFlushMode,
	f1 func(x *Discard) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *Discard:
		return f1(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchWindowFlushModeR2[T0, T1 any](
	x WindowFlushMode,
	f1 func(x *Discard) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *Discard:
		return f1(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchWindowFlushModeR1[T0 any](
	x WindowFlushMode,
	f1 func(x *Discard) T0,
) T0 {
	switch v := x.(type) {
	case *Discard:
		return f1(v)
	}
	var result1 T0
	return result1
}

func MatchWindowFlushModeR0(
	x WindowFlushMode,
	f1 func(x *Discard),
) {
	switch v := x.(type) {
	case *Discard:
		f1(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/projection.Discard", DiscardFromJSON, DiscardToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/projection.WindowFlushMode", WindowFlushModeFromJSON, WindowFlushModeToJSON)
}

type WindowFlushModeUnionJSON struct {
	Type    string          `json:"question_type,omitempty"`
	Discard json.RawMessage `json:"projection.Discard,omitempty"`
}

func WindowFlushModeFromJSON(x []byte) (WindowFlushMode, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data WindowFlushModeUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("projection.WindowFlushModeFromJSON: %w", err)
	}

	switch data.Type {
	case "projection.Discard":
		return DiscardFromJSON(data.Discard)
	}

	if data.Discard != nil {
		return DiscardFromJSON(data.Discard)
	}
	return nil, fmt.Errorf("projection.WindowFlushModeFromJSON: unknown type: %s", data.Type)
}

func WindowFlushModeToJSON(x WindowFlushMode) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchWindowFlushModeR2(
		x,
		func(y *Discard) ([]byte, error) {
			body, err := DiscardToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("projection.WindowFlushModeToJSON: %w", err)
			}
			return json.Marshal(WindowFlushModeUnionJSON{
				Type:    "projection.Discard",
				Discard: body,
			})
		},
	)
}

func DiscardFromJSON(x []byte) (*Discard, error) {
	result := new(Discard)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("projection.DiscardFromJSON: %w", err)
	}
	return result, nil
}

func DiscardToJSON(x *Discard) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Discard)(nil)
	_ json.Marshaler   = (*Discard)(nil)
)

func (r *Discard) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONDiscard(*r)
}
func (r *Discard) _marshalJSONDiscard(x Discard) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("projection: Discard._marshalJSONDiscard: struct; %w", err)
	}
	return result, nil
}
func (r *Discard) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONDiscard(data)
	if err != nil {
		return fmt.Errorf("projection: Discard.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Discard) _unmarshalJSONDiscard(data []byte) (Discard, error) {
	result := Discard{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("projection: Discard._unmarshalJSONDiscard: native struct unwrap; %w", err)
	}
	return result, nil
}
