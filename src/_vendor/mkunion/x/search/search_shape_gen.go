// Code generated by mkunion. DO NOT EDIT.
package search

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(DocIDShape())
	shape.Register(DocShape())
	shape.Register(FulltextShape())
	shape.Register(HitShape())
	shape.Register(IndexShape())
	shape.Register(SearchCMDShape())
	shape.Register(SearchResultShape())
	shape.Register(SimpleTokenizerShape())
	shape.Register(TermInDocShape())
	shape.Register(TermShape())
	shape.Register(TokenShape())
}

//shape:shape

func SearchCMDShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "SearchCMD",
		PkgName:       "search",
		PkgImportName: "github.com/widmogrod/mkunion/x/search",
		Variant: []shape.Shape{
			TermShape(),
			FulltextShape(),
		},
	}
}

func TermShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Term",
		PkgName:       "search",
		PkgImportName: "github.com/widmogrod/mkunion/x/search",
		Fields: []*shape.FieldLike{
			{
				Name: "Term",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "SearchCMD",
			},
		},
	}
}

func FulltextShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Fulltext",
		PkgName:       "search",
		PkgImportName: "github.com/widmogrod/mkunion/x/search",
		Fields: []*shape.FieldLike{
			{
				Name: "Query",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "SearchCMD",
			},
		},
	}
}

//shape:shape
func DocShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Doc",
		PkgName:       "search",
		PkgImportName: "github.com/widmogrod/mkunion/x/search",
		Fields: []*shape.FieldLike{
			{
				Name: "Raw",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Tokens",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "Token",
						PkgName:       "search",
						PkgImportName: "github.com/widmogrod/mkunion/x/search",
					},
				},
			},
			{
				Name: "TermFrequency",
				Type: &shape.MapLike{
					Key: &shape.RefName{
						Name:          "Token",
						PkgName:       "search",
						PkgImportName: "github.com/widmogrod/mkunion/x/search",
					},
					Val: &shape.PrimitiveLike{
						Kind: &shape.NumberLike{
							Kind: &shape.Float64{},
						},
					},
				},
			},
		},
	}
}

//shape:shape
func TokenShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "Token",
		PkgName:       "search",
		PkgImportName: "github.com/widmogrod/mkunion/x/search",
		IsAlias:       true,
		Type:          &shape.PrimitiveLike{Kind: &shape.StringLike{}},
	}
}

//shape:shape
func DocIDShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "DocID",
		PkgName:       "search",
		PkgImportName: "github.com/widmogrod/mkunion/x/search",
		IsAlias:       true,
		Type:          &shape.PrimitiveLike{Kind: &shape.StringLike{}},
	}
}

//shape:shape
func HitShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Hit",
		PkgName:       "search",
		PkgImportName: "github.com/widmogrod/mkunion/x/search",
		Fields: []*shape.FieldLike{
			{
				Name: "DocID",
				Type: &shape.RefName{
					Name:          "DocID",
					PkgName:       "search",
					PkgImportName: "github.com/widmogrod/mkunion/x/search",
				},
			},
			{
				Name: "Score",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Float64{},
					},
				},
			},
			{
				Name: "Raw",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
	}
}

//shape:shape
func IndexShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Index",
		PkgName:       "search",
		PkgImportName: "github.com/widmogrod/mkunion/x/search",
	}
}

//shape:shape
func SearchResultShape() shape.Shape {
	return &shape.StructLike{
		Name:          "SearchResult",
		PkgName:       "search",
		PkgImportName: "github.com/widmogrod/mkunion/x/search",
		Fields: []*shape.FieldLike{
			{
				Name: "Results",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "Hit",
						PkgName:       "search",
						PkgImportName: "github.com/widmogrod/mkunion/x/search",
					},
				},
			},
		},
	}
}

//shape:shape
func SimpleTokenizerShape() shape.Shape {
	return &shape.StructLike{
		Name:          "SimpleTokenizer",
		PkgName:       "search",
		PkgImportName: "github.com/widmogrod/mkunion/x/search",
	}
}

//shape:shape
func TermInDocShape() shape.Shape {
	return &shape.StructLike{
		Name:          "TermInDoc",
		PkgName:       "search",
		PkgImportName: "github.com/widmogrod/mkunion/x/search",
		Fields: []*shape.FieldLike{
			{
				Name: "Position",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int{},
					},
				},
			},
		},
	}
}
