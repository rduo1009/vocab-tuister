// Code generated by mkunion. DO NOT EDIT.
package shape

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

var (
	_ json.Unmarshaler = (*TypeParam)(nil)
	_ json.Marshaler   = (*TypeParam)(nil)
)

func (r *TypeParam) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONTypeParam(*r)
}
func (r *TypeParam) _marshalJSONTypeParam(x TypeParam) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldName []byte
	fieldName, err = r._marshalJSONstring(x.Name)
	if err != nil {
		return nil, fmt.Errorf("shape: TypeParam._marshalJSONTypeParam: field name Name; %w", err)
	}
	partial["Name"] = fieldName
	var fieldType []byte
	fieldType, err = r._marshalJSONShape(x.Type)
	if err != nil {
		return nil, fmt.Errorf("shape: TypeParam._marshalJSONTypeParam: field name Type; %w", err)
	}
	partial["Type"] = fieldType
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("shape: TypeParam._marshalJSONTypeParam: struct; %w", err)
	}
	return result, nil
}
func (r *TypeParam) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("shape: TypeParam._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *TypeParam) _marshalJSONShape(x Shape) ([]byte, error) {
	result, err := shared.JSONMarshal[Shape](x)
	if err != nil {
		return nil, fmt.Errorf("shape: TypeParam._marshalJSONShape:; %w", err)
	}
	return result, nil
}
func (r *TypeParam) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONTypeParam(data)
	if err != nil {
		return fmt.Errorf("shape: TypeParam.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *TypeParam) _unmarshalJSONTypeParam(data []byte) (TypeParam, error) {
	result := TypeParam{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("shape: TypeParam._unmarshalJSONTypeParam: native struct unwrap; %w", err)
	}
	if fieldName, ok := partial["Name"]; ok {
		result.Name, err = r._unmarshalJSONstring(fieldName)
		if err != nil {
			return result, fmt.Errorf("shape: TypeParam._unmarshalJSONTypeParam: field Name; %w", err)
		}
	}
	if fieldType, ok := partial["Type"]; ok {
		result.Type, err = r._unmarshalJSONShape(fieldType)
		if err != nil {
			return result, fmt.Errorf("shape: TypeParam._unmarshalJSONTypeParam: field Type; %w", err)
		}
	}
	return result, nil
}
func (r *TypeParam) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("shape: TypeParam._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *TypeParam) _unmarshalJSONShape(data []byte) (Shape, error) {
	result, err := shared.JSONUnmarshal[Shape](data)
	if err != nil {
		return result, fmt.Errorf("shape: TypeParam._unmarshalJSONShape: native ref unwrap; %w", err)
	}
	return result, nil
}
