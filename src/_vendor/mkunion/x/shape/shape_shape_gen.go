// Code generated by mkunion. DO NOT EDIT.
package shape

func init() {
	Register(AliasLikeShape())
	Register(AndGuardShape())
	Register(AnyShape())
	Register(BooleanLikeShape())
	Register(EnumShape())
	Register(FieldLikeShape())
	Register(Float32Shape())
	Register(Float64Shape())
	Register(GuardShape())
	Register(Int16Shape())
	Register(Int32Shape())
	Register(Int64Shape())
	Register(Int8Shape())
	Register(IntShape())
	Register(ListLikeShape())
	Register(MapLikeShape())
	Register(NumberKindShape())
	Register(NumberLikeShape())
	Register(PointerLikeShape())
	Register(PrimitiveKindShape())
	Register(PrimitiveLikeShape())
	Register(RefNameShape())
	Register(RequiredShape())
	Register(ShapeShape())
	Register(StringLikeShape())
	Register(StructLikeShape())
	Register(TagShape())
	Register(TypeParamShape())
	Register(UInt16Shape())
	Register(UInt32Shape())
	Register(UInt64Shape())
	Register(UInt8Shape())
	Register(UIntShape())
	Register(UnionLikeShape())
}

//shape:shape

func GuardShape() Shape {
	return &UnionLike{
		Name:          "Guard",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Variant: []Shape{
			EnumShape(),
			RequiredShape(),
			AndGuardShape(),
		},
	}
}

func EnumShape() Shape {
	return &StructLike{
		Name:          "Enum",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Val",
				Type: &ListLike{
					Element: &PrimitiveLike{Kind: &StringLike{}},
				},
			},
		},
		Tags: map[string]Tag{
			"mkunion": {
				Value: "Guard",
			},
		},
	}
}

func RequiredShape() Shape {
	return &StructLike{
		Name:          "Required",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Tags: map[string]Tag{
			"mkunion": {
				Value: "Guard",
			},
		},
	}
}

func AndGuardShape() Shape {
	return &StructLike{
		Name:          "AndGuard",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "L",
				Type: &ListLike{
					Element: &RefName{
						Name:          "Guard",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
		},
		Tags: map[string]Tag{
			"mkunion": {
				Value: "Guard",
			},
		},
	}
}

//shape:shape

func NumberKindShape() Shape {
	return &UnionLike{
		Name:          "NumberKind",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Variant: []Shape{
			UIntShape(),
			UInt8Shape(),
			UInt16Shape(),
			UInt32Shape(),
			UInt64Shape(),
			IntShape(),
			Int8Shape(),
			Int16Shape(),
			Int32Shape(),
			Int64Shape(),
			Float32Shape(),
			Float64Shape(),
		},
	}
}

func UIntShape() Shape {
	return &StructLike{
		Name:          "UInt",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Tags: map[string]Tag{
			"mkunion": {
				Value: "NumberKind",
			},
		},
	}
}

func UInt8Shape() Shape {
	return &StructLike{
		Name:          "UInt8",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Tags: map[string]Tag{
			"mkunion": {
				Value: "NumberKind",
			},
		},
	}
}

func UInt16Shape() Shape {
	return &StructLike{
		Name:          "UInt16",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Tags: map[string]Tag{
			"mkunion": {
				Value: "NumberKind",
			},
		},
	}
}

func UInt32Shape() Shape {
	return &StructLike{
		Name:          "UInt32",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Tags: map[string]Tag{
			"mkunion": {
				Value: "NumberKind",
			},
		},
	}
}

func UInt64Shape() Shape {
	return &StructLike{
		Name:          "UInt64",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Tags: map[string]Tag{
			"mkunion": {
				Value: "NumberKind",
			},
		},
	}
}

func IntShape() Shape {
	return &StructLike{
		Name:          "Int",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Tags: map[string]Tag{
			"mkunion": {
				Value: "NumberKind",
			},
		},
	}
}

func Int8Shape() Shape {
	return &StructLike{
		Name:          "Int8",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Tags: map[string]Tag{
			"mkunion": {
				Value: "NumberKind",
			},
		},
	}
}

func Int16Shape() Shape {
	return &StructLike{
		Name:          "Int16",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Tags: map[string]Tag{
			"mkunion": {
				Value: "NumberKind",
			},
		},
	}
}

func Int32Shape() Shape {
	return &StructLike{
		Name:          "Int32",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Tags: map[string]Tag{
			"mkunion": {
				Value: "NumberKind",
			},
		},
	}
}

func Int64Shape() Shape {
	return &StructLike{
		Name:          "Int64",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Tags: map[string]Tag{
			"mkunion": {
				Value: "NumberKind",
			},
		},
	}
}

func Float32Shape() Shape {
	return &StructLike{
		Name:          "Float32",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Tags: map[string]Tag{
			"mkunion": {
				Value: "NumberKind",
			},
		},
	}
}

func Float64Shape() Shape {
	return &StructLike{
		Name:          "Float64",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Tags: map[string]Tag{
			"mkunion": {
				Value: "NumberKind",
			},
		},
	}
}

//shape:shape

func PrimitiveKindShape() Shape {
	return &UnionLike{
		Name:          "PrimitiveKind",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Variant: []Shape{
			BooleanLikeShape(),
			StringLikeShape(),
			NumberLikeShape(),
		},
	}
}

func BooleanLikeShape() Shape {
	return &StructLike{
		Name:          "BooleanLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Tags: map[string]Tag{
			"mkunion": {
				Value: "PrimitiveKind",
			},
		},
	}
}

func StringLikeShape() Shape {
	return &StructLike{
		Name:          "StringLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Tags: map[string]Tag{
			"mkunion": {
				Value: "PrimitiveKind",
			},
		},
	}
}

func NumberLikeShape() Shape {
	return &StructLike{
		Name:          "NumberLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Kind",
				Type: &RefName{
					Name:          "NumberKind",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
		},
		Tags: map[string]Tag{
			"mkunion": {
				Value: "PrimitiveKind",
			},
		},
	}
}

//shape:shape

func ShapeShape() Shape {
	return &UnionLike{
		Name:          "Shape",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Variant: []Shape{
			AnyShape(),
			RefNameShape(),
			PointerLikeShape(),
			AliasLikeShape(),
			PrimitiveLikeShape(),
			ListLikeShape(),
			MapLikeShape(),
			StructLikeShape(),
			UnionLikeShape(),
		},
	}
}

func AnyShape() Shape {
	return &StructLike{
		Name:          "Any",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Tags: map[string]Tag{
			"mkunion": {
				Value: "Shape",
			},
		},
	}
}

func RefNameShape() Shape {
	return &StructLike{
		Name:          "RefName",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Name",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "PkgName",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "PkgImportName",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "Indexed",
				Type: &ListLike{
					Element: &RefName{
						Name:          "Shape",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
		},
		Tags: map[string]Tag{
			"mkunion": {
				Value: "Shape",
			},
		},
	}
}

func PointerLikeShape() Shape {
	return &StructLike{
		Name:          "PointerLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Type",
				Type: &RefName{
					Name:          "Shape",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
		},
		Tags: map[string]Tag{
			"mkunion": {
				Value: "Shape",
			},
		},
	}
}

func AliasLikeShape() Shape {
	return &StructLike{
		Name:          "AliasLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Name",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "PkgName",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "PkgImportName",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "TypeParams",
				Type: &ListLike{
					Element: &RefName{
						Name:          "TypeParam",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
			{
				Name: "IsAlias",
				Type: &PrimitiveLike{Kind: &BooleanLike{}},
			},
			{
				Name: "Type",
				Type: &RefName{
					Name:          "Shape",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
			{
				Name: "Tags",
				Type: &MapLike{
					Key: &PrimitiveLike{Kind: &StringLike{}},
					Val: &RefName{
						Name:          "Tag",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
		},
		Tags: map[string]Tag{
			"mkunion": {
				Value: "Shape",
			},
		},
	}
}

func PrimitiveLikeShape() Shape {
	return &StructLike{
		Name:          "PrimitiveLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Kind",
				Type: &RefName{
					Name:          "PrimitiveKind",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
		},
		Tags: map[string]Tag{
			"mkunion": {
				Value: "Shape",
			},
		},
	}
}

func ListLikeShape() Shape {
	return &StructLike{
		Name:          "ListLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Element",
				Type: &RefName{
					Name:          "Shape",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
			{
				Name: "ArrayLen",
				Type: &PointerLike{
					Type: &PrimitiveLike{
						Kind: &NumberLike{
							Kind: &Int{},
						},
					},
				},
			},
		},
		Tags: map[string]Tag{
			"mkunion": {
				Value: "Shape",
			},
		},
	}
}

func MapLikeShape() Shape {
	return &StructLike{
		Name:          "MapLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Key",
				Type: &RefName{
					Name:          "Shape",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
			{
				Name: "Val",
				Type: &RefName{
					Name:          "Shape",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
		},
		Tags: map[string]Tag{
			"mkunion": {
				Value: "Shape",
			},
		},
	}
}

func StructLikeShape() Shape {
	return &StructLike{
		Name:          "StructLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Name",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "PkgName",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "PkgImportName",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "TypeParams",
				Type: &ListLike{
					Element: &RefName{
						Name:          "TypeParam",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
			{
				Name: "Fields",
				Type: &ListLike{
					Element: &PointerLike{
						Type: &RefName{
							Name:          "FieldLike",
							PkgName:       "shape",
							PkgImportName: "github.com/widmogrod/mkunion/x/shape",
						},
					},
				},
			},
			{
				Name: "Tags",
				Type: &MapLike{
					Key: &PrimitiveLike{Kind: &StringLike{}},
					Val: &RefName{
						Name:          "Tag",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
		},
		Tags: map[string]Tag{
			"mkunion": {
				Value: "Shape",
			},
		},
	}
}

func UnionLikeShape() Shape {
	return &StructLike{
		Name:          "UnionLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Name",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "PkgName",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "PkgImportName",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "TypeParams",
				Type: &ListLike{
					Element: &RefName{
						Name:          "TypeParam",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
			{
				Name: "Variant",
				Type: &ListLike{
					Element: &RefName{
						Name:          "Shape",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
			{
				Name: "Tags",
				Type: &MapLike{
					Key: &PrimitiveLike{Kind: &StringLike{}},
					Val: &RefName{
						Name:          "Tag",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
		},
		Tags: map[string]Tag{
			"mkunion": {
				Value: "Shape",
			},
		},
	}
}

//shape:shape
func TypeParamShape() Shape {
	return &StructLike{
		Name:          "TypeParam",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Name",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "Type",
				Type: &RefName{
					Name:          "Shape",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
		},
		Tags: map[string]Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}

//shape:shape
func TagShape() Shape {
	return &StructLike{
		Name:          "Tag",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Value",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "Options",
				Type: &ListLike{
					Element: &PrimitiveLike{Kind: &StringLike{}},
				},
			},
		},
	}
}

//shape:shape
func FieldLikeShape() Shape {
	return &StructLike{
		Name:          "FieldLike",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Name",
				Type: &PrimitiveLike{Kind: &StringLike{}},
			},
			{
				Name: "Type",
				Type: &RefName{
					Name:          "Shape",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
			{
				Name: "Desc",
				Type: &PointerLike{
					Type: &PrimitiveLike{Kind: &StringLike{}},
				},
			},
			{
				Name: "Guard",
				Type: &RefName{
					Name:          "Guard",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
			{
				Name: "Tags",
				Type: &MapLike{
					Key: &PrimitiveLike{Kind: &StringLike{}},
					Val: &RefName{
						Name:          "Tag",
						PkgName:       "shape",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape",
					},
				},
			},
		},
	}
}
