// Code generated by mkunion. DO NOT EDIT.
package schemaless

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(OpenSearchRepositoryShape())
	shape.Register(OpenSearchSearchResultHitShape())
	shape.Register(OpenSearchSearchResultHitsShape())
	shape.Register(OpenSearchSearchResultShape())
}

//shape:shape
func OpenSearchRepositoryShape() shape.Shape {
	return &shape.StructLike{
		Name:          "OpenSearchRepository",
		PkgName:       "schemaless",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "A",
				Type: &shape.Any{},
			},
		},
	}
}

//shape:shape
func OpenSearchSearchResultShape() shape.Shape {
	return &shape.StructLike{
		Name:          "OpenSearchSearchResult",
		PkgName:       "schemaless",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "A",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Hits",
				Type: &shape.RefName{
					Name:          "OpenSearchSearchResultHits",
					PkgName:       "schemaless",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
					Indexed: []shape.Shape{
						&shape.RefName{
							Name:          "A",
							PkgName:       "",
							PkgImportName: "",
						},
					},
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "hits",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}

//shape:shape
func OpenSearchSearchResultHitsShape() shape.Shape {
	return &shape.StructLike{
		Name:          "OpenSearchSearchResultHits",
		PkgName:       "schemaless",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "A",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Hits",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "OpenSearchSearchResultHit",
						PkgName:       "schemaless",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
						Indexed: []shape.Shape{
							&shape.RefName{
								Name:          "A",
								PkgName:       "",
								PkgImportName: "",
							},
						},
					},
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "hits",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}

//shape:shape
func OpenSearchSearchResultHitShape() shape.Shape {
	return &shape.StructLike{
		Name:          "OpenSearchSearchResultHit",
		PkgName:       "schemaless",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "A",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Item",
				Type: &shape.RefName{
					Name:          "A",
					PkgName:       "",
					PkgImportName: "",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "_source",
					},
				},
			},
			{
				Name: "Sort",
				Type: &shape.ListLike{
					Element: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "sort",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}
