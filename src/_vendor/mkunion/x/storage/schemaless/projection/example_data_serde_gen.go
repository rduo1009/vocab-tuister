// Code generated by mkunion. DO NOT EDIT.
package projection

import (
	"encoding/json"
	"fmt"
)

var (
	_ json.Unmarshaler = (*Game)(nil)
	_ json.Marshaler   = (*Game)(nil)
)

func (r *Game) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONGame(*r)
}
func (r *Game) _marshalJSONGame(x Game) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldSessionID []byte
	fieldSessionID, err = r._marshalJSONstring(x.SessionID)
	if err != nil {
		return nil, fmt.Errorf("projection: Game._marshalJSONGame: field name SessionID; %w", err)
	}
	partial["SessionID"] = fieldSessionID
	var fieldPlayers []byte
	fieldPlayers, err = r._marshalJSONSlicestring(x.Players)
	if err != nil {
		return nil, fmt.Errorf("projection: Game._marshalJSONGame: field name Players; %w", err)
	}
	partial["Players"] = fieldPlayers
	var fieldWinner []byte
	fieldWinner, err = r._marshalJSONstring(x.Winner)
	if err != nil {
		return nil, fmt.Errorf("projection: Game._marshalJSONGame: field name Winner; %w", err)
	}
	partial["Winner"] = fieldWinner
	var fieldIsDraw []byte
	fieldIsDraw, err = r._marshalJSONbool(x.IsDraw)
	if err != nil {
		return nil, fmt.Errorf("projection: Game._marshalJSONGame: field name IsDraw; %w", err)
	}
	partial["IsDraw"] = fieldIsDraw
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("projection: Game._marshalJSONGame: struct; %w", err)
	}
	return result, nil
}
func (r *Game) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("projection: Game._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *Game) _marshalJSONSlicestring(x []string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("projection: Game._marshalJSONSlicestring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("projection: Game._marshalJSONSlicestring:; %w", err)
	}
	return result, nil
}
func (r *Game) _marshalJSONbool(x bool) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("projection: Game._marshalJSONbool:; %w", err)
	}
	return result, nil
}
func (r *Game) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONGame(data)
	if err != nil {
		return fmt.Errorf("projection: Game.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Game) _unmarshalJSONGame(data []byte) (Game, error) {
	result := Game{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("projection: Game._unmarshalJSONGame: native struct unwrap; %w", err)
	}
	if fieldSessionID, ok := partial["SessionID"]; ok {
		result.SessionID, err = r._unmarshalJSONstring(fieldSessionID)
		if err != nil {
			return result, fmt.Errorf("projection: Game._unmarshalJSONGame: field SessionID; %w", err)
		}
	}
	if fieldPlayers, ok := partial["Players"]; ok {
		result.Players, err = r._unmarshalJSONSlicestring(fieldPlayers)
		if err != nil {
			return result, fmt.Errorf("projection: Game._unmarshalJSONGame: field Players; %w", err)
		}
	}
	if fieldWinner, ok := partial["Winner"]; ok {
		result.Winner, err = r._unmarshalJSONstring(fieldWinner)
		if err != nil {
			return result, fmt.Errorf("projection: Game._unmarshalJSONGame: field Winner; %w", err)
		}
	}
	if fieldIsDraw, ok := partial["IsDraw"]; ok {
		result.IsDraw, err = r._unmarshalJSONbool(fieldIsDraw)
		if err != nil {
			return result, fmt.Errorf("projection: Game._unmarshalJSONGame: field IsDraw; %w", err)
		}
	}
	return result, nil
}
func (r *Game) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("projection: Game._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Game) _unmarshalJSONSlicestring(data []byte) ([]string, error) {
	result := make([]string, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("projection: Game._unmarshalJSONSlicestring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("projection: Game._unmarshalJSONSlicestring: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *Game) _unmarshalJSONbool(data []byte) (bool, error) {
	var result bool
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("projection: Game._unmarshalJSONbool: native primitive unwrap; %w", err)
	}
	return result, nil
}

var (
	_ json.Unmarshaler = (*SessionsStats)(nil)
	_ json.Marshaler   = (*SessionsStats)(nil)
)

func (r *SessionsStats) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONSessionsStats(*r)
}
func (r *SessionsStats) _marshalJSONSessionsStats(x SessionsStats) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldWins []byte
	fieldWins, err = r._marshalJSONint(x.Wins)
	if err != nil {
		return nil, fmt.Errorf("projection: SessionsStats._marshalJSONSessionsStats: field name Wins; %w", err)
	}
	partial["Wins"] = fieldWins
	var fieldDraws []byte
	fieldDraws, err = r._marshalJSONint(x.Draws)
	if err != nil {
		return nil, fmt.Errorf("projection: SessionsStats._marshalJSONSessionsStats: field name Draws; %w", err)
	}
	partial["Draws"] = fieldDraws
	var fieldLoose []byte
	fieldLoose, err = r._marshalJSONint(x.Loose)
	if err != nil {
		return nil, fmt.Errorf("projection: SessionsStats._marshalJSONSessionsStats: field name Loose; %w", err)
	}
	partial["Loose"] = fieldLoose
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("projection: SessionsStats._marshalJSONSessionsStats: struct; %w", err)
	}
	return result, nil
}
func (r *SessionsStats) _marshalJSONint(x int) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("projection: SessionsStats._marshalJSONint:; %w", err)
	}
	return result, nil
}
func (r *SessionsStats) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONSessionsStats(data)
	if err != nil {
		return fmt.Errorf("projection: SessionsStats.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *SessionsStats) _unmarshalJSONSessionsStats(data []byte) (SessionsStats, error) {
	result := SessionsStats{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("projection: SessionsStats._unmarshalJSONSessionsStats: native struct unwrap; %w", err)
	}
	if fieldWins, ok := partial["Wins"]; ok {
		result.Wins, err = r._unmarshalJSONint(fieldWins)
		if err != nil {
			return result, fmt.Errorf("projection: SessionsStats._unmarshalJSONSessionsStats: field Wins; %w", err)
		}
	}
	if fieldDraws, ok := partial["Draws"]; ok {
		result.Draws, err = r._unmarshalJSONint(fieldDraws)
		if err != nil {
			return result, fmt.Errorf("projection: SessionsStats._unmarshalJSONSessionsStats: field Draws; %w", err)
		}
	}
	if fieldLoose, ok := partial["Loose"]; ok {
		result.Loose, err = r._unmarshalJSONint(fieldLoose)
		if err != nil {
			return result, fmt.Errorf("projection: SessionsStats._unmarshalJSONSessionsStats: field Loose; %w", err)
		}
	}
	return result, nil
}
func (r *SessionsStats) _unmarshalJSONint(data []byte) (int, error) {
	var result int
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("projection: SessionsStats._unmarshalJSONint: native primitive unwrap; %w", err)
	}
	return result, nil
}
