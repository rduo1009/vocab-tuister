// Code generated by mkunion. DO NOT EDIT.
package projection

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(DefaultContextShape())
	shape.Register(DoJoinShape())
	shape.Register(DoLoadShape())
	shape.Register(DoMapShape())
	shape.Register(DoWindowShape())
	shape.Register(EventTimeShape())
	shape.Register(ItemGroupedByKeyShape())
	shape.Register(ItemGroupedByWindowShape())
	shape.Register(ItemShape())
	shape.Register(ItemTypeShape())
	shape.Register(MessageShape())
	shape.Register(NodeShape())
	shape.Register(StatsShape())
	shape.Register(WindowShape())
}

//shape:shape

func NodeShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Node",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Variant: []shape.Shape{
			DoWindowShape(),
			DoMapShape(),
			DoLoadShape(),
			DoJoinShape(),
		},
	}
}

func DoWindowShape() shape.Shape {
	return &shape.StructLike{
		Name:          "DoWindow",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "Ctx",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "DefaultContext",
						PkgName:       "projection",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
					},
				},
			},
			{
				Name: "Input",
				Type: &shape.RefName{
					Name:          "Node",
					PkgName:       "projection",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Node",
			},
		},
	}
}

func DoMapShape() shape.Shape {
	return &shape.StructLike{
		Name:          "DoMap",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "Ctx",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "DefaultContext",
						PkgName:       "projection",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
					},
				},
			},
			{
				Name: "OnMap",
				Type: &shape.RefName{
					Name:          "Handler",
					PkgName:       "projection",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
				},
			},
			{
				Name: "Input",
				Type: &shape.RefName{
					Name:          "Node",
					PkgName:       "projection",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Node",
			},
		},
	}
}

func DoLoadShape() shape.Shape {
	return &shape.StructLike{
		Name:          "DoLoad",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "Ctx",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "DefaultContext",
						PkgName:       "projection",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
					},
				},
			},
			{
				Name: "OnLoad",
				Type: &shape.RefName{
					Name:          "Handler",
					PkgName:       "projection",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Node",
			},
		},
	}
}

func DoJoinShape() shape.Shape {
	return &shape.StructLike{
		Name:          "DoJoin",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "Ctx",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "DefaultContext",
						PkgName:       "projection",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
					},
				},
			},
			{
				Name: "Input",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "Node",
						PkgName:       "projection",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Node",
			},
		},
	}
}

//shape:shape
func DefaultContextShape() shape.Shape {
	return &shape.StructLike{
		Name:          "DefaultContext",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
	}
}

//shape:shape
func EventTimeShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "EventTime",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		IsAlias:       true,
		Type: &shape.PrimitiveLike{
			Kind: &shape.NumberLike{
				Kind: &shape.Int64{},
			},
		},
	}
}

//shape:shape
func ItemShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Item",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "Key",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Data",
				Type: &shape.RefName{
					Name:          "Schema",
					PkgName:       "schema",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema",
				},
			},
			{
				Name: "EventTime",
				Type: &shape.RefName{
					Name:          "EventTime",
					PkgName:       "projection",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
				},
			},
			{
				Name: "Window",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Window",
						PkgName:       "projection",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
					},
				},
			},
			{
				Name: "Type",
				Type: &shape.RefName{
					Name:          "ItemType",
					PkgName:       "projection",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}

//shape:shape
func WindowShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Window",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "Start",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int64{},
					},
				},
			},
			{
				Name: "End",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int64{},
					},
				},
			},
		},
	}
}

//shape:shape
func ItemTypeShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "ItemType",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Type: &shape.PrimitiveLike{
			Kind: &shape.NumberLike{
				Kind: &shape.UInt8{},
			},
		},
	}
}

//shape:shape
func ItemGroupedByKeyShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ItemGroupedByKey",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "Key",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Data",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "Item",
						PkgName:       "projection",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}

//shape:shape
func ItemGroupedByWindowShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ItemGroupedByWindow",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "Key",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Data",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "List",
						PkgName:       "schema",
						PkgImportName: "github.com/widmogrod/mkunion/x/schema",
					},
				},
			},
			{
				Name: "Window",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Window",
						PkgName:       "projection",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}

//shape:shape
func MessageShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Message",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "Offset",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int{},
					},
				},
			},
			{
				Name: "Key",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Item",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Item",
						PkgName:       "projection",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
					},
				},
			},
			{
				Name: "Watermark",
				Type: &shape.PointerLike{
					Type: &shape.PrimitiveLike{
						Kind: &shape.NumberLike{
							Kind: &shape.Int64{},
						},
					},
				},
			},
		},
	}
}

//shape:shape
func StatsShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "Stats",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		IsAlias:       true,
		Type: &shape.MapLike{
			Key: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			Val: &shape.PrimitiveLike{
				Kind: &shape.NumberLike{
					Kind: &shape.Int{},
				},
			},
		},
	}
}
