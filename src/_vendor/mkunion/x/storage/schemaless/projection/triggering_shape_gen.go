// Code generated by mkunion. DO NOT EDIT.
package projection

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(AccumulateDiscardRetractHandlerShape())
	shape.Register(AccumulateShape())
	shape.Register(AccumulatingAndRetractingShape())
	shape.Register(AllOfShape())
	shape.Register(AnyOfShape())
	shape.Register(AtPeriod1Shape())
	shape.Register(AtPeriodShape())
	shape.Register(AtWatermark1Shape())
	shape.Register(AtWatermarkShape())
	shape.Register(AtWindowItemSize1Shape())
	shape.Register(AtWindowItemSizeShape())
	shape.Register(DiscardShape())
	shape.Register(InMemoryBagOfShape())
	shape.Register(TickersShape())
	shape.Register(TriggerDescriptionShape())
	shape.Register(TriggerHandlerShape())
	shape.Register(TriggerManagerShape())
	shape.Register(TriggerTypeShape())
	shape.Register(WindowFlushModeShape())
}

//shape:shape

func TriggerDescriptionShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "TriggerDescription",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Variant: []shape.Shape{
			AtPeriodShape(),
			AtWindowItemSizeShape(),
			AtWatermarkShape(),
			AnyOfShape(),
			AllOfShape(),
		},
	}
}

func AtPeriodShape() shape.Shape {
	return &shape.StructLike{
		Name:          "AtPeriod",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "Duration",
				Type: &shape.RefName{
					Name:          "Duration",
					PkgName:       "time",
					PkgImportName: "time",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "TriggerDescription",
			},
		},
	}
}

func AtWindowItemSizeShape() shape.Shape {
	return &shape.StructLike{
		Name:          "AtWindowItemSize",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "Number",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int{},
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "TriggerDescription",
			},
		},
	}
}

func AtWatermarkShape() shape.Shape {
	return &shape.StructLike{
		Name:          "AtWatermark",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "Timestamp",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int64{},
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "TriggerDescription",
			},
		},
	}
}

func AnyOfShape() shape.Shape {
	return &shape.StructLike{
		Name:          "AnyOf",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "Triggers",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "TriggerDescription",
						PkgName:       "projection",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "TriggerDescription",
			},
		},
	}
}

func AllOfShape() shape.Shape {
	return &shape.StructLike{
		Name:          "AllOf",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "Triggers",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "TriggerDescription",
						PkgName:       "projection",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "TriggerDescription",
			},
		},
	}
}

//shape:shape

func TriggerTypeShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "TriggerType",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Variant: []shape.Shape{
			AtPeriod1Shape(),
			AtWindowItemSize1Shape(),
			AtWatermark1Shape(),
		},
	}
}

func AtPeriod1Shape() shape.Shape {
	return &shape.AliasLike{
		Name:          "AtPeriod1",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "TriggerType",
			},
		},
		IsAlias: true,
		Type: &shape.RefName{
			Name:          "AtPeriod",
			PkgName:       "projection",
			PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		},
	}
}

func AtWindowItemSize1Shape() shape.Shape {
	return &shape.AliasLike{
		Name:          "AtWindowItemSize1",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "TriggerType",
			},
		},
		IsAlias: true,
		Type: &shape.RefName{
			Name:          "AtWindowItemSize",
			PkgName:       "projection",
			PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		},
	}
}

func AtWatermark1Shape() shape.Shape {
	return &shape.AliasLike{
		Name:          "AtWatermark1",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "TriggerType",
			},
		},
		IsAlias: true,
		Type: &shape.RefName{
			Name:          "AtWatermark",
			PkgName:       "projection",
			PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		},
	}
}

//shape:shape

func WindowFlushModeShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "WindowFlushMode",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Variant: []shape.Shape{
			AccumulateShape(),
			DiscardShape(),
			AccumulatingAndRetractingShape(),
		},
	}
}

func AccumulateShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Accumulate",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "AllowLateArrival",
				Type: &shape.RefName{
					Name:          "Duration",
					PkgName:       "time",
					PkgImportName: "time",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "WindowFlushMode",
			},
		},
	}
}

func DiscardShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Discard",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "WindowFlushMode",
			},
		},
	}
}

func AccumulatingAndRetractingShape() shape.Shape {
	return &shape.StructLike{
		Name:          "AccumulatingAndRetracting",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "AllowLateArrival",
				Type: &shape.RefName{
					Name:          "Duration",
					PkgName:       "time",
					PkgImportName: "time",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "WindowFlushMode",
			},
		},
	}
}

//shape:shape
func AccumulateDiscardRetractHandlerShape() shape.Shape {
	return &shape.StructLike{
		Name:          "AccumulateDiscardRetractHandler",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
	}
}

//shape:shape
func InMemoryBagOfShape() shape.Shape {
	return &shape.StructLike{
		Name:          "InMemoryBagOf",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "A",
				Type: &shape.Any{},
			},
		},
	}
}

//shape:shape
func TickersShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Tickers",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
	}
}

//shape:shape
func TriggerHandlerShape() shape.Shape {
	return &shape.StructLike{
		Name:          "TriggerHandler",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
	}
}

//shape:shape
func TriggerManagerShape() shape.Shape {
	return &shape.StructLike{
		Name:          "TriggerManager",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
	}
}
