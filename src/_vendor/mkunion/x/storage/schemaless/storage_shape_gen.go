// Code generated by mkunion. DO NOT EDIT.
package schemaless

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(CursorShape())
	shape.Register(FindingRecordsShape())
	shape.Register(PageResultShape())
	shape.Register(RecordShape())
	shape.Register(RecordTypeShape())
	shape.Register(SortFieldShape())
	shape.Register(UpdateRecordsResultShape())
	shape.Register(UpdateRecordsShape())
	shape.Register(UpdatingPolicyShape())
}

//shape:shape
func CursorShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "Cursor",
		PkgName:       "schemaless",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
		IsAlias:       true,
		Type:          &shape.PrimitiveLike{Kind: &shape.StringLike{}},
	}
}

//shape:shape
func FindingRecordsShape() shape.Shape {
	return &shape.StructLike{
		Name:          "FindingRecords",
		PkgName:       "schemaless",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "T",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "RecordType",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Where",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "WherePredicates",
						PkgName:       "predicate",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
					},
				},
			},
			{
				Name: "Sort",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "SortField",
						PkgName:       "schemaless",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
					},
				},
			},
			{
				Name: "Limit",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.UInt8{},
					},
				},
			},
			{
				Name: "After",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Cursor",
						PkgName:       "schemaless",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
					},
				},
			},
			{
				Name: "Before",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Cursor",
						PkgName:       "schemaless",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
					},
				},
			},
		},
	}
}

//shape:shape
func SortFieldShape() shape.Shape {
	return &shape.StructLike{
		Name:          "SortField",
		PkgName:       "schemaless",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
		Fields: []*shape.FieldLike{
			{
				Name: "Field",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Descending",
				Type: &shape.PrimitiveLike{Kind: &shape.BooleanLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}

//shape:shape
func PageResultShape() shape.Shape {
	return &shape.StructLike{
		Name:          "PageResult",
		PkgName:       "schemaless",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "A",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Items",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "A",
						PkgName:       "",
						PkgImportName: "",
					},
				},
			},
			{
				Name: "Next",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "FindingRecords",
						PkgName:       "schemaless",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
						Indexed: []shape.Shape{
							&shape.RefName{
								Name:          "A",
								PkgName:       "",
								PkgImportName: "",
							},
						},
					},
				},
			},
			{
				Name: "Prev",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "FindingRecords",
						PkgName:       "schemaless",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
						Indexed: []shape.Shape{
							&shape.RefName{
								Name:          "A",
								PkgName:       "",
								PkgImportName: "",
							},
						},
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}

//shape:shape
func RecordShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Record",
		PkgName:       "schemaless",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "A",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "ID",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Type",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Data",
				Type: &shape.RefName{
					Name:          "A",
					PkgName:       "",
					PkgImportName: "",
				},
			},
			{
				Name: "Version",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.UInt16{},
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}

//shape:shape
func RecordTypeShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "RecordType",
		PkgName:       "schemaless",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
		IsAlias:       true,
		Type:          &shape.PrimitiveLike{Kind: &shape.StringLike{}},
	}
}

//shape:shape
func UpdateRecordsShape() shape.Shape {
	return &shape.StructLike{
		Name:          "UpdateRecords",
		PkgName:       "schemaless",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "T",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "UpdatingPolicy",
				Type: &shape.RefName{
					Name:          "UpdatingPolicy",
					PkgName:       "schemaless",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
				},
			},
			{
				Name: "Saving",
				Type: &shape.MapLike{
					Key: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
					Val: &shape.RefName{
						Name:          "T",
						PkgName:       "",
						PkgImportName: "",
					},
				},
			},
			{
				Name: "Deleting",
				Type: &shape.MapLike{
					Key: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
					Val: &shape.RefName{
						Name:          "T",
						PkgName:       "",
						PkgImportName: "",
					},
				},
			},
		},
	}
}

//shape:shape
func UpdatingPolicyShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "UpdatingPolicy",
		PkgName:       "schemaless",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
		Type: &shape.PrimitiveLike{
			Kind: &shape.NumberLike{
				Kind: &shape.UInt{},
			},
		},
	}
}

//shape:shape
func UpdateRecordsResultShape() shape.Shape {
	return &shape.StructLike{
		Name:          "UpdateRecordsResult",
		PkgName:       "schemaless",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "T",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Saved",
				Type: &shape.MapLike{
					Key: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
					Val: &shape.RefName{
						Name:          "T",
						PkgName:       "",
						PkgImportName: "",
					},
				},
			},
			{
				Name: "Deleted",
				Type: &shape.MapLike{
					Key: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
					Val: &shape.RefName{
						Name:          "T",
						PkgName:       "",
						PkgImportName: "",
					},
				},
			},
		},
	}
}
