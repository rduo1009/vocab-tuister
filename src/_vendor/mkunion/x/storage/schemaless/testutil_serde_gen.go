// Code generated by mkunion. DO NOT EDIT.
package schemaless

import (
	"encoding/json"
	"fmt"
)

var (
	_ json.Unmarshaler = (*ExampleRecord)(nil)
	_ json.Marshaler   = (*ExampleRecord)(nil)
)

func (r *ExampleRecord) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONExampleRecord(*r)
}
func (r *ExampleRecord) _marshalJSONExampleRecord(x ExampleRecord) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldName []byte
	fieldName, err = r._marshalJSONstring(x.Name)
	if err != nil {
		return nil, fmt.Errorf("schemaless: ExampleRecord._marshalJSONExampleRecord: field name Name; %w", err)
	}
	partial["Name"] = fieldName
	var fieldAge []byte
	fieldAge, err = r._marshalJSONint(x.Age)
	if err != nil {
		return nil, fmt.Errorf("schemaless: ExampleRecord._marshalJSONExampleRecord: field name Age; %w", err)
	}
	partial["Age"] = fieldAge
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("schemaless: ExampleRecord._marshalJSONExampleRecord: struct; %w", err)
	}
	return result, nil
}
func (r *ExampleRecord) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("schemaless: ExampleRecord._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *ExampleRecord) _marshalJSONint(x int) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("schemaless: ExampleRecord._marshalJSONint:; %w", err)
	}
	return result, nil
}
func (r *ExampleRecord) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONExampleRecord(data)
	if err != nil {
		return fmt.Errorf("schemaless: ExampleRecord.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *ExampleRecord) _unmarshalJSONExampleRecord(data []byte) (ExampleRecord, error) {
	result := ExampleRecord{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("schemaless: ExampleRecord._unmarshalJSONExampleRecord: native struct unwrap; %w", err)
	}
	if fieldName, ok := partial["Name"]; ok {
		result.Name, err = r._unmarshalJSONstring(fieldName)
		if err != nil {
			return result, fmt.Errorf("schemaless: ExampleRecord._unmarshalJSONExampleRecord: field Name; %w", err)
		}
	}
	if fieldAge, ok := partial["Age"]; ok {
		result.Age, err = r._unmarshalJSONint(fieldAge)
		if err != nil {
			return result, fmt.Errorf("schemaless: ExampleRecord._unmarshalJSONExampleRecord: field Age; %w", err)
		}
	}
	return result, nil
}
func (r *ExampleRecord) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("schemaless: ExampleRecord._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *ExampleRecord) _unmarshalJSONint(data []byte) (int, error) {
	var result int
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("schemaless: ExampleRecord._unmarshalJSONint: native primitive unwrap; %w", err)
	}
	return result, nil
}
