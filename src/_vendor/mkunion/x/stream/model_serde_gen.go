// Code generated by mkunion. DO NOT EDIT.
package stream

import (
	"encoding/json"
	"fmt"
)

var (
	_ json.Unmarshaler = (*Offset)(nil)
	_ json.Marshaler   = (*Offset)(nil)
)

func (r *Offset) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONOffset(*r)
}
func (r *Offset) _marshalJSONOffset(x Offset) ([]byte, error) {
	return r._marshalJSONstring(string(x))
}
func (r *Offset) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("stream: Offset._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *Offset) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONOffset(data)
	if err != nil {
		return fmt.Errorf("stream: Offset.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Offset) _unmarshalJSONOffset(data []byte) (Offset, error) {
	var result Offset
	intermidiary, err := r._unmarshalJSONstring(data)
	if err != nil {
		return result, fmt.Errorf("stream: Offset._unmarshalJSONOffset: alias; %w", err)
	}
	result = Offset(intermidiary)
	return result, nil
}
func (r *Offset) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("stream: Offset._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
