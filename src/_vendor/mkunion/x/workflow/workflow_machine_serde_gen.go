// Code generated by mkunion. DO NOT EDIT.
package workflow

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/schema"
	"github.com/widmogrod/mkunion/x/shared"
)

var (
	_ json.Unmarshaler = (*ApplyAwaitOptions)(nil)
	_ json.Marshaler   = (*ApplyAwaitOptions)(nil)
)

func (r *ApplyAwaitOptions) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONApplyAwaitOptions(*r)
}
func (r *ApplyAwaitOptions) _marshalJSONApplyAwaitOptions(x ApplyAwaitOptions) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldTimeoutSeconds []byte
	fieldTimeoutSeconds, err = r._marshalJSONint64(x.TimeoutSeconds)
	if err != nil {
		return nil, fmt.Errorf("workflow: ApplyAwaitOptions._marshalJSONApplyAwaitOptions: field name TimeoutSeconds; %w", err)
	}
	partial["TimeoutSeconds"] = fieldTimeoutSeconds
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: ApplyAwaitOptions._marshalJSONApplyAwaitOptions: struct; %w", err)
	}
	return result, nil
}
func (r *ApplyAwaitOptions) _marshalJSONint64(x int64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("workflow: ApplyAwaitOptions._marshalJSONint64:; %w", err)
	}
	return result, nil
}
func (r *ApplyAwaitOptions) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONApplyAwaitOptions(data)
	if err != nil {
		return fmt.Errorf("workflow: ApplyAwaitOptions.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *ApplyAwaitOptions) _unmarshalJSONApplyAwaitOptions(data []byte) (ApplyAwaitOptions, error) {
	result := ApplyAwaitOptions{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: ApplyAwaitOptions._unmarshalJSONApplyAwaitOptions: native struct unwrap; %w", err)
	}
	if fieldTimeoutSeconds, ok := partial["TimeoutSeconds"]; ok {
		result.TimeoutSeconds, err = r._unmarshalJSONint64(fieldTimeoutSeconds)
		if err != nil {
			return result, fmt.Errorf("workflow: ApplyAwaitOptions._unmarshalJSONApplyAwaitOptions: field TimeoutSeconds; %w", err)
		}
	}
	return result, nil
}
func (r *ApplyAwaitOptions) _unmarshalJSONint64(data []byte) (int64, error) {
	var result int64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("workflow: ApplyAwaitOptions._unmarshalJSONint64: native primitive unwrap; %w", err)
	}
	return result, nil
}

var (
	_ json.Unmarshaler = (*BaseState)(nil)
	_ json.Marshaler   = (*BaseState)(nil)
)

func (r *BaseState) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONBaseState(*r)
}
func (r *BaseState) _marshalJSONBaseState(x BaseState) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldFlow []byte
	fieldFlow, err = r._marshalJSONWorkflow(x.Flow)
	if err != nil {
		return nil, fmt.Errorf("workflow: BaseState._marshalJSONBaseState: field name Flow; %w", err)
	}
	partial["Flow"] = fieldFlow
	var fieldRunID []byte
	fieldRunID, err = r._marshalJSONRunID(x.RunID)
	if err != nil {
		return nil, fmt.Errorf("workflow: BaseState._marshalJSONBaseState: field name RunID; %w", err)
	}
	partial["RunID"] = fieldRunID
	var fieldStepID []byte
	fieldStepID, err = r._marshalJSONStepID(x.StepID)
	if err != nil {
		return nil, fmt.Errorf("workflow: BaseState._marshalJSONBaseState: field name StepID; %w", err)
	}
	partial["StepID"] = fieldStepID
	var fieldVariables []byte
	fieldVariables, err = r._marshalJSONmapLb_string_bLschema_Schema(x.Variables)
	if err != nil {
		return nil, fmt.Errorf("workflow: BaseState._marshalJSONBaseState: field name Variables; %w", err)
	}
	partial["Variables"] = fieldVariables
	var fieldExprResult []byte
	fieldExprResult, err = r._marshalJSONmapLb_string_bLschema_Schema(x.ExprResult)
	if err != nil {
		return nil, fmt.Errorf("workflow: BaseState._marshalJSONBaseState: field name ExprResult; %w", err)
	}
	partial["ExprResult"] = fieldExprResult
	var fieldDefaultMaxRetries []byte
	fieldDefaultMaxRetries, err = r._marshalJSONint64(x.DefaultMaxRetries)
	if err != nil {
		return nil, fmt.Errorf("workflow: BaseState._marshalJSONBaseState: field name DefaultMaxRetries; %w", err)
	}
	partial["DefaultMaxRetries"] = fieldDefaultMaxRetries
	var fieldRunOption []byte
	fieldRunOption, err = r._marshalJSONRunOption(x.RunOption)
	if err != nil {
		return nil, fmt.Errorf("workflow: BaseState._marshalJSONBaseState: field name RunOption; %w", err)
	}
	partial["RunOption"] = fieldRunOption
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: BaseState._marshalJSONBaseState: struct; %w", err)
	}
	return result, nil
}
func (r *BaseState) _marshalJSONWorkflow(x Workflow) ([]byte, error) {
	result, err := shared.JSONMarshal[Workflow](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: BaseState._marshalJSONWorkflow:; %w", err)
	}
	return result, nil
}
func (r *BaseState) _marshalJSONRunID(x RunID) ([]byte, error) {
	result, err := shared.JSONMarshal[RunID](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: BaseState._marshalJSONRunID:; %w", err)
	}
	return result, nil
}
func (r *BaseState) _marshalJSONStepID(x StepID) ([]byte, error) {
	result, err := shared.JSONMarshal[StepID](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: BaseState._marshalJSONStepID:; %w", err)
	}
	return result, nil
}
func (r *BaseState) _marshalJSONmapLb_string_bLschema_Schema(x map[string]schema.Schema) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	for k, v := range x {
		key := string(k)
		value, err := r._marshalJSONschema_Schema(v)
		if err != nil {
			return nil, fmt.Errorf("workflow: BaseState._marshalJSONmapLb_string_bLschema_Schema: value; %w", err)
		}
		partial[string(key)] = value
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: BaseState._marshalJSONmapLb_string_bLschema_Schema:; %w", err)
	}
	return result, nil
}
func (r *BaseState) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("workflow: BaseState._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *BaseState) _marshalJSONschema_Schema(x schema.Schema) ([]byte, error) {
	result, err := shared.JSONMarshal[schema.Schema](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: BaseState._marshalJSONschema_Schema:; %w", err)
	}
	return result, nil
}
func (r *BaseState) _marshalJSONint64(x int64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("workflow: BaseState._marshalJSONint64:; %w", err)
	}
	return result, nil
}
func (r *BaseState) _marshalJSONRunOption(x RunOption) ([]byte, error) {
	result, err := shared.JSONMarshal[RunOption](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: BaseState._marshalJSONRunOption:; %w", err)
	}
	return result, nil
}
func (r *BaseState) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONBaseState(data)
	if err != nil {
		return fmt.Errorf("workflow: BaseState.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *BaseState) _unmarshalJSONBaseState(data []byte) (BaseState, error) {
	result := BaseState{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: BaseState._unmarshalJSONBaseState: native struct unwrap; %w", err)
	}
	if fieldFlow, ok := partial["Flow"]; ok {
		result.Flow, err = r._unmarshalJSONWorkflow(fieldFlow)
		if err != nil {
			return result, fmt.Errorf("workflow: BaseState._unmarshalJSONBaseState: field Flow; %w", err)
		}
	}
	if fieldRunID, ok := partial["RunID"]; ok {
		result.RunID, err = r._unmarshalJSONRunID(fieldRunID)
		if err != nil {
			return result, fmt.Errorf("workflow: BaseState._unmarshalJSONBaseState: field RunID; %w", err)
		}
	}
	if fieldStepID, ok := partial["StepID"]; ok {
		result.StepID, err = r._unmarshalJSONStepID(fieldStepID)
		if err != nil {
			return result, fmt.Errorf("workflow: BaseState._unmarshalJSONBaseState: field StepID; %w", err)
		}
	}
	if fieldVariables, ok := partial["Variables"]; ok {
		result.Variables, err = r._unmarshalJSONmapLb_string_bLschema_Schema(fieldVariables)
		if err != nil {
			return result, fmt.Errorf("workflow: BaseState._unmarshalJSONBaseState: field Variables; %w", err)
		}
	}
	if fieldExprResult, ok := partial["ExprResult"]; ok {
		result.ExprResult, err = r._unmarshalJSONmapLb_string_bLschema_Schema(fieldExprResult)
		if err != nil {
			return result, fmt.Errorf("workflow: BaseState._unmarshalJSONBaseState: field ExprResult; %w", err)
		}
	}
	if fieldDefaultMaxRetries, ok := partial["DefaultMaxRetries"]; ok {
		result.DefaultMaxRetries, err = r._unmarshalJSONint64(fieldDefaultMaxRetries)
		if err != nil {
			return result, fmt.Errorf("workflow: BaseState._unmarshalJSONBaseState: field DefaultMaxRetries; %w", err)
		}
	}
	if fieldRunOption, ok := partial["RunOption"]; ok {
		result.RunOption, err = r._unmarshalJSONRunOption(fieldRunOption)
		if err != nil {
			return result, fmt.Errorf("workflow: BaseState._unmarshalJSONBaseState: field RunOption; %w", err)
		}
	}
	return result, nil
}
func (r *BaseState) _unmarshalJSONWorkflow(data []byte) (Workflow, error) {
	result, err := shared.JSONUnmarshal[Workflow](data)
	if err != nil {
		return result, fmt.Errorf("workflow: BaseState._unmarshalJSONWorkflow: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *BaseState) _unmarshalJSONRunID(data []byte) (RunID, error) {
	result, err := shared.JSONUnmarshal[RunID](data)
	if err != nil {
		return result, fmt.Errorf("workflow: BaseState._unmarshalJSONRunID: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *BaseState) _unmarshalJSONStepID(data []byte) (StepID, error) {
	result, err := shared.JSONUnmarshal[StepID](data)
	if err != nil {
		return result, fmt.Errorf("workflow: BaseState._unmarshalJSONStepID: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *BaseState) _unmarshalJSONmapLb_string_bLschema_Schema(data []byte) (map[string]schema.Schema, error) {
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: BaseState._unmarshalJSONmapLb_string_bLschema_Schema: native map unwrap; %w", err)
	}
	result := make(map[string]schema.Schema)
	for k, v := range partial {
		key := string(k)
		value, err := r._unmarshalJSONschema_Schema(v)
		if err != nil {
			return nil, fmt.Errorf("workflow: BaseState._unmarshalJSONmapLb_string_bLschema_Schema: value; %w", err)
		}
		result[key] = value
	}
	return result, nil
}
func (r *BaseState) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("workflow: BaseState._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *BaseState) _unmarshalJSONschema_Schema(data []byte) (schema.Schema, error) {
	result, err := shared.JSONUnmarshal[schema.Schema](data)
	if err != nil {
		return result, fmt.Errorf("workflow: BaseState._unmarshalJSONschema_Schema: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *BaseState) _unmarshalJSONint64(data []byte) (int64, error) {
	var result int64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("workflow: BaseState._unmarshalJSONint64: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *BaseState) _unmarshalJSONRunOption(data []byte) (RunOption, error) {
	result, err := shared.JSONUnmarshal[RunOption](data)
	if err != nil {
		return result, fmt.Errorf("workflow: BaseState._unmarshalJSONRunOption: native ref unwrap; %w", err)
	}
	return result, nil
}

var (
	_ json.Unmarshaler = (*ResumeOptions)(nil)
	_ json.Marshaler   = (*ResumeOptions)(nil)
)

func (r *ResumeOptions) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONResumeOptions(*r)
}
func (r *ResumeOptions) _marshalJSONResumeOptions(x ResumeOptions) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldTimeout []byte
	fieldTimeout, err = r._marshalJSONint64(x.Timeout)
	if err != nil {
		return nil, fmt.Errorf("workflow: ResumeOptions._marshalJSONResumeOptions: field name Timeout; %w", err)
	}
	partial["Timeout"] = fieldTimeout
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: ResumeOptions._marshalJSONResumeOptions: struct; %w", err)
	}
	return result, nil
}
func (r *ResumeOptions) _marshalJSONint64(x int64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("workflow: ResumeOptions._marshalJSONint64:; %w", err)
	}
	return result, nil
}
func (r *ResumeOptions) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONResumeOptions(data)
	if err != nil {
		return fmt.Errorf("workflow: ResumeOptions.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *ResumeOptions) _unmarshalJSONResumeOptions(data []byte) (ResumeOptions, error) {
	result := ResumeOptions{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: ResumeOptions._unmarshalJSONResumeOptions: native struct unwrap; %w", err)
	}
	if fieldTimeout, ok := partial["Timeout"]; ok {
		result.Timeout, err = r._unmarshalJSONint64(fieldTimeout)
		if err != nil {
			return result, fmt.Errorf("workflow: ResumeOptions._unmarshalJSONResumeOptions: field Timeout; %w", err)
		}
	}
	return result, nil
}
func (r *ResumeOptions) _unmarshalJSONint64(data []byte) (int64, error) {
	var result int64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("workflow: ResumeOptions._unmarshalJSONint64: native primitive unwrap; %w", err)
	}
	return result, nil
}
