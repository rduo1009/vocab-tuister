// Code generated by mkunion. DO NOT EDIT.
package workflow

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(AndShape())
	shape.Register(ApplyAwaitOptionsShape())
	shape.Register(ApplyShape())
	shape.Register(AssignShape())
	shape.Register(AwaitShape())
	shape.Register(BaseStateShape())
	shape.Register(CallbackShape())
	shape.Register(ChooseShape())
	shape.Register(CommandShape())
	shape.Register(CompareShape())
	shape.Register(DelayRunShape())
	shape.Register(DoneShape())
	shape.Register(EndShape())
	shape.Register(ErrorShape())
	shape.Register(ExecutionShape())
	shape.Register(ExpireAsyncShape())
	shape.Register(ExprShape())
	shape.Register(FlowIDShape())
	shape.Register(FlowRefShape())
	shape.Register(FlowShape())
	shape.Register(GetValueShape())
	shape.Register(NextOperationShape())
	shape.Register(NotShape())
	shape.Register(OrShape())
	shape.Register(PredicateShape())
	shape.Register(ReshaperShape())
	shape.Register(ResumeOptionsShape())
	shape.Register(ResumeScheduleShape())
	shape.Register(RunIDShape())
	shape.Register(RunOptionShape())
	shape.Register(RunShape())
	shape.Register(ScheduleRunShape())
	shape.Register(ScheduleStoppedShape())
	shape.Register(ScheduledShape())
	shape.Register(SetValueShape())
	shape.Register(StateShape())
	shape.Register(StepIDShape())
	shape.Register(StopScheduleShape())
	shape.Register(TryRecoverShape())
	shape.Register(WorkflowShape())
}

//shape:shape

func CommandShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Command",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Variant: []shape.Shape{
			RunShape(),
			CallbackShape(),
			TryRecoverShape(),
			StopScheduleShape(),
			ResumeScheduleShape(),
			ExpireAsyncShape(),
		},
	}
}

func RunShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Run",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "Flow",
				Type: &shape.RefName{
					Name:          "Workflow",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
			{
				Name: "Input",
				Type: &shape.RefName{
					Name:          "Schema",
					PkgName:       "schema",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema",
				},
			},
			{
				Name: "RunOption",
				Type: &shape.RefName{
					Name:          "RunOption",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Command",
			},
		},
	}
}

func CallbackShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Callback",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "CallbackID",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Result",
				Type: &shape.RefName{
					Name:          "Schema",
					PkgName:       "schema",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Command",
			},
		},
	}
}

func TryRecoverShape() shape.Shape {
	return &shape.StructLike{
		Name:          "TryRecover",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "RunID",
				Type: &shape.RefName{
					Name:          "RunID",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Command",
			},
		},
	}
}

func StopScheduleShape() shape.Shape {
	return &shape.StructLike{
		Name:          "StopSchedule",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "ParentRunID",
				Type: &shape.RefName{
					Name:          "RunID",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Command",
			},
		},
	}
}

func ResumeScheduleShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ResumeSchedule",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "ParentRunID",
				Type: &shape.RefName{
					Name:          "RunID",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Command",
			},
		},
	}
}

func ExpireAsyncShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ExpireAsync",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "RunID",
				Type: &shape.RefName{
					Name:          "RunID",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Command",
			},
		},
	}
}

//shape:shape

func WorkflowShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Workflow",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Variant: []shape.Shape{
			FlowShape(),
			FlowRefShape(),
		},
	}
}

func FlowShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Flow",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "Name",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Arg",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Body",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "Expr",
						PkgName:       "workflow",
						PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Workflow",
			},
		},
	}
}

func FlowRefShape() shape.Shape {
	return &shape.StructLike{
		Name:          "FlowRef",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "FlowID",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Workflow",
			},
		},
	}
}

//shape:shape

func RunOptionShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "RunOption",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Variant: []shape.Shape{
			ScheduleRunShape(),
			DelayRunShape(),
		},
	}
}

func ScheduleRunShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ScheduleRun",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "Interval",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "ParentRunID",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "RunOption",
			},
		},
	}
}

func DelayRunShape() shape.Shape {
	return &shape.StructLike{
		Name:          "DelayRun",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "DelayBySeconds",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int64{},
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "RunOption",
			},
		},
	}
}

//shape:shape
func RunIDShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "RunID",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		IsAlias:       true,
		Type:          &shape.PrimitiveLike{Kind: &shape.StringLike{}},
	}
}

//shape:shape

func ExprShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Expr",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Variant: []shape.Shape{
			EndShape(),
			AssignShape(),
			ApplyShape(),
			ChooseShape(),
		},
	}
}

func EndShape() shape.Shape {
	return &shape.StructLike{
		Name:          "End",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "ID",
				Type: &shape.RefName{
					Name:          "StepID",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
			{
				Name: "Result",
				Type: &shape.RefName{
					Name:          "Reshaper",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Expr",
			},
		},
	}
}

func AssignShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Assign",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "ID",
				Type: &shape.RefName{
					Name:          "StepID",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
			{
				Name: "VarOk",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "VarErr",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Val",
				Type: &shape.RefName{
					Name:          "Expr",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Expr",
			},
		},
	}
}

func ApplyShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Apply",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "ID",
				Type: &shape.RefName{
					Name:          "StepID",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
			{
				Name: "Name",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Args",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "Reshaper",
						PkgName:       "workflow",
						PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
					},
				},
			},
			{
				Name: "Await",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "ApplyAwaitOptions",
						PkgName:       "workflow",
						PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Expr",
			},
		},
	}
}

func ChooseShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Choose",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "ID",
				Type: &shape.RefName{
					Name:          "StepID",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
			{
				Name: "If",
				Type: &shape.RefName{
					Name:          "Predicate",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
			{
				Name: "Then",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "Expr",
						PkgName:       "workflow",
						PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
					},
				},
			},
			{
				Name: "Else",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "Expr",
						PkgName:       "workflow",
						PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Expr",
			},
		},
	}
}

//shape:shape
func StepIDShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "StepID",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		IsAlias:       true,
		Type:          &shape.PrimitiveLike{Kind: &shape.StringLike{}},
	}
}

//shape:shape

func ReshaperShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Reshaper",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Variant: []shape.Shape{
			GetValueShape(),
			SetValueShape(),
		},
	}
}

func GetValueShape() shape.Shape {
	return &shape.StructLike{
		Name:          "GetValue",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "Path",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Reshaper",
			},
		},
	}
}

func SetValueShape() shape.Shape {
	return &shape.StructLike{
		Name:          "SetValue",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "Value",
				Type: &shape.RefName{
					Name:          "Schema",
					PkgName:       "schema",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Reshaper",
			},
		},
	}
}

//shape:shape
func ApplyAwaitOptionsShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ApplyAwaitOptions",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "TimeoutSeconds",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int64{},
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}

//shape:shape

func PredicateShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Predicate",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Variant: []shape.Shape{
			AndShape(),
			OrShape(),
			NotShape(),
			CompareShape(),
		},
	}
}

func AndShape() shape.Shape {
	return &shape.StructLike{
		Name:          "And",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "L",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "Predicate",
						PkgName:       "workflow",
						PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Predicate",
			},
		},
	}
}

func OrShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Or",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "L",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "Predicate",
						PkgName:       "workflow",
						PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Predicate",
			},
		},
	}
}

func NotShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Not",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "P",
				Type: &shape.RefName{
					Name:          "Predicate",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Predicate",
			},
		},
	}
}

func CompareShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Compare",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "Operation",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Left",
				Type: &shape.RefName{
					Name:          "Reshaper",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
			{
				Name: "Right",
				Type: &shape.RefName{
					Name:          "Reshaper",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Predicate",
			},
		},
	}
}

//shape:shape

func StateShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "State",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Variant: []shape.Shape{
			NextOperationShape(),
			DoneShape(),
			ErrorShape(),
			AwaitShape(),
			ScheduledShape(),
			ScheduleStoppedShape(),
		},
	}
}

func NextOperationShape() shape.Shape {
	return &shape.StructLike{
		Name:          "NextOperation",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "Result",
				Type: &shape.RefName{
					Name:          "Schema",
					PkgName:       "schema",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema",
				},
			},
			{
				Name: "BaseState",
				Type: &shape.RefName{
					Name:          "BaseState",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "State",
			},
		},
	}
}

func DoneShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Done",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "Result",
				Type: &shape.RefName{
					Name:          "Schema",
					PkgName:       "schema",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema",
				},
			},
			{
				Name: "BaseState",
				Type: &shape.RefName{
					Name:          "BaseState",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "State",
			},
		},
	}
}

func ErrorShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Error",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "Code",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Reason",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Retried",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int64{},
					},
				},
			},
			{
				Name: "BaseState",
				Type: &shape.RefName{
					Name:          "BaseState",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "State",
			},
		},
	}
}

func AwaitShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Await",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "CallbackID",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "ExpectedTimeoutTimestamp",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int64{},
					},
				},
			},
			{
				Name: "BaseState",
				Type: &shape.RefName{
					Name:          "BaseState",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "State",
			},
		},
	}
}

func ScheduledShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Scheduled",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "ExpectedRunTimestamp",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int64{},
					},
				},
			},
			{
				Name: "BaseState",
				Type: &shape.RefName{
					Name:          "BaseState",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "State",
			},
		},
	}
}

func ScheduleStoppedShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ScheduleStopped",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "BaseState",
				Type: &shape.RefName{
					Name:          "BaseState",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "State",
			},
		},
	}
}

//shape:shape
func BaseStateShape() shape.Shape {
	return &shape.StructLike{
		Name:          "BaseState",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "Flow",
				Type: &shape.RefName{
					Name:          "Workflow",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
			{
				Name: "RunID",
				Type: &shape.RefName{
					Name:          "RunID",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
			{
				Name: "StepID",
				Type: &shape.RefName{
					Name:          "StepID",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
			{
				Name: "Variables",
				Type: &shape.MapLike{
					Key: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
					Val: &shape.RefName{
						Name:          "Schema",
						PkgName:       "schema",
						PkgImportName: "github.com/widmogrod/mkunion/x/schema",
					},
				},
			},
			{
				Name: "ExprResult",
				Type: &shape.MapLike{
					Key: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
					Val: &shape.RefName{
						Name:          "Schema",
						PkgName:       "schema",
						PkgImportName: "github.com/widmogrod/mkunion/x/schema",
					},
				},
			},
			{
				Name: "DefaultMaxRetries",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int64{},
					},
				},
			},
			{
				Name: "RunOption",
				Type: &shape.RefName{
					Name:          "RunOption",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}

//shape:shape
func ExecutionShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Execution",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "FlowID",
				Type: &shape.RefName{
					Name:          "FlowID",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
			{
				Name: "Status",
				Type: &shape.RefName{
					Name:          "State",
					PkgName:       "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
			{
				Name: "Location",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "StartTime",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int64{},
					},
				},
			},
			{
				Name: "EndTime",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int64{},
					},
				},
			},
			{
				Name: "Variables",
				Type: &shape.MapLike{
					Key: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
					Val: &shape.RefName{
						Name:          "Schema",
						PkgName:       "schema",
						PkgImportName: "github.com/widmogrod/mkunion/x/schema",
					},
				},
			},
		},
	}
}

//shape:shape
func FlowIDShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "FlowID",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		IsAlias:       true,
		Type:          &shape.PrimitiveLike{Kind: &shape.StringLike{}},
	}
}

//shape:shape
func ResumeOptionsShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ResumeOptions",
		PkgName:       "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "Timeout",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int64{},
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}
