// Code generated by mkunion. DO NOT EDIT.
package workflow

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/schema"
	"github.com/widmogrod/mkunion/x/shared"
)

var (
	_ json.Unmarshaler = (*FunctionInput)(nil)
	_ json.Marshaler   = (*FunctionInput)(nil)
)

func (r *FunctionInput) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONFunctionInput(*r)
}
func (r *FunctionInput) _marshalJSONFunctionInput(x FunctionInput) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldName []byte
	fieldName, err = r._marshalJSONstring(x.Name)
	if err != nil {
		return nil, fmt.Errorf("workflow: FunctionInput._marshalJSONFunctionInput: field name Name; %w", err)
	}
	partial["Name"] = fieldName
	var fieldCallbackID []byte
	fieldCallbackID, err = r._marshalJSONstring(x.CallbackID)
	if err != nil {
		return nil, fmt.Errorf("workflow: FunctionInput._marshalJSONFunctionInput: field name CallbackID; %w", err)
	}
	partial["CallbackID"] = fieldCallbackID
	var fieldArgs []byte
	fieldArgs, err = r._marshalJSONSliceschema_Schema(x.Args)
	if err != nil {
		return nil, fmt.Errorf("workflow: FunctionInput._marshalJSONFunctionInput: field name Args; %w", err)
	}
	partial["Args"] = fieldArgs
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: FunctionInput._marshalJSONFunctionInput: struct; %w", err)
	}
	return result, nil
}
func (r *FunctionInput) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("workflow: FunctionInput._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *FunctionInput) _marshalJSONSliceschema_Schema(x []schema.Schema) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONschema_Schema(v)
		if err != nil {
			return nil, fmt.Errorf("workflow: FunctionInput._marshalJSONSliceschema_Schema: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: FunctionInput._marshalJSONSliceschema_Schema:; %w", err)
	}
	return result, nil
}
func (r *FunctionInput) _marshalJSONschema_Schema(x schema.Schema) ([]byte, error) {
	result, err := shared.JSONMarshal[schema.Schema](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: FunctionInput._marshalJSONschema_Schema:; %w", err)
	}
	return result, nil
}
func (r *FunctionInput) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONFunctionInput(data)
	if err != nil {
		return fmt.Errorf("workflow: FunctionInput.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *FunctionInput) _unmarshalJSONFunctionInput(data []byte) (FunctionInput, error) {
	result := FunctionInput{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: FunctionInput._unmarshalJSONFunctionInput: native struct unwrap; %w", err)
	}
	if fieldName, ok := partial["Name"]; ok {
		result.Name, err = r._unmarshalJSONstring(fieldName)
		if err != nil {
			return result, fmt.Errorf("workflow: FunctionInput._unmarshalJSONFunctionInput: field Name; %w", err)
		}
	}
	if fieldCallbackID, ok := partial["CallbackID"]; ok {
		result.CallbackID, err = r._unmarshalJSONstring(fieldCallbackID)
		if err != nil {
			return result, fmt.Errorf("workflow: FunctionInput._unmarshalJSONFunctionInput: field CallbackID; %w", err)
		}
	}
	if fieldArgs, ok := partial["Args"]; ok {
		result.Args, err = r._unmarshalJSONSliceschema_Schema(fieldArgs)
		if err != nil {
			return result, fmt.Errorf("workflow: FunctionInput._unmarshalJSONFunctionInput: field Args; %w", err)
		}
	}
	return result, nil
}
func (r *FunctionInput) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("workflow: FunctionInput._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *FunctionInput) _unmarshalJSONSliceschema_Schema(data []byte) ([]schema.Schema, error) {
	result := make([]schema.Schema, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: FunctionInput._unmarshalJSONSliceschema_Schema: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONschema_Schema(v)
		if err != nil {
			return result, fmt.Errorf("workflow: FunctionInput._unmarshalJSONSliceschema_Schema: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *FunctionInput) _unmarshalJSONschema_Schema(data []byte) (schema.Schema, error) {
	result, err := shared.JSONUnmarshal[schema.Schema](data)
	if err != nil {
		return result, fmt.Errorf("workflow: FunctionInput._unmarshalJSONschema_Schema: native ref unwrap; %w", err)
	}
	return result, nil
}

var (
	_ json.Unmarshaler = (*FunctionOutput)(nil)
	_ json.Marshaler   = (*FunctionOutput)(nil)
)

func (r *FunctionOutput) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONFunctionOutput(*r)
}
func (r *FunctionOutput) _marshalJSONFunctionOutput(x FunctionOutput) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldResult []byte
	fieldResult, err = r._marshalJSONschema_Schema(x.Result)
	if err != nil {
		return nil, fmt.Errorf("workflow: FunctionOutput._marshalJSONFunctionOutput: field name Result; %w", err)
	}
	partial["Result"] = fieldResult
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: FunctionOutput._marshalJSONFunctionOutput: struct; %w", err)
	}
	return result, nil
}
func (r *FunctionOutput) _marshalJSONschema_Schema(x schema.Schema) ([]byte, error) {
	result, err := shared.JSONMarshal[schema.Schema](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: FunctionOutput._marshalJSONschema_Schema:; %w", err)
	}
	return result, nil
}
func (r *FunctionOutput) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONFunctionOutput(data)
	if err != nil {
		return fmt.Errorf("workflow: FunctionOutput.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *FunctionOutput) _unmarshalJSONFunctionOutput(data []byte) (FunctionOutput, error) {
	result := FunctionOutput{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: FunctionOutput._unmarshalJSONFunctionOutput: native struct unwrap; %w", err)
	}
	if fieldResult, ok := partial["Result"]; ok {
		result.Result, err = r._unmarshalJSONschema_Schema(fieldResult)
		if err != nil {
			return result, fmt.Errorf("workflow: FunctionOutput._unmarshalJSONFunctionOutput: field Result; %w", err)
		}
	}
	return result, nil
}
func (r *FunctionOutput) _unmarshalJSONschema_Schema(data []byte) (schema.Schema, error) {
	result, err := shared.JSONUnmarshal[schema.Schema](data)
	if err != nil {
		return result, fmt.Errorf("workflow: FunctionOutput._unmarshalJSONschema_Schema: native ref unwrap; %w", err)
	}
	return result, nil
}
