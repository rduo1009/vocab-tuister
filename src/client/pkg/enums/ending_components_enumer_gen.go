// Code generated by "enumer -type=Number,Tense,Voice,Mood,Case,Gender,Degree -transform=snake -output client/pkg/enums/ending_components_enumer_gen.go client/pkg/enums/ending_components.go"; DO NOT EDIT.

package enums

import (
	"fmt"
)

const _NumberName = "singularplural"

var _NumberIndex = [...]uint8{0, 8, 14}

func (i Number) String() string {
	if i < 0 || i >= Number(len(_NumberIndex)-1) {
		return fmt.Sprintf("Number(%d)", i)
	}
	return _NumberName[_NumberIndex[i]:_NumberIndex[i+1]]
}

var _NumberValues = []Number{0, 1}

var _NumberNameToValueMap = map[string]Number{
	_NumberName[0:8]:  0,
	_NumberName[8:14]: 1,
}

// NumberString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NumberString(s string) (Number, error) {
	if val, ok := _NumberNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Number values", s)
}

// NumberValues returns all values of the enum
func NumberValues() []Number {
	return _NumberValues
}

// IsANumber returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Number) IsANumber() bool {
	for _, v := range _NumberValues {
		if i == v {
			return true
		}
	}
	return false
}

const _TenseName = "presentimperfectfutureperfectpluperfectfuture_perfect"

var _TenseIndex = [...]uint8{0, 7, 16, 22, 29, 39, 53}

func (i Tense) String() string {
	if i < 0 || i >= Tense(len(_TenseIndex)-1) {
		return fmt.Sprintf("Tense(%d)", i)
	}
	return _TenseName[_TenseIndex[i]:_TenseIndex[i+1]]
}

var _TenseValues = []Tense{0, 1, 2, 3, 4, 5}

var _TenseNameToValueMap = map[string]Tense{
	_TenseName[0:7]:   0,
	_TenseName[7:16]:  1,
	_TenseName[16:22]: 2,
	_TenseName[22:29]: 3,
	_TenseName[29:39]: 4,
	_TenseName[39:53]: 5,
}

// TenseString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TenseString(s string) (Tense, error) {
	if val, ok := _TenseNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Tense values", s)
}

// TenseValues returns all values of the enum
func TenseValues() []Tense {
	return _TenseValues
}

// IsATense returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Tense) IsATense() bool {
	for _, v := range _TenseValues {
		if i == v {
			return true
		}
	}
	return false
}

const _VoiceName = "activepassive"

var _VoiceIndex = [...]uint8{0, 6, 13}

func (i Voice) String() string {
	if i < 0 || i >= Voice(len(_VoiceIndex)-1) {
		return fmt.Sprintf("Voice(%d)", i)
	}
	return _VoiceName[_VoiceIndex[i]:_VoiceIndex[i+1]]
}

var _VoiceValues = []Voice{0, 1}

var _VoiceNameToValueMap = map[string]Voice{
	_VoiceName[0:6]:  0,
	_VoiceName[6:13]: 1,
}

// VoiceString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VoiceString(s string) (Voice, error) {
	if val, ok := _VoiceNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Voice values", s)
}

// VoiceValues returns all values of the enum
func VoiceValues() []Voice {
	return _VoiceValues
}

// IsAVoice returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Voice) IsAVoice() bool {
	for _, v := range _VoiceValues {
		if i == v {
			return true
		}
	}
	return false
}

const _MoodName = "indicativeinfinitiveimperativesubjunctiveparticiple"

var _MoodIndex = [...]uint8{0, 10, 20, 30, 41, 51}

func (i Mood) String() string {
	if i < 0 || i >= Mood(len(_MoodIndex)-1) {
		return fmt.Sprintf("Mood(%d)", i)
	}
	return _MoodName[_MoodIndex[i]:_MoodIndex[i+1]]
}

var _MoodValues = []Mood{0, 1, 2, 3, 4}

var _MoodNameToValueMap = map[string]Mood{
	_MoodName[0:10]:  0,
	_MoodName[10:20]: 1,
	_MoodName[20:30]: 2,
	_MoodName[30:41]: 3,
	_MoodName[41:51]: 4,
}

// MoodString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MoodString(s string) (Mood, error) {
	if val, ok := _MoodNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Mood values", s)
}

// MoodValues returns all values of the enum
func MoodValues() []Mood {
	return _MoodValues
}

// IsAMood returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Mood) IsAMood() bool {
	for _, v := range _MoodValues {
		if i == v {
			return true
		}
	}
	return false
}

const _CaseName = "nominativevocativeaccusativegenitivedativeablative"

var _CaseIndex = [...]uint8{0, 10, 18, 28, 36, 42, 50}

func (i Case) String() string {
	if i < 0 || i >= Case(len(_CaseIndex)-1) {
		return fmt.Sprintf("Case(%d)", i)
	}
	return _CaseName[_CaseIndex[i]:_CaseIndex[i+1]]
}

var _CaseValues = []Case{0, 1, 2, 3, 4, 5}

var _CaseNameToValueMap = map[string]Case{
	_CaseName[0:10]:  0,
	_CaseName[10:18]: 1,
	_CaseName[18:28]: 2,
	_CaseName[28:36]: 3,
	_CaseName[36:42]: 4,
	_CaseName[42:50]: 5,
}

// CaseString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CaseString(s string) (Case, error) {
	if val, ok := _CaseNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Case values", s)
}

// CaseValues returns all values of the enum
func CaseValues() []Case {
	return _CaseValues
}

// IsACase returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Case) IsACase() bool {
	for _, v := range _CaseValues {
		if i == v {
			return true
		}
	}
	return false
}

const _GenderName = "masculinefeminineneuter"

var _GenderIndex = [...]uint8{0, 9, 17, 23}

func (i Gender) String() string {
	if i < 0 || i >= Gender(len(_GenderIndex)-1) {
		return fmt.Sprintf("Gender(%d)", i)
	}
	return _GenderName[_GenderIndex[i]:_GenderIndex[i+1]]
}

var _GenderValues = []Gender{0, 1, 2}

var _GenderNameToValueMap = map[string]Gender{
	_GenderName[0:9]:   0,
	_GenderName[9:17]:  1,
	_GenderName[17:23]: 2,
}

// GenderString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func GenderString(s string) (Gender, error) {
	if val, ok := _GenderNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Gender values", s)
}

// GenderValues returns all values of the enum
func GenderValues() []Gender {
	return _GenderValues
}

// IsAGender returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Gender) IsAGender() bool {
	for _, v := range _GenderValues {
		if i == v {
			return true
		}
	}
	return false
}

const _DegreeName = "positivecomparativesuperlative"

var _DegreeIndex = [...]uint8{0, 8, 19, 30}

func (i Degree) String() string {
	if i < 0 || i >= Degree(len(_DegreeIndex)-1) {
		return fmt.Sprintf("Degree(%d)", i)
	}
	return _DegreeName[_DegreeIndex[i]:_DegreeIndex[i+1]]
}

var _DegreeValues = []Degree{0, 1, 2}

var _DegreeNameToValueMap = map[string]Degree{
	_DegreeName[0:8]:   0,
	_DegreeName[8:19]:  1,
	_DegreeName[19:30]: 2,
}

// DegreeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DegreeString(s string) (Degree, error) {
	if val, ok := _DegreeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Degree values", s)
}

// DegreeValues returns all values of the enum
func DegreeValues() []Degree {
	return _DegreeValues
}

// IsADegree returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Degree) IsADegree() bool {
	for _, v := range _DegreeValues {
		if i == v {
			return true
		}
	}
	return false
}
