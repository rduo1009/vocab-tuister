// Code generated by mkunion. DO NOT EDIT.
package questions

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

type QuestionVisitor interface {
	VisitMultipleChoiceEngToLatQuestion(v *MultipleChoiceEngToLatQuestion) any
	VisitMultipleChoiceLatToEngQuestion(v *MultipleChoiceLatToEngQuestion) any
	VisitParseWordCompToLatQuestion(v *ParseWordCompToLatQuestion) any
	VisitParseWordLatToCompQuestion(v *ParseWordLatToCompQuestion) any
	VisitPrincipalPartsQuestion(v *PrincipalPartsQuestion) any
	VisitTypeInEngToLatQuestion(v *TypeInEngToLatQuestion) any
	VisitTypeInLatToEngQuestion(v *TypeInLatToEngQuestion) any
}

type Question interface {
	AcceptQuestion(g QuestionVisitor) any
}

var (
	_ Question = (*MultipleChoiceEngToLatQuestion)(nil)
	_ Question = (*MultipleChoiceLatToEngQuestion)(nil)
	_ Question = (*ParseWordCompToLatQuestion)(nil)
	_ Question = (*ParseWordLatToCompQuestion)(nil)
	_ Question = (*PrincipalPartsQuestion)(nil)
	_ Question = (*TypeInEngToLatQuestion)(nil)
	_ Question = (*TypeInLatToEngQuestion)(nil)
)

func (r *MultipleChoiceEngToLatQuestion) AcceptQuestion(v QuestionVisitor) any { return v.VisitMultipleChoiceEngToLatQuestion(r) }
func (r *MultipleChoiceLatToEngQuestion) AcceptQuestion(v QuestionVisitor) any { return v.VisitMultipleChoiceLatToEngQuestion(r) }
func (r *ParseWordCompToLatQuestion) AcceptQuestion(v QuestionVisitor) any { return v.VisitParseWordCompToLatQuestion(r) }
func (r *ParseWordLatToCompQuestion) AcceptQuestion(v QuestionVisitor) any { return v.VisitParseWordLatToCompQuestion(r) }
func (r *PrincipalPartsQuestion) AcceptQuestion(v QuestionVisitor) any { return v.VisitPrincipalPartsQuestion(r) }
func (r *TypeInEngToLatQuestion) AcceptQuestion(v QuestionVisitor) any { return v.VisitTypeInEngToLatQuestion(r) }
func (r *TypeInLatToEngQuestion) AcceptQuestion(v QuestionVisitor) any { return v.VisitTypeInLatToEngQuestion(r) }

func MatchQuestionR3[T0, T1, T2 any](
	x Question,
	f1 func(x *MultipleChoiceEngToLatQuestion) (T0, T1, T2),
	f2 func(x *MultipleChoiceLatToEngQuestion) (T0, T1, T2),
	f3 func(x *ParseWordCompToLatQuestion) (T0, T1, T2),
	f4 func(x *ParseWordLatToCompQuestion) (T0, T1, T2),
	f5 func(x *PrincipalPartsQuestion) (T0, T1, T2),
	f6 func(x *TypeInEngToLatQuestion) (T0, T1, T2),
	f7 func(x *TypeInLatToEngQuestion) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *MultipleChoiceEngToLatQuestion:
		return f1(v)
	case *MultipleChoiceLatToEngQuestion:
		return f2(v)
	case *ParseWordCompToLatQuestion:
		return f3(v)
	case *ParseWordLatToCompQuestion:
		return f4(v)
	case *PrincipalPartsQuestion:
		return f5(v)
	case *TypeInEngToLatQuestion:
		return f6(v)
	case *TypeInLatToEngQuestion:
		return f7(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchQuestionR2[T0, T1 any](
	x Question,
	f1 func(x *MultipleChoiceEngToLatQuestion) (T0, T1),
	f2 func(x *MultipleChoiceLatToEngQuestion) (T0, T1),
	f3 func(x *ParseWordCompToLatQuestion) (T0, T1),
	f4 func(x *ParseWordLatToCompQuestion) (T0, T1),
	f5 func(x *PrincipalPartsQuestion) (T0, T1),
	f6 func(x *TypeInEngToLatQuestion) (T0, T1),
	f7 func(x *TypeInLatToEngQuestion) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *MultipleChoiceEngToLatQuestion:
		return f1(v)
	case *MultipleChoiceLatToEngQuestion:
		return f2(v)
	case *ParseWordCompToLatQuestion:
		return f3(v)
	case *ParseWordLatToCompQuestion:
		return f4(v)
	case *PrincipalPartsQuestion:
		return f5(v)
	case *TypeInEngToLatQuestion:
		return f6(v)
	case *TypeInLatToEngQuestion:
		return f7(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchQuestionR1[T0 any](
	x Question,
	f1 func(x *MultipleChoiceEngToLatQuestion) T0,
	f2 func(x *MultipleChoiceLatToEngQuestion) T0,
	f3 func(x *ParseWordCompToLatQuestion) T0,
	f4 func(x *ParseWordLatToCompQuestion) T0,
	f5 func(x *PrincipalPartsQuestion) T0,
	f6 func(x *TypeInEngToLatQuestion) T0,
	f7 func(x *TypeInLatToEngQuestion) T0,
) T0 {
	switch v := x.(type) {
	case *MultipleChoiceEngToLatQuestion:
		return f1(v)
	case *MultipleChoiceLatToEngQuestion:
		return f2(v)
	case *ParseWordCompToLatQuestion:
		return f3(v)
	case *ParseWordLatToCompQuestion:
		return f4(v)
	case *PrincipalPartsQuestion:
		return f5(v)
	case *TypeInEngToLatQuestion:
		return f6(v)
	case *TypeInLatToEngQuestion:
		return f7(v)
	}
	var result1 T0
	return result1
}

func MatchQuestionR0(
	x Question,
	f1 func(x *MultipleChoiceEngToLatQuestion),
	f2 func(x *MultipleChoiceLatToEngQuestion),
	f3 func(x *ParseWordCompToLatQuestion),
	f4 func(x *ParseWordLatToCompQuestion),
	f5 func(x *PrincipalPartsQuestion),
	f6 func(x *TypeInEngToLatQuestion),
	f7 func(x *TypeInLatToEngQuestion),
) {
	switch v := x.(type) {
	case *MultipleChoiceEngToLatQuestion:
		f1(v)
	case *MultipleChoiceLatToEngQuestion:
		f2(v)
	case *ParseWordCompToLatQuestion:
		f3(v)
	case *ParseWordLatToCompQuestion:
		f4(v)
	case *PrincipalPartsQuestion:
		f5(v)
	case *TypeInEngToLatQuestion:
		f6(v)
	case *TypeInLatToEngQuestion:
		f7(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("MultipleChoiceEngToLatQuestion", MultipleChoiceEngToLatQuestionFromJSON, MultipleChoiceEngToLatQuestionToJSON)
	shared.JSONMarshallerRegister("MultipleChoiceLatToEngQuestion", MultipleChoiceLatToEngQuestionFromJSON, MultipleChoiceLatToEngQuestionToJSON)
	shared.JSONMarshallerRegister("ParseWordCompToLatQuestion", ParseWordCompToLatQuestionFromJSON, ParseWordCompToLatQuestionToJSON)
	shared.JSONMarshallerRegister("ParseWordLatToCompQuestion", ParseWordLatToCompQuestionFromJSON, ParseWordLatToCompQuestionToJSON)
	shared.JSONMarshallerRegister("PrincipalPartsQuestion", PrincipalPartsQuestionFromJSON, PrincipalPartsQuestionToJSON)
	shared.JSONMarshallerRegister("Question", QuestionFromJSON, QuestionToJSON)
	shared.JSONMarshallerRegister("TypeInEngToLatQuestion", TypeInEngToLatQuestionFromJSON, TypeInEngToLatQuestionToJSON)
	shared.JSONMarshallerRegister("TypeInLatToEngQuestion", TypeInLatToEngQuestionFromJSON, TypeInLatToEngQuestionToJSON)
}

type QuestionUnionJSON struct {
	Type string `json:"question_type,omitempty"`
	MultipleChoiceEngToLatQuestion json.RawMessage `json:"MultipleChoiceEngToLatQuestion,omitempty"`
	MultipleChoiceLatToEngQuestion json.RawMessage `json:"MultipleChoiceLatToEngQuestion,omitempty"`
	ParseWordCompToLatQuestion json.RawMessage `json:"ParseWordCompToLatQuestion,omitempty"`
	ParseWordLatToCompQuestion json.RawMessage `json:"ParseWordLatToCompQuestion,omitempty"`
	PrincipalPartsQuestion json.RawMessage `json:"PrincipalPartsQuestion,omitempty"`
	TypeInEngToLatQuestion json.RawMessage `json:"TypeInEngToLatQuestion,omitempty"`
	TypeInLatToEngQuestion json.RawMessage `json:"TypeInLatToEngQuestion,omitempty"`
}

func QuestionFromJSON(x []byte) (Question, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data QuestionUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("questions.QuestionFromJSON: %w", err)
	}

	switch data.Type {
	case "MultipleChoiceEngToLatQuestion":
		return MultipleChoiceEngToLatQuestionFromJSON(data.MultipleChoiceEngToLatQuestion)
	case "MultipleChoiceLatToEngQuestion":
		return MultipleChoiceLatToEngQuestionFromJSON(data.MultipleChoiceLatToEngQuestion)
	case "ParseWordCompToLatQuestion":
		return ParseWordCompToLatQuestionFromJSON(data.ParseWordCompToLatQuestion)
	case "ParseWordLatToCompQuestion":
		return ParseWordLatToCompQuestionFromJSON(data.ParseWordLatToCompQuestion)
	case "PrincipalPartsQuestion":
		return PrincipalPartsQuestionFromJSON(data.PrincipalPartsQuestion)
	case "TypeInEngToLatQuestion":
		return TypeInEngToLatQuestionFromJSON(data.TypeInEngToLatQuestion)
	case "TypeInLatToEngQuestion":
		return TypeInLatToEngQuestionFromJSON(data.TypeInLatToEngQuestion)
	}

	if data.MultipleChoiceEngToLatQuestion != nil {
		return MultipleChoiceEngToLatQuestionFromJSON(data.MultipleChoiceEngToLatQuestion)
	} else if data.MultipleChoiceLatToEngQuestion != nil {
		return MultipleChoiceLatToEngQuestionFromJSON(data.MultipleChoiceLatToEngQuestion)
	} else if data.ParseWordCompToLatQuestion != nil {
		return ParseWordCompToLatQuestionFromJSON(data.ParseWordCompToLatQuestion)
	} else if data.ParseWordLatToCompQuestion != nil {
		return ParseWordLatToCompQuestionFromJSON(data.ParseWordLatToCompQuestion)
	} else if data.PrincipalPartsQuestion != nil {
		return PrincipalPartsQuestionFromJSON(data.PrincipalPartsQuestion)
	} else if data.TypeInEngToLatQuestion != nil {
		return TypeInEngToLatQuestionFromJSON(data.TypeInEngToLatQuestion)
	} else if data.TypeInLatToEngQuestion != nil {
		return TypeInLatToEngQuestionFromJSON(data.TypeInLatToEngQuestion)
	}
	return nil, fmt.Errorf("questions.QuestionFromJSON: unknown type: %s", data.Type)
}

func QuestionToJSON(x Question) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchQuestionR2(
		x,
		func (y *MultipleChoiceEngToLatQuestion) ([]byte, error) {
			body, err := MultipleChoiceEngToLatQuestionToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("questions.QuestionToJSON: %w", err)
			}
			return json.Marshal(QuestionUnionJSON{
				Type: "MultipleChoiceEngToLatQuestion",
				MultipleChoiceEngToLatQuestion: body,
			})
		},
		func (y *MultipleChoiceLatToEngQuestion) ([]byte, error) {
			body, err := MultipleChoiceLatToEngQuestionToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("questions.QuestionToJSON: %w", err)
			}
			return json.Marshal(QuestionUnionJSON{
				Type: "MultipleChoiceLatToEngQuestion",
				MultipleChoiceLatToEngQuestion: body,
			})
		},
		func (y *ParseWordCompToLatQuestion) ([]byte, error) {
			body, err := ParseWordCompToLatQuestionToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("questions.QuestionToJSON: %w", err)
			}
			return json.Marshal(QuestionUnionJSON{
				Type: "ParseWordCompToLatQuestion",
				ParseWordCompToLatQuestion: body,
			})
		},
		func (y *ParseWordLatToCompQuestion) ([]byte, error) {
			body, err := ParseWordLatToCompQuestionToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("questions.QuestionToJSON: %w", err)
			}
			return json.Marshal(QuestionUnionJSON{
				Type: "ParseWordLatToCompQuestion",
				ParseWordLatToCompQuestion: body,
			})
		},
		func (y *PrincipalPartsQuestion) ([]byte, error) {
			body, err := PrincipalPartsQuestionToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("questions.QuestionToJSON: %w", err)
			}
			return json.Marshal(QuestionUnionJSON{
				Type: "PrincipalPartsQuestion",
				PrincipalPartsQuestion: body,
			})
		},
		func (y *TypeInEngToLatQuestion) ([]byte, error) {
			body, err := TypeInEngToLatQuestionToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("questions.QuestionToJSON: %w", err)
			}
			return json.Marshal(QuestionUnionJSON{
				Type: "TypeInEngToLatQuestion",
				TypeInEngToLatQuestion: body,
			})
		},
		func (y *TypeInLatToEngQuestion) ([]byte, error) {
			body, err := TypeInLatToEngQuestionToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("questions.QuestionToJSON: %w", err)
			}
			return json.Marshal(QuestionUnionJSON{
				Type: "TypeInLatToEngQuestion",
				TypeInLatToEngQuestion: body,
			})
		},
	)
}

func MultipleChoiceEngToLatQuestionFromJSON(x []byte) (*MultipleChoiceEngToLatQuestion, error) {
	result := new(MultipleChoiceEngToLatQuestion)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("questions.MultipleChoiceEngToLatQuestionFromJSON: %w", err)
	}
	return result, nil
}

func MultipleChoiceEngToLatQuestionToJSON(x *MultipleChoiceEngToLatQuestion) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*MultipleChoiceEngToLatQuestion)(nil)
	_ json.Marshaler   = (*MultipleChoiceEngToLatQuestion)(nil)
)

func (r *MultipleChoiceEngToLatQuestion) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONMultipleChoiceEngToLatQuestion(*r)
}
func (r *MultipleChoiceEngToLatQuestion) _marshalJSONMultipleChoiceEngToLatQuestion(x MultipleChoiceEngToLatQuestion) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldAnswer []byte
	fieldAnswer, err = r._marshalJSONstring(x.Answer)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceEngToLatQuestion._marshalJSONMultipleChoiceEngToLatQuestion: field name Answer; %w", err)
	}
	partial["answer"] = fieldAnswer
	var fieldChoices []byte
	fieldChoices, err = r._marshalJSONSlicestring(x.Choices)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceEngToLatQuestion._marshalJSONMultipleChoiceEngToLatQuestion: field name Choices; %w", err)
	}
	partial["choices"] = fieldChoices
	var fieldPrompt []byte
	fieldPrompt, err = r._marshalJSONstring(x.Prompt)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceEngToLatQuestion._marshalJSONMultipleChoiceEngToLatQuestion: field name Prompt; %w", err)
	}
	partial["prompt"] = fieldPrompt
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceEngToLatQuestion._marshalJSONMultipleChoiceEngToLatQuestion: struct; %w", err)
	}
	return result, nil
}
func (r *MultipleChoiceEngToLatQuestion) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceEngToLatQuestion._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *MultipleChoiceEngToLatQuestion) _marshalJSONSlicestring(x []string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("questions: MultipleChoiceEngToLatQuestion._marshalJSONSlicestring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceEngToLatQuestion._marshalJSONSlicestring:; %w", err)
	}
	return result, nil
}
func (r *MultipleChoiceEngToLatQuestion) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONMultipleChoiceEngToLatQuestion(data)
	if err != nil {
		return fmt.Errorf("questions: MultipleChoiceEngToLatQuestion.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *MultipleChoiceEngToLatQuestion) _unmarshalJSONMultipleChoiceEngToLatQuestion(data []byte) (MultipleChoiceEngToLatQuestion, error) {
	result := MultipleChoiceEngToLatQuestion{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: MultipleChoiceEngToLatQuestion._unmarshalJSONMultipleChoiceEngToLatQuestion: native struct unwrap; %w", err)
	}
	if fieldAnswer, ok := partial["answer"]; ok {
		result.Answer, err = r._unmarshalJSONstring(fieldAnswer)
		if err != nil {
			return result, fmt.Errorf("questions: MultipleChoiceEngToLatQuestion._unmarshalJSONMultipleChoiceEngToLatQuestion: field Answer; %w", err)
		}
	}
	if fieldChoices, ok := partial["choices"]; ok {
		result.Choices, err = r._unmarshalJSONSlicestring(fieldChoices)
		if err != nil {
			return result, fmt.Errorf("questions: MultipleChoiceEngToLatQuestion._unmarshalJSONMultipleChoiceEngToLatQuestion: field Choices; %w", err)
		}
	}
	if fieldPrompt, ok := partial["prompt"]; ok {
		result.Prompt, err = r._unmarshalJSONstring(fieldPrompt)
		if err != nil {
			return result, fmt.Errorf("questions: MultipleChoiceEngToLatQuestion._unmarshalJSONMultipleChoiceEngToLatQuestion: field Prompt; %w", err)
		}
	}
	return result, nil
}
func (r *MultipleChoiceEngToLatQuestion) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("questions: MultipleChoiceEngToLatQuestion._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *MultipleChoiceEngToLatQuestion) _unmarshalJSONSlicestring(data []byte) ([]string, error) {
	result := make([]string, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: MultipleChoiceEngToLatQuestion._unmarshalJSONSlicestring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("questions: MultipleChoiceEngToLatQuestion._unmarshalJSONSlicestring: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}

func MultipleChoiceLatToEngQuestionFromJSON(x []byte) (*MultipleChoiceLatToEngQuestion, error) {
	result := new(MultipleChoiceLatToEngQuestion)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("questions.MultipleChoiceLatToEngQuestionFromJSON: %w", err)
	}
	return result, nil
}

func MultipleChoiceLatToEngQuestionToJSON(x *MultipleChoiceLatToEngQuestion) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*MultipleChoiceLatToEngQuestion)(nil)
	_ json.Marshaler   = (*MultipleChoiceLatToEngQuestion)(nil)
)

func (r *MultipleChoiceLatToEngQuestion) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONMultipleChoiceLatToEngQuestion(*r)
}
func (r *MultipleChoiceLatToEngQuestion) _marshalJSONMultipleChoiceLatToEngQuestion(x MultipleChoiceLatToEngQuestion) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldAnswer []byte
	fieldAnswer, err = r._marshalJSONstring(x.Answer)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._marshalJSONMultipleChoiceLatToEngQuestion: field name Answer; %w", err)
	}
	partial["answer"] = fieldAnswer
	var fieldChoices []byte
	fieldChoices, err = r._marshalJSONSlicestring(x.Choices)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._marshalJSONMultipleChoiceLatToEngQuestion: field name Choices; %w", err)
	}
	partial["choices"] = fieldChoices
	var fieldPrompt []byte
	fieldPrompt, err = r._marshalJSONstring(x.Prompt)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._marshalJSONMultipleChoiceLatToEngQuestion: field name Prompt; %w", err)
	}
	partial["prompt"] = fieldPrompt
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._marshalJSONMultipleChoiceLatToEngQuestion: struct; %w", err)
	}
	return result, nil
}
func (r *MultipleChoiceLatToEngQuestion) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *MultipleChoiceLatToEngQuestion) _marshalJSONSlicestring(x []string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._marshalJSONSlicestring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._marshalJSONSlicestring:; %w", err)
	}
	return result, nil
}
func (r *MultipleChoiceLatToEngQuestion) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONMultipleChoiceLatToEngQuestion(data)
	if err != nil {
		return fmt.Errorf("questions: MultipleChoiceLatToEngQuestion.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *MultipleChoiceLatToEngQuestion) _unmarshalJSONMultipleChoiceLatToEngQuestion(data []byte) (MultipleChoiceLatToEngQuestion, error) {
	result := MultipleChoiceLatToEngQuestion{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._unmarshalJSONMultipleChoiceLatToEngQuestion: native struct unwrap; %w", err)
	}
	if fieldAnswer, ok := partial["answer"]; ok {
		result.Answer, err = r._unmarshalJSONstring(fieldAnswer)
		if err != nil {
			return result, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._unmarshalJSONMultipleChoiceLatToEngQuestion: field Answer; %w", err)
		}
	}
	if fieldChoices, ok := partial["choices"]; ok {
		result.Choices, err = r._unmarshalJSONSlicestring(fieldChoices)
		if err != nil {
			return result, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._unmarshalJSONMultipleChoiceLatToEngQuestion: field Choices; %w", err)
		}
	}
	if fieldPrompt, ok := partial["prompt"]; ok {
		result.Prompt, err = r._unmarshalJSONstring(fieldPrompt)
		if err != nil {
			return result, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._unmarshalJSONMultipleChoiceLatToEngQuestion: field Prompt; %w", err)
		}
	}
	return result, nil
}
func (r *MultipleChoiceLatToEngQuestion) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *MultipleChoiceLatToEngQuestion) _unmarshalJSONSlicestring(data []byte) ([]string, error) {
	result := make([]string, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._unmarshalJSONSlicestring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._unmarshalJSONSlicestring: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}

func ParseWordCompToLatQuestionFromJSON(x []byte) (*ParseWordCompToLatQuestion, error) {
	result := new(ParseWordCompToLatQuestion)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("questions.ParseWordCompToLatQuestionFromJSON: %w", err)
	}
	return result, nil
}

func ParseWordCompToLatQuestionToJSON(x *ParseWordCompToLatQuestion) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*ParseWordCompToLatQuestion)(nil)
	_ json.Marshaler   = (*ParseWordCompToLatQuestion)(nil)
)

func (r *ParseWordCompToLatQuestion) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONParseWordCompToLatQuestion(*r)
}
func (r *ParseWordCompToLatQuestion) _marshalJSONParseWordCompToLatQuestion(x ParseWordCompToLatQuestion) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldAnswers []byte
	fieldAnswers, err = r._marshalJSONSlicestring(x.Answers)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordCompToLatQuestion._marshalJSONParseWordCompToLatQuestion: field name Answers; %w", err)
	}
	partial["answers"] = fieldAnswers
	var fieldComponents []byte
	fieldComponents, err = r._marshalJSONstring(x.Components)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordCompToLatQuestion._marshalJSONParseWordCompToLatQuestion: field name Components; %w", err)
	}
	partial["components"] = fieldComponents
	var fieldMainAnswer []byte
	fieldMainAnswer, err = r._marshalJSONstring(x.MainAnswer)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordCompToLatQuestion._marshalJSONParseWordCompToLatQuestion: field name MainAnswer; %w", err)
	}
	partial["main_answer"] = fieldMainAnswer
	var fieldPrompt []byte
	fieldPrompt, err = r._marshalJSONstring(x.Prompt)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordCompToLatQuestion._marshalJSONParseWordCompToLatQuestion: field name Prompt; %w", err)
	}
	partial["prompt"] = fieldPrompt
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordCompToLatQuestion._marshalJSONParseWordCompToLatQuestion: struct; %w", err)
	}
	return result, nil
}
func (r *ParseWordCompToLatQuestion) _marshalJSONSlicestring(x []string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("questions: ParseWordCompToLatQuestion._marshalJSONSlicestring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordCompToLatQuestion._marshalJSONSlicestring:; %w", err)
	}
	return result, nil
}
func (r *ParseWordCompToLatQuestion) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordCompToLatQuestion._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *ParseWordCompToLatQuestion) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONParseWordCompToLatQuestion(data)
	if err != nil {
		return fmt.Errorf("questions: ParseWordCompToLatQuestion.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *ParseWordCompToLatQuestion) _unmarshalJSONParseWordCompToLatQuestion(data []byte) (ParseWordCompToLatQuestion, error) {
	result := ParseWordCompToLatQuestion{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: ParseWordCompToLatQuestion._unmarshalJSONParseWordCompToLatQuestion: native struct unwrap; %w", err)
	}
	if fieldAnswers, ok := partial["answers"]; ok {
		result.Answers, err = r._unmarshalJSONSlicestring(fieldAnswers)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordCompToLatQuestion._unmarshalJSONParseWordCompToLatQuestion: field Answers; %w", err)
		}
	}
	if fieldComponents, ok := partial["components"]; ok {
		result.Components, err = r._unmarshalJSONstring(fieldComponents)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordCompToLatQuestion._unmarshalJSONParseWordCompToLatQuestion: field Components; %w", err)
		}
	}
	if fieldMainAnswer, ok := partial["main_answer"]; ok {
		result.MainAnswer, err = r._unmarshalJSONstring(fieldMainAnswer)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordCompToLatQuestion._unmarshalJSONParseWordCompToLatQuestion: field MainAnswer; %w", err)
		}
	}
	if fieldPrompt, ok := partial["prompt"]; ok {
		result.Prompt, err = r._unmarshalJSONstring(fieldPrompt)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordCompToLatQuestion._unmarshalJSONParseWordCompToLatQuestion: field Prompt; %w", err)
		}
	}
	return result, nil
}
func (r *ParseWordCompToLatQuestion) _unmarshalJSONSlicestring(data []byte) ([]string, error) {
	result := make([]string, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: ParseWordCompToLatQuestion._unmarshalJSONSlicestring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordCompToLatQuestion._unmarshalJSONSlicestring: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *ParseWordCompToLatQuestion) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("questions: ParseWordCompToLatQuestion._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func ParseWordLatToCompQuestionFromJSON(x []byte) (*ParseWordLatToCompQuestion, error) {
	result := new(ParseWordLatToCompQuestion)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("questions.ParseWordLatToCompQuestionFromJSON: %w", err)
	}
	return result, nil
}

func ParseWordLatToCompQuestionToJSON(x *ParseWordLatToCompQuestion) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*ParseWordLatToCompQuestion)(nil)
	_ json.Marshaler   = (*ParseWordLatToCompQuestion)(nil)
)

func (r *ParseWordLatToCompQuestion) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONParseWordLatToCompQuestion(*r)
}
func (r *ParseWordLatToCompQuestion) _marshalJSONParseWordLatToCompQuestion(x ParseWordLatToCompQuestion) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldAnswers []byte
	fieldAnswers, err = r._marshalJSONSlicestring(x.Answers)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordLatToCompQuestion._marshalJSONParseWordLatToCompQuestion: field name Answers; %w", err)
	}
	partial["answers"] = fieldAnswers
	var fieldDictionaryEntry []byte
	fieldDictionaryEntry, err = r._marshalJSONstring(x.DictionaryEntry)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordLatToCompQuestion._marshalJSONParseWordLatToCompQuestion: field name DictionaryEntry; %w", err)
	}
	partial["dictionary_entry"] = fieldDictionaryEntry
	var fieldMainAnswer []byte
	fieldMainAnswer, err = r._marshalJSONstring(x.MainAnswer)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordLatToCompQuestion._marshalJSONParseWordLatToCompQuestion: field name MainAnswer; %w", err)
	}
	partial["main_answer"] = fieldMainAnswer
	var fieldPrompt []byte
	fieldPrompt, err = r._marshalJSONstring(x.Prompt)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordLatToCompQuestion._marshalJSONParseWordLatToCompQuestion: field name Prompt; %w", err)
	}
	partial["prompt"] = fieldPrompt
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordLatToCompQuestion._marshalJSONParseWordLatToCompQuestion: struct; %w", err)
	}
	return result, nil
}
func (r *ParseWordLatToCompQuestion) _marshalJSONSlicestring(x []string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("questions: ParseWordLatToCompQuestion._marshalJSONSlicestring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordLatToCompQuestion._marshalJSONSlicestring:; %w", err)
	}
	return result, nil
}
func (r *ParseWordLatToCompQuestion) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordLatToCompQuestion._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *ParseWordLatToCompQuestion) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONParseWordLatToCompQuestion(data)
	if err != nil {
		return fmt.Errorf("questions: ParseWordLatToCompQuestion.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *ParseWordLatToCompQuestion) _unmarshalJSONParseWordLatToCompQuestion(data []byte) (ParseWordLatToCompQuestion, error) {
	result := ParseWordLatToCompQuestion{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: ParseWordLatToCompQuestion._unmarshalJSONParseWordLatToCompQuestion: native struct unwrap; %w", err)
	}
	if fieldAnswers, ok := partial["answers"]; ok {
		result.Answers, err = r._unmarshalJSONSlicestring(fieldAnswers)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordLatToCompQuestion._unmarshalJSONParseWordLatToCompQuestion: field Answers; %w", err)
		}
	}
	if fieldDictionaryEntry, ok := partial["dictionary_entry"]; ok {
		result.DictionaryEntry, err = r._unmarshalJSONstring(fieldDictionaryEntry)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordLatToCompQuestion._unmarshalJSONParseWordLatToCompQuestion: field DictionaryEntry; %w", err)
		}
	}
	if fieldMainAnswer, ok := partial["main_answer"]; ok {
		result.MainAnswer, err = r._unmarshalJSONstring(fieldMainAnswer)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordLatToCompQuestion._unmarshalJSONParseWordLatToCompQuestion: field MainAnswer; %w", err)
		}
	}
	if fieldPrompt, ok := partial["prompt"]; ok {
		result.Prompt, err = r._unmarshalJSONstring(fieldPrompt)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordLatToCompQuestion._unmarshalJSONParseWordLatToCompQuestion: field Prompt; %w", err)
		}
	}
	return result, nil
}
func (r *ParseWordLatToCompQuestion) _unmarshalJSONSlicestring(data []byte) ([]string, error) {
	result := make([]string, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: ParseWordLatToCompQuestion._unmarshalJSONSlicestring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordLatToCompQuestion._unmarshalJSONSlicestring: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *ParseWordLatToCompQuestion) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("questions: ParseWordLatToCompQuestion._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func PrincipalPartsQuestionFromJSON(x []byte) (*PrincipalPartsQuestion, error) {
	result := new(PrincipalPartsQuestion)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("questions.PrincipalPartsQuestionFromJSON: %w", err)
	}
	return result, nil
}

func PrincipalPartsQuestionToJSON(x *PrincipalPartsQuestion) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*PrincipalPartsQuestion)(nil)
	_ json.Marshaler   = (*PrincipalPartsQuestion)(nil)
)

func (r *PrincipalPartsQuestion) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONPrincipalPartsQuestion(*r)
}
func (r *PrincipalPartsQuestion) _marshalJSONPrincipalPartsQuestion(x PrincipalPartsQuestion) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldPrincipalParts []byte
	fieldPrincipalParts, err = r._marshalJSONSlicestring(x.PrincipalParts)
	if err != nil {
		return nil, fmt.Errorf("questions: PrincipalPartsQuestion._marshalJSONPrincipalPartsQuestion: field name PrincipalParts; %w", err)
	}
	partial["principal_parts"] = fieldPrincipalParts
	var fieldPrompt []byte
	fieldPrompt, err = r._marshalJSONstring(x.Prompt)
	if err != nil {
		return nil, fmt.Errorf("questions: PrincipalPartsQuestion._marshalJSONPrincipalPartsQuestion: field name Prompt; %w", err)
	}
	partial["prompt"] = fieldPrompt
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: PrincipalPartsQuestion._marshalJSONPrincipalPartsQuestion: struct; %w", err)
	}
	return result, nil
}
func (r *PrincipalPartsQuestion) _marshalJSONSlicestring(x []string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("questions: PrincipalPartsQuestion._marshalJSONSlicestring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: PrincipalPartsQuestion._marshalJSONSlicestring:; %w", err)
	}
	return result, nil
}
func (r *PrincipalPartsQuestion) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("questions: PrincipalPartsQuestion._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *PrincipalPartsQuestion) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONPrincipalPartsQuestion(data)
	if err != nil {
		return fmt.Errorf("questions: PrincipalPartsQuestion.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *PrincipalPartsQuestion) _unmarshalJSONPrincipalPartsQuestion(data []byte) (PrincipalPartsQuestion, error) {
	result := PrincipalPartsQuestion{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: PrincipalPartsQuestion._unmarshalJSONPrincipalPartsQuestion: native struct unwrap; %w", err)
	}
	if fieldPrincipalParts, ok := partial["principal_parts"]; ok {
		result.PrincipalParts, err = r._unmarshalJSONSlicestring(fieldPrincipalParts)
		if err != nil {
			return result, fmt.Errorf("questions: PrincipalPartsQuestion._unmarshalJSONPrincipalPartsQuestion: field PrincipalParts; %w", err)
		}
	}
	if fieldPrompt, ok := partial["prompt"]; ok {
		result.Prompt, err = r._unmarshalJSONstring(fieldPrompt)
		if err != nil {
			return result, fmt.Errorf("questions: PrincipalPartsQuestion._unmarshalJSONPrincipalPartsQuestion: field Prompt; %w", err)
		}
	}
	return result, nil
}
func (r *PrincipalPartsQuestion) _unmarshalJSONSlicestring(data []byte) ([]string, error) {
	result := make([]string, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: PrincipalPartsQuestion._unmarshalJSONSlicestring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("questions: PrincipalPartsQuestion._unmarshalJSONSlicestring: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *PrincipalPartsQuestion) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("questions: PrincipalPartsQuestion._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func TypeInEngToLatQuestionFromJSON(x []byte) (*TypeInEngToLatQuestion, error) {
	result := new(TypeInEngToLatQuestion)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("questions.TypeInEngToLatQuestionFromJSON: %w", err)
	}
	return result, nil
}

func TypeInEngToLatQuestionToJSON(x *TypeInEngToLatQuestion) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*TypeInEngToLatQuestion)(nil)
	_ json.Marshaler   = (*TypeInEngToLatQuestion)(nil)
)

func (r *TypeInEngToLatQuestion) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONTypeInEngToLatQuestion(*r)
}
func (r *TypeInEngToLatQuestion) _marshalJSONTypeInEngToLatQuestion(x TypeInEngToLatQuestion) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldAnswers []byte
	fieldAnswers, err = r._marshalJSONSlicestring(x.Answers)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInEngToLatQuestion._marshalJSONTypeInEngToLatQuestion: field name Answers; %w", err)
	}
	partial["answers"] = fieldAnswers
	var fieldMainAnswer []byte
	fieldMainAnswer, err = r._marshalJSONstring(x.MainAnswer)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInEngToLatQuestion._marshalJSONTypeInEngToLatQuestion: field name MainAnswer; %w", err)
	}
	partial["main_answer"] = fieldMainAnswer
	var fieldPrompt []byte
	fieldPrompt, err = r._marshalJSONstring(x.Prompt)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInEngToLatQuestion._marshalJSONTypeInEngToLatQuestion: field name Prompt; %w", err)
	}
	partial["prompt"] = fieldPrompt
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInEngToLatQuestion._marshalJSONTypeInEngToLatQuestion: struct; %w", err)
	}
	return result, nil
}
func (r *TypeInEngToLatQuestion) _marshalJSONSlicestring(x []string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("questions: TypeInEngToLatQuestion._marshalJSONSlicestring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInEngToLatQuestion._marshalJSONSlicestring:; %w", err)
	}
	return result, nil
}
func (r *TypeInEngToLatQuestion) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInEngToLatQuestion._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *TypeInEngToLatQuestion) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONTypeInEngToLatQuestion(data)
	if err != nil {
		return fmt.Errorf("questions: TypeInEngToLatQuestion.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *TypeInEngToLatQuestion) _unmarshalJSONTypeInEngToLatQuestion(data []byte) (TypeInEngToLatQuestion, error) {
	result := TypeInEngToLatQuestion{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: TypeInEngToLatQuestion._unmarshalJSONTypeInEngToLatQuestion: native struct unwrap; %w", err)
	}
	if fieldAnswers, ok := partial["answers"]; ok {
		result.Answers, err = r._unmarshalJSONSlicestring(fieldAnswers)
		if err != nil {
			return result, fmt.Errorf("questions: TypeInEngToLatQuestion._unmarshalJSONTypeInEngToLatQuestion: field Answers; %w", err)
		}
	}
	if fieldMainAnswer, ok := partial["main_answer"]; ok {
		result.MainAnswer, err = r._unmarshalJSONstring(fieldMainAnswer)
		if err != nil {
			return result, fmt.Errorf("questions: TypeInEngToLatQuestion._unmarshalJSONTypeInEngToLatQuestion: field MainAnswer; %w", err)
		}
	}
	if fieldPrompt, ok := partial["prompt"]; ok {
		result.Prompt, err = r._unmarshalJSONstring(fieldPrompt)
		if err != nil {
			return result, fmt.Errorf("questions: TypeInEngToLatQuestion._unmarshalJSONTypeInEngToLatQuestion: field Prompt; %w", err)
		}
	}
	return result, nil
}
func (r *TypeInEngToLatQuestion) _unmarshalJSONSlicestring(data []byte) ([]string, error) {
	result := make([]string, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: TypeInEngToLatQuestion._unmarshalJSONSlicestring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("questions: TypeInEngToLatQuestion._unmarshalJSONSlicestring: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *TypeInEngToLatQuestion) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("questions: TypeInEngToLatQuestion._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func TypeInLatToEngQuestionFromJSON(x []byte) (*TypeInLatToEngQuestion, error) {
	result := new(TypeInLatToEngQuestion)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("questions.TypeInLatToEngQuestionFromJSON: %w", err)
	}
	return result, nil
}

func TypeInLatToEngQuestionToJSON(x *TypeInLatToEngQuestion) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*TypeInLatToEngQuestion)(nil)
	_ json.Marshaler   = (*TypeInLatToEngQuestion)(nil)
)

func (r *TypeInLatToEngQuestion) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONTypeInLatToEngQuestion(*r)
}
func (r *TypeInLatToEngQuestion) _marshalJSONTypeInLatToEngQuestion(x TypeInLatToEngQuestion) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldAnswers []byte
	fieldAnswers, err = r._marshalJSONSlicestring(x.Answers)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInLatToEngQuestion._marshalJSONTypeInLatToEngQuestion: field name Answers; %w", err)
	}
	partial["answers"] = fieldAnswers
	var fieldMainAnswer []byte
	fieldMainAnswer, err = r._marshalJSONstring(x.MainAnswer)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInLatToEngQuestion._marshalJSONTypeInLatToEngQuestion: field name MainAnswer; %w", err)
	}
	partial["main_answer"] = fieldMainAnswer
	var fieldPrompt []byte
	fieldPrompt, err = r._marshalJSONstring(x.Prompt)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInLatToEngQuestion._marshalJSONTypeInLatToEngQuestion: field name Prompt; %w", err)
	}
	partial["prompt"] = fieldPrompt
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInLatToEngQuestion._marshalJSONTypeInLatToEngQuestion: struct; %w", err)
	}
	return result, nil
}
func (r *TypeInLatToEngQuestion) _marshalJSONSlicestring(x []string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("questions: TypeInLatToEngQuestion._marshalJSONSlicestring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInLatToEngQuestion._marshalJSONSlicestring:; %w", err)
	}
	return result, nil
}
func (r *TypeInLatToEngQuestion) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInLatToEngQuestion._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *TypeInLatToEngQuestion) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONTypeInLatToEngQuestion(data)
	if err != nil {
		return fmt.Errorf("questions: TypeInLatToEngQuestion.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *TypeInLatToEngQuestion) _unmarshalJSONTypeInLatToEngQuestion(data []byte) (TypeInLatToEngQuestion, error) {
	result := TypeInLatToEngQuestion{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: TypeInLatToEngQuestion._unmarshalJSONTypeInLatToEngQuestion: native struct unwrap; %w", err)
	}
	if fieldAnswers, ok := partial["answers"]; ok {
		result.Answers, err = r._unmarshalJSONSlicestring(fieldAnswers)
		if err != nil {
			return result, fmt.Errorf("questions: TypeInLatToEngQuestion._unmarshalJSONTypeInLatToEngQuestion: field Answers; %w", err)
		}
	}
	if fieldMainAnswer, ok := partial["main_answer"]; ok {
		result.MainAnswer, err = r._unmarshalJSONstring(fieldMainAnswer)
		if err != nil {
			return result, fmt.Errorf("questions: TypeInLatToEngQuestion._unmarshalJSONTypeInLatToEngQuestion: field MainAnswer; %w", err)
		}
	}
	if fieldPrompt, ok := partial["prompt"]; ok {
		result.Prompt, err = r._unmarshalJSONstring(fieldPrompt)
		if err != nil {
			return result, fmt.Errorf("questions: TypeInLatToEngQuestion._unmarshalJSONTypeInLatToEngQuestion: field Prompt; %w", err)
		}
	}
	return result, nil
}
func (r *TypeInLatToEngQuestion) _unmarshalJSONSlicestring(data []byte) ([]string, error) {
	result := make([]string, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: TypeInLatToEngQuestion._unmarshalJSONSlicestring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("questions: TypeInLatToEngQuestion._unmarshalJSONSlicestring: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *TypeInLatToEngQuestion) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("questions: TypeInLatToEngQuestion._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

