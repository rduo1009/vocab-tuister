// Code generated by mkunion. DO NOT EDIT.
package questions

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

type QuestionVisitor interface {
	VisitMultipleChoiceEngtoLatQuestion(v *MultipleChoiceEngtoLatQuestion) any
	VisitMultipleChoiceLatToEngQuestion(v *MultipleChoiceLatToEngQuestion) any
	VisitParseWordComptoLatQuestion(v *ParseWordComptoLatQuestion) any
	VisitParseWordLattoCompQuestion(v *ParseWordLattoCompQuestion) any
	VisitPrincipalPartsQuestion(v *PrincipalPartsQuestion) any
	VisitTypeInEngtoLatQuestion(v *TypeInEngtoLatQuestion) any
	VisitTypeInLattoEngQuestion(v *TypeInLattoEngQuestion) any
}

type Question interface {
	AcceptQuestion(g QuestionVisitor) any
}

var (
	_ Question = (*MultipleChoiceEngtoLatQuestion)(nil)
	_ Question = (*MultipleChoiceLatToEngQuestion)(nil)
	_ Question = (*ParseWordComptoLatQuestion)(nil)
	_ Question = (*ParseWordLattoCompQuestion)(nil)
	_ Question = (*PrincipalPartsQuestion)(nil)
	_ Question = (*TypeInEngtoLatQuestion)(nil)
	_ Question = (*TypeInLattoEngQuestion)(nil)
)

func (r *MultipleChoiceEngtoLatQuestion) AcceptQuestion(v QuestionVisitor) any { return v.VisitMultipleChoiceEngtoLatQuestion(r) }
func (r *MultipleChoiceLatToEngQuestion) AcceptQuestion(v QuestionVisitor) any { return v.VisitMultipleChoiceLatToEngQuestion(r) }
func (r *ParseWordComptoLatQuestion) AcceptQuestion(v QuestionVisitor) any { return v.VisitParseWordComptoLatQuestion(r) }
func (r *ParseWordLattoCompQuestion) AcceptQuestion(v QuestionVisitor) any { return v.VisitParseWordLattoCompQuestion(r) }
func (r *PrincipalPartsQuestion) AcceptQuestion(v QuestionVisitor) any { return v.VisitPrincipalPartsQuestion(r) }
func (r *TypeInEngtoLatQuestion) AcceptQuestion(v QuestionVisitor) any { return v.VisitTypeInEngtoLatQuestion(r) }
func (r *TypeInLattoEngQuestion) AcceptQuestion(v QuestionVisitor) any { return v.VisitTypeInLattoEngQuestion(r) }

func MatchQuestionR3[T0, T1, T2 any](
	x Question,
	f1 func(x *MultipleChoiceEngtoLatQuestion) (T0, T1, T2),
	f2 func(x *MultipleChoiceLatToEngQuestion) (T0, T1, T2),
	f3 func(x *ParseWordComptoLatQuestion) (T0, T1, T2),
	f4 func(x *ParseWordLattoCompQuestion) (T0, T1, T2),
	f5 func(x *PrincipalPartsQuestion) (T0, T1, T2),
	f6 func(x *TypeInEngtoLatQuestion) (T0, T1, T2),
	f7 func(x *TypeInLattoEngQuestion) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *MultipleChoiceEngtoLatQuestion:
		return f1(v)
	case *MultipleChoiceLatToEngQuestion:
		return f2(v)
	case *ParseWordComptoLatQuestion:
		return f3(v)
	case *ParseWordLattoCompQuestion:
		return f4(v)
	case *PrincipalPartsQuestion:
		return f5(v)
	case *TypeInEngtoLatQuestion:
		return f6(v)
	case *TypeInLattoEngQuestion:
		return f7(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchQuestionR2[T0, T1 any](
	x Question,
	f1 func(x *MultipleChoiceEngtoLatQuestion) (T0, T1),
	f2 func(x *MultipleChoiceLatToEngQuestion) (T0, T1),
	f3 func(x *ParseWordComptoLatQuestion) (T0, T1),
	f4 func(x *ParseWordLattoCompQuestion) (T0, T1),
	f5 func(x *PrincipalPartsQuestion) (T0, T1),
	f6 func(x *TypeInEngtoLatQuestion) (T0, T1),
	f7 func(x *TypeInLattoEngQuestion) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *MultipleChoiceEngtoLatQuestion:
		return f1(v)
	case *MultipleChoiceLatToEngQuestion:
		return f2(v)
	case *ParseWordComptoLatQuestion:
		return f3(v)
	case *ParseWordLattoCompQuestion:
		return f4(v)
	case *PrincipalPartsQuestion:
		return f5(v)
	case *TypeInEngtoLatQuestion:
		return f6(v)
	case *TypeInLattoEngQuestion:
		return f7(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchQuestionR1[T0 any](
	x Question,
	f1 func(x *MultipleChoiceEngtoLatQuestion) T0,
	f2 func(x *MultipleChoiceLatToEngQuestion) T0,
	f3 func(x *ParseWordComptoLatQuestion) T0,
	f4 func(x *ParseWordLattoCompQuestion) T0,
	f5 func(x *PrincipalPartsQuestion) T0,
	f6 func(x *TypeInEngtoLatQuestion) T0,
	f7 func(x *TypeInLattoEngQuestion) T0,
) T0 {
	switch v := x.(type) {
	case *MultipleChoiceEngtoLatQuestion:
		return f1(v)
	case *MultipleChoiceLatToEngQuestion:
		return f2(v)
	case *ParseWordComptoLatQuestion:
		return f3(v)
	case *ParseWordLattoCompQuestion:
		return f4(v)
	case *PrincipalPartsQuestion:
		return f5(v)
	case *TypeInEngtoLatQuestion:
		return f6(v)
	case *TypeInLattoEngQuestion:
		return f7(v)
	}
	var result1 T0
	return result1
}

func MatchQuestionR0(
	x Question,
	f1 func(x *MultipleChoiceEngtoLatQuestion),
	f2 func(x *MultipleChoiceLatToEngQuestion),
	f3 func(x *ParseWordComptoLatQuestion),
	f4 func(x *ParseWordLattoCompQuestion),
	f5 func(x *PrincipalPartsQuestion),
	f6 func(x *TypeInEngtoLatQuestion),
	f7 func(x *TypeInLattoEngQuestion),
) {
	switch v := x.(type) {
	case *MultipleChoiceEngtoLatQuestion:
		f1(v)
	case *MultipleChoiceLatToEngQuestion:
		f2(v)
	case *ParseWordComptoLatQuestion:
		f3(v)
	case *ParseWordLattoCompQuestion:
		f4(v)
	case *PrincipalPartsQuestion:
		f5(v)
	case *TypeInEngtoLatQuestion:
		f6(v)
	case *TypeInLattoEngQuestion:
		f7(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("MultipleChoiceEngtoLatQuestion", MultipleChoiceEngtoLatQuestionFromJSON, MultipleChoiceEngtoLatQuestionToJSON)
	shared.JSONMarshallerRegister("MultipleChoiceLatToEngQuestion", MultipleChoiceLatToEngQuestionFromJSON, MultipleChoiceLatToEngQuestionToJSON)
	shared.JSONMarshallerRegister("ParseWordComptoLatQuestion", ParseWordComptoLatQuestionFromJSON, ParseWordComptoLatQuestionToJSON)
	shared.JSONMarshallerRegister("ParseWordLattoCompQuestion", ParseWordLattoCompQuestionFromJSON, ParseWordLattoCompQuestionToJSON)
	shared.JSONMarshallerRegister("PrincipalPartsQuestion", PrincipalPartsQuestionFromJSON, PrincipalPartsQuestionToJSON)
	shared.JSONMarshallerRegister("Question", QuestionFromJSON, QuestionToJSON)
	shared.JSONMarshallerRegister("TypeInEngtoLatQuestion", TypeInEngtoLatQuestionFromJSON, TypeInEngtoLatQuestionToJSON)
	shared.JSONMarshallerRegister("TypeInLattoEngQuestion", TypeInLattoEngQuestionFromJSON, TypeInLattoEngQuestionToJSON)
}

type QuestionUnionJSON struct {
	Type string `json:"question_type,omitempty"`
	MultipleChoiceEngtoLatQuestion json.RawMessage `json:"MultipleChoiceEngtoLatQuestion,omitempty"`
	MultipleChoiceLatToEngQuestion json.RawMessage `json:"MultipleChoiceLatToEngQuestion,omitempty"`
	ParseWordComptoLatQuestion json.RawMessage `json:"ParseWordComptoLatQuestion,omitempty"`
	ParseWordLattoCompQuestion json.RawMessage `json:"ParseWordLattoCompQuestion,omitempty"`
	PrincipalPartsQuestion json.RawMessage `json:"PrincipalPartsQuestion,omitempty"`
	TypeInEngtoLatQuestion json.RawMessage `json:"TypeInEngtoLatQuestion,omitempty"`
	TypeInLattoEngQuestion json.RawMessage `json:"TypeInLattoEngQuestion,omitempty"`
}

func QuestionFromJSON(x []byte) (Question, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data QuestionUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("questions.QuestionFromJSON: %w", err)
	}

	switch data.Type {
	case "MultipleChoiceEngtoLatQuestion":
		return MultipleChoiceEngtoLatQuestionFromJSON(data.MultipleChoiceEngtoLatQuestion)
	case "MultipleChoiceLatToEngQuestion":
		return MultipleChoiceLatToEngQuestionFromJSON(data.MultipleChoiceLatToEngQuestion)
	case "ParseWordComptoLatQuestion":
		return ParseWordComptoLatQuestionFromJSON(data.ParseWordComptoLatQuestion)
	case "ParseWordLattoCompQuestion":
		return ParseWordLattoCompQuestionFromJSON(data.ParseWordLattoCompQuestion)
	case "PrincipalPartsQuestion":
		return PrincipalPartsQuestionFromJSON(data.PrincipalPartsQuestion)
	case "TypeInEngtoLatQuestion":
		return TypeInEngtoLatQuestionFromJSON(data.TypeInEngtoLatQuestion)
	case "TypeInLattoEngQuestion":
		return TypeInLattoEngQuestionFromJSON(data.TypeInLattoEngQuestion)
	}

	if data.MultipleChoiceEngtoLatQuestion != nil {
		return MultipleChoiceEngtoLatQuestionFromJSON(data.MultipleChoiceEngtoLatQuestion)
	} else if data.MultipleChoiceLatToEngQuestion != nil {
		return MultipleChoiceLatToEngQuestionFromJSON(data.MultipleChoiceLatToEngQuestion)
	} else if data.ParseWordComptoLatQuestion != nil {
		return ParseWordComptoLatQuestionFromJSON(data.ParseWordComptoLatQuestion)
	} else if data.ParseWordLattoCompQuestion != nil {
		return ParseWordLattoCompQuestionFromJSON(data.ParseWordLattoCompQuestion)
	} else if data.PrincipalPartsQuestion != nil {
		return PrincipalPartsQuestionFromJSON(data.PrincipalPartsQuestion)
	} else if data.TypeInEngtoLatQuestion != nil {
		return TypeInEngtoLatQuestionFromJSON(data.TypeInEngtoLatQuestion)
	} else if data.TypeInLattoEngQuestion != nil {
		return TypeInLattoEngQuestionFromJSON(data.TypeInLattoEngQuestion)
	}
	return nil, fmt.Errorf("questions.QuestionFromJSON: unknown type: %s", data.Type)
}

func QuestionToJSON(x Question) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchQuestionR2(
		x,
		func (y *MultipleChoiceEngtoLatQuestion) ([]byte, error) {
			body, err := MultipleChoiceEngtoLatQuestionToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("questions.QuestionToJSON: %w", err)
			}
			return json.Marshal(QuestionUnionJSON{
				Type: "MultipleChoiceEngtoLatQuestion",
				MultipleChoiceEngtoLatQuestion: body,
			})
		},
		func (y *MultipleChoiceLatToEngQuestion) ([]byte, error) {
			body, err := MultipleChoiceLatToEngQuestionToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("questions.QuestionToJSON: %w", err)
			}
			return json.Marshal(QuestionUnionJSON{
				Type: "MultipleChoiceLatToEngQuestion",
				MultipleChoiceLatToEngQuestion: body,
			})
		},
		func (y *ParseWordComptoLatQuestion) ([]byte, error) {
			body, err := ParseWordComptoLatQuestionToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("questions.QuestionToJSON: %w", err)
			}
			return json.Marshal(QuestionUnionJSON{
				Type: "ParseWordComptoLatQuestion",
				ParseWordComptoLatQuestion: body,
			})
		},
		func (y *ParseWordLattoCompQuestion) ([]byte, error) {
			body, err := ParseWordLattoCompQuestionToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("questions.QuestionToJSON: %w", err)
			}
			return json.Marshal(QuestionUnionJSON{
				Type: "ParseWordLattoCompQuestion",
				ParseWordLattoCompQuestion: body,
			})
		},
		func (y *PrincipalPartsQuestion) ([]byte, error) {
			body, err := PrincipalPartsQuestionToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("questions.QuestionToJSON: %w", err)
			}
			return json.Marshal(QuestionUnionJSON{
				Type: "PrincipalPartsQuestion",
				PrincipalPartsQuestion: body,
			})
		},
		func (y *TypeInEngtoLatQuestion) ([]byte, error) {
			body, err := TypeInEngtoLatQuestionToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("questions.QuestionToJSON: %w", err)
			}
			return json.Marshal(QuestionUnionJSON{
				Type: "TypeInEngtoLatQuestion",
				TypeInEngtoLatQuestion: body,
			})
		},
		func (y *TypeInLattoEngQuestion) ([]byte, error) {
			body, err := TypeInLattoEngQuestionToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("questions.QuestionToJSON: %w", err)
			}
			return json.Marshal(QuestionUnionJSON{
				Type: "TypeInLattoEngQuestion",
				TypeInLattoEngQuestion: body,
			})
		},
	)
}

func MultipleChoiceEngtoLatQuestionFromJSON(x []byte) (*MultipleChoiceEngtoLatQuestion, error) {
	result := new(MultipleChoiceEngtoLatQuestion)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("questions.MultipleChoiceEngtoLatQuestionFromJSON: %w", err)
	}
	return result, nil
}

func MultipleChoiceEngtoLatQuestionToJSON(x *MultipleChoiceEngtoLatQuestion) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*MultipleChoiceEngtoLatQuestion)(nil)
	_ json.Marshaler   = (*MultipleChoiceEngtoLatQuestion)(nil)
)

func (r *MultipleChoiceEngtoLatQuestion) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONMultipleChoiceEngtoLatQuestion(*r)
}
func (r *MultipleChoiceEngtoLatQuestion) _marshalJSONMultipleChoiceEngtoLatQuestion(x MultipleChoiceEngtoLatQuestion) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldAnswer []byte
	fieldAnswer, err = r._marshalJSONstring(x.Answer)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceEngtoLatQuestion._marshalJSONMultipleChoiceEngtoLatQuestion: field name Answer; %w", err)
	}
	partial["answer"] = fieldAnswer
	var fieldChoices []byte
	fieldChoices, err = r._marshalJSONSlicestring(x.Choices)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceEngtoLatQuestion._marshalJSONMultipleChoiceEngtoLatQuestion: field name Choices; %w", err)
	}
	partial["choices"] = fieldChoices
	var fieldPrompt []byte
	fieldPrompt, err = r._marshalJSONstring(x.Prompt)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceEngtoLatQuestion._marshalJSONMultipleChoiceEngtoLatQuestion: field name Prompt; %w", err)
	}
	partial["prompt"] = fieldPrompt
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceEngtoLatQuestion._marshalJSONMultipleChoiceEngtoLatQuestion: struct; %w", err)
	}
	return result, nil
}
func (r *MultipleChoiceEngtoLatQuestion) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceEngtoLatQuestion._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *MultipleChoiceEngtoLatQuestion) _marshalJSONSlicestring(x []string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("questions: MultipleChoiceEngtoLatQuestion._marshalJSONSlicestring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceEngtoLatQuestion._marshalJSONSlicestring:; %w", err)
	}
	return result, nil
}
func (r *MultipleChoiceEngtoLatQuestion) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONMultipleChoiceEngtoLatQuestion(data)
	if err != nil {
		return fmt.Errorf("questions: MultipleChoiceEngtoLatQuestion.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *MultipleChoiceEngtoLatQuestion) _unmarshalJSONMultipleChoiceEngtoLatQuestion(data []byte) (MultipleChoiceEngtoLatQuestion, error) {
	result := MultipleChoiceEngtoLatQuestion{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: MultipleChoiceEngtoLatQuestion._unmarshalJSONMultipleChoiceEngtoLatQuestion: native struct unwrap; %w", err)
	}
	if fieldAnswer, ok := partial["answer"]; ok {
		result.Answer, err = r._unmarshalJSONstring(fieldAnswer)
		if err != nil {
			return result, fmt.Errorf("questions: MultipleChoiceEngtoLatQuestion._unmarshalJSONMultipleChoiceEngtoLatQuestion: field Answer; %w", err)
		}
	}
	if fieldChoices, ok := partial["choices"]; ok {
		result.Choices, err = r._unmarshalJSONSlicestring(fieldChoices)
		if err != nil {
			return result, fmt.Errorf("questions: MultipleChoiceEngtoLatQuestion._unmarshalJSONMultipleChoiceEngtoLatQuestion: field Choices; %w", err)
		}
	}
	if fieldPrompt, ok := partial["prompt"]; ok {
		result.Prompt, err = r._unmarshalJSONstring(fieldPrompt)
		if err != nil {
			return result, fmt.Errorf("questions: MultipleChoiceEngtoLatQuestion._unmarshalJSONMultipleChoiceEngtoLatQuestion: field Prompt; %w", err)
		}
	}
	return result, nil
}
func (r *MultipleChoiceEngtoLatQuestion) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("questions: MultipleChoiceEngtoLatQuestion._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *MultipleChoiceEngtoLatQuestion) _unmarshalJSONSlicestring(data []byte) ([]string, error) {
	result := make([]string, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: MultipleChoiceEngtoLatQuestion._unmarshalJSONSlicestring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("questions: MultipleChoiceEngtoLatQuestion._unmarshalJSONSlicestring: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}

func MultipleChoiceLatToEngQuestionFromJSON(x []byte) (*MultipleChoiceLatToEngQuestion, error) {
	result := new(MultipleChoiceLatToEngQuestion)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("questions.MultipleChoiceLatToEngQuestionFromJSON: %w", err)
	}
	return result, nil
}

func MultipleChoiceLatToEngQuestionToJSON(x *MultipleChoiceLatToEngQuestion) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*MultipleChoiceLatToEngQuestion)(nil)
	_ json.Marshaler   = (*MultipleChoiceLatToEngQuestion)(nil)
)

func (r *MultipleChoiceLatToEngQuestion) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONMultipleChoiceLatToEngQuestion(*r)
}
func (r *MultipleChoiceLatToEngQuestion) _marshalJSONMultipleChoiceLatToEngQuestion(x MultipleChoiceLatToEngQuestion) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldAnswer []byte
	fieldAnswer, err = r._marshalJSONstring(x.Answer)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._marshalJSONMultipleChoiceLatToEngQuestion: field name Answer; %w", err)
	}
	partial["answer"] = fieldAnswer
	var fieldChoices []byte
	fieldChoices, err = r._marshalJSONSlicestring(x.Choices)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._marshalJSONMultipleChoiceLatToEngQuestion: field name Choices; %w", err)
	}
	partial["choices"] = fieldChoices
	var fieldPrompt []byte
	fieldPrompt, err = r._marshalJSONstring(x.Prompt)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._marshalJSONMultipleChoiceLatToEngQuestion: field name Prompt; %w", err)
	}
	partial["prompt"] = fieldPrompt
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._marshalJSONMultipleChoiceLatToEngQuestion: struct; %w", err)
	}
	return result, nil
}
func (r *MultipleChoiceLatToEngQuestion) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *MultipleChoiceLatToEngQuestion) _marshalJSONSlicestring(x []string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._marshalJSONSlicestring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._marshalJSONSlicestring:; %w", err)
	}
	return result, nil
}
func (r *MultipleChoiceLatToEngQuestion) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONMultipleChoiceLatToEngQuestion(data)
	if err != nil {
		return fmt.Errorf("questions: MultipleChoiceLatToEngQuestion.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *MultipleChoiceLatToEngQuestion) _unmarshalJSONMultipleChoiceLatToEngQuestion(data []byte) (MultipleChoiceLatToEngQuestion, error) {
	result := MultipleChoiceLatToEngQuestion{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._unmarshalJSONMultipleChoiceLatToEngQuestion: native struct unwrap; %w", err)
	}
	if fieldAnswer, ok := partial["answer"]; ok {
		result.Answer, err = r._unmarshalJSONstring(fieldAnswer)
		if err != nil {
			return result, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._unmarshalJSONMultipleChoiceLatToEngQuestion: field Answer; %w", err)
		}
	}
	if fieldChoices, ok := partial["choices"]; ok {
		result.Choices, err = r._unmarshalJSONSlicestring(fieldChoices)
		if err != nil {
			return result, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._unmarshalJSONMultipleChoiceLatToEngQuestion: field Choices; %w", err)
		}
	}
	if fieldPrompt, ok := partial["prompt"]; ok {
		result.Prompt, err = r._unmarshalJSONstring(fieldPrompt)
		if err != nil {
			return result, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._unmarshalJSONMultipleChoiceLatToEngQuestion: field Prompt; %w", err)
		}
	}
	return result, nil
}
func (r *MultipleChoiceLatToEngQuestion) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *MultipleChoiceLatToEngQuestion) _unmarshalJSONSlicestring(data []byte) ([]string, error) {
	result := make([]string, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._unmarshalJSONSlicestring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("questions: MultipleChoiceLatToEngQuestion._unmarshalJSONSlicestring: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}

func ParseWordComptoLatQuestionFromJSON(x []byte) (*ParseWordComptoLatQuestion, error) {
	result := new(ParseWordComptoLatQuestion)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("questions.ParseWordComptoLatQuestionFromJSON: %w", err)
	}
	return result, nil
}

func ParseWordComptoLatQuestionToJSON(x *ParseWordComptoLatQuestion) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*ParseWordComptoLatQuestion)(nil)
	_ json.Marshaler   = (*ParseWordComptoLatQuestion)(nil)
)

func (r *ParseWordComptoLatQuestion) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONParseWordComptoLatQuestion(*r)
}
func (r *ParseWordComptoLatQuestion) _marshalJSONParseWordComptoLatQuestion(x ParseWordComptoLatQuestion) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldAnswers []byte
	fieldAnswers, err = r._marshalJSONSlicestring(x.Answers)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordComptoLatQuestion._marshalJSONParseWordComptoLatQuestion: field name Answers; %w", err)
	}
	partial["answers"] = fieldAnswers
	var fieldComponents []byte
	fieldComponents, err = r._marshalJSONstring(x.Components)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordComptoLatQuestion._marshalJSONParseWordComptoLatQuestion: field name Components; %w", err)
	}
	partial["components"] = fieldComponents
	var fieldMainAnswer []byte
	fieldMainAnswer, err = r._marshalJSONstring(x.MainAnswer)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordComptoLatQuestion._marshalJSONParseWordComptoLatQuestion: field name MainAnswer; %w", err)
	}
	partial["main_answer"] = fieldMainAnswer
	var fieldPrompt []byte
	fieldPrompt, err = r._marshalJSONstring(x.Prompt)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordComptoLatQuestion._marshalJSONParseWordComptoLatQuestion: field name Prompt; %w", err)
	}
	partial["prompt"] = fieldPrompt
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordComptoLatQuestion._marshalJSONParseWordComptoLatQuestion: struct; %w", err)
	}
	return result, nil
}
func (r *ParseWordComptoLatQuestion) _marshalJSONSlicestring(x []string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("questions: ParseWordComptoLatQuestion._marshalJSONSlicestring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordComptoLatQuestion._marshalJSONSlicestring:; %w", err)
	}
	return result, nil
}
func (r *ParseWordComptoLatQuestion) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordComptoLatQuestion._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *ParseWordComptoLatQuestion) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONParseWordComptoLatQuestion(data)
	if err != nil {
		return fmt.Errorf("questions: ParseWordComptoLatQuestion.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *ParseWordComptoLatQuestion) _unmarshalJSONParseWordComptoLatQuestion(data []byte) (ParseWordComptoLatQuestion, error) {
	result := ParseWordComptoLatQuestion{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: ParseWordComptoLatQuestion._unmarshalJSONParseWordComptoLatQuestion: native struct unwrap; %w", err)
	}
	if fieldAnswers, ok := partial["answers"]; ok {
		result.Answers, err = r._unmarshalJSONSlicestring(fieldAnswers)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordComptoLatQuestion._unmarshalJSONParseWordComptoLatQuestion: field Answers; %w", err)
		}
	}
	if fieldComponents, ok := partial["components"]; ok {
		result.Components, err = r._unmarshalJSONstring(fieldComponents)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordComptoLatQuestion._unmarshalJSONParseWordComptoLatQuestion: field Components; %w", err)
		}
	}
	if fieldMainAnswer, ok := partial["main_answer"]; ok {
		result.MainAnswer, err = r._unmarshalJSONstring(fieldMainAnswer)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordComptoLatQuestion._unmarshalJSONParseWordComptoLatQuestion: field MainAnswer; %w", err)
		}
	}
	if fieldPrompt, ok := partial["prompt"]; ok {
		result.Prompt, err = r._unmarshalJSONstring(fieldPrompt)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordComptoLatQuestion._unmarshalJSONParseWordComptoLatQuestion: field Prompt; %w", err)
		}
	}
	return result, nil
}
func (r *ParseWordComptoLatQuestion) _unmarshalJSONSlicestring(data []byte) ([]string, error) {
	result := make([]string, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: ParseWordComptoLatQuestion._unmarshalJSONSlicestring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordComptoLatQuestion._unmarshalJSONSlicestring: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *ParseWordComptoLatQuestion) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("questions: ParseWordComptoLatQuestion._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func ParseWordLattoCompQuestionFromJSON(x []byte) (*ParseWordLattoCompQuestion, error) {
	result := new(ParseWordLattoCompQuestion)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("questions.ParseWordLattoCompQuestionFromJSON: %w", err)
	}
	return result, nil
}

func ParseWordLattoCompQuestionToJSON(x *ParseWordLattoCompQuestion) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*ParseWordLattoCompQuestion)(nil)
	_ json.Marshaler   = (*ParseWordLattoCompQuestion)(nil)
)

func (r *ParseWordLattoCompQuestion) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONParseWordLattoCompQuestion(*r)
}
func (r *ParseWordLattoCompQuestion) _marshalJSONParseWordLattoCompQuestion(x ParseWordLattoCompQuestion) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldAnswers []byte
	fieldAnswers, err = r._marshalJSONSlicestring(x.Answers)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordLattoCompQuestion._marshalJSONParseWordLattoCompQuestion: field name Answers; %w", err)
	}
	partial["answers"] = fieldAnswers
	var fieldDictionaryEntry []byte
	fieldDictionaryEntry, err = r._marshalJSONstring(x.DictionaryEntry)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordLattoCompQuestion._marshalJSONParseWordLattoCompQuestion: field name DictionaryEntry; %w", err)
	}
	partial["dictionary_entry"] = fieldDictionaryEntry
	var fieldMainAnswer []byte
	fieldMainAnswer, err = r._marshalJSONstring(x.MainAnswer)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordLattoCompQuestion._marshalJSONParseWordLattoCompQuestion: field name MainAnswer; %w", err)
	}
	partial["main_answer"] = fieldMainAnswer
	var fieldPrompt []byte
	fieldPrompt, err = r._marshalJSONstring(x.Prompt)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordLattoCompQuestion._marshalJSONParseWordLattoCompQuestion: field name Prompt; %w", err)
	}
	partial["prompt"] = fieldPrompt
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordLattoCompQuestion._marshalJSONParseWordLattoCompQuestion: struct; %w", err)
	}
	return result, nil
}
func (r *ParseWordLattoCompQuestion) _marshalJSONSlicestring(x []string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("questions: ParseWordLattoCompQuestion._marshalJSONSlicestring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordLattoCompQuestion._marshalJSONSlicestring:; %w", err)
	}
	return result, nil
}
func (r *ParseWordLattoCompQuestion) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("questions: ParseWordLattoCompQuestion._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *ParseWordLattoCompQuestion) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONParseWordLattoCompQuestion(data)
	if err != nil {
		return fmt.Errorf("questions: ParseWordLattoCompQuestion.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *ParseWordLattoCompQuestion) _unmarshalJSONParseWordLattoCompQuestion(data []byte) (ParseWordLattoCompQuestion, error) {
	result := ParseWordLattoCompQuestion{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: ParseWordLattoCompQuestion._unmarshalJSONParseWordLattoCompQuestion: native struct unwrap; %w", err)
	}
	if fieldAnswers, ok := partial["answers"]; ok {
		result.Answers, err = r._unmarshalJSONSlicestring(fieldAnswers)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordLattoCompQuestion._unmarshalJSONParseWordLattoCompQuestion: field Answers; %w", err)
		}
	}
	if fieldDictionaryEntry, ok := partial["dictionary_entry"]; ok {
		result.DictionaryEntry, err = r._unmarshalJSONstring(fieldDictionaryEntry)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordLattoCompQuestion._unmarshalJSONParseWordLattoCompQuestion: field DictionaryEntry; %w", err)
		}
	}
	if fieldMainAnswer, ok := partial["main_answer"]; ok {
		result.MainAnswer, err = r._unmarshalJSONstring(fieldMainAnswer)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordLattoCompQuestion._unmarshalJSONParseWordLattoCompQuestion: field MainAnswer; %w", err)
		}
	}
	if fieldPrompt, ok := partial["prompt"]; ok {
		result.Prompt, err = r._unmarshalJSONstring(fieldPrompt)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordLattoCompQuestion._unmarshalJSONParseWordLattoCompQuestion: field Prompt; %w", err)
		}
	}
	return result, nil
}
func (r *ParseWordLattoCompQuestion) _unmarshalJSONSlicestring(data []byte) ([]string, error) {
	result := make([]string, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: ParseWordLattoCompQuestion._unmarshalJSONSlicestring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("questions: ParseWordLattoCompQuestion._unmarshalJSONSlicestring: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *ParseWordLattoCompQuestion) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("questions: ParseWordLattoCompQuestion._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func PrincipalPartsQuestionFromJSON(x []byte) (*PrincipalPartsQuestion, error) {
	result := new(PrincipalPartsQuestion)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("questions.PrincipalPartsQuestionFromJSON: %w", err)
	}
	return result, nil
}

func PrincipalPartsQuestionToJSON(x *PrincipalPartsQuestion) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*PrincipalPartsQuestion)(nil)
	_ json.Marshaler   = (*PrincipalPartsQuestion)(nil)
)

func (r *PrincipalPartsQuestion) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONPrincipalPartsQuestion(*r)
}
func (r *PrincipalPartsQuestion) _marshalJSONPrincipalPartsQuestion(x PrincipalPartsQuestion) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldPrincipalParts []byte
	fieldPrincipalParts, err = r._marshalJSONSlicestring(x.PrincipalParts)
	if err != nil {
		return nil, fmt.Errorf("questions: PrincipalPartsQuestion._marshalJSONPrincipalPartsQuestion: field name PrincipalParts; %w", err)
	}
	partial["principal_parts"] = fieldPrincipalParts
	var fieldPrompt []byte
	fieldPrompt, err = r._marshalJSONstring(x.Prompt)
	if err != nil {
		return nil, fmt.Errorf("questions: PrincipalPartsQuestion._marshalJSONPrincipalPartsQuestion: field name Prompt; %w", err)
	}
	partial["prompt"] = fieldPrompt
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: PrincipalPartsQuestion._marshalJSONPrincipalPartsQuestion: struct; %w", err)
	}
	return result, nil
}
func (r *PrincipalPartsQuestion) _marshalJSONSlicestring(x []string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("questions: PrincipalPartsQuestion._marshalJSONSlicestring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: PrincipalPartsQuestion._marshalJSONSlicestring:; %w", err)
	}
	return result, nil
}
func (r *PrincipalPartsQuestion) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("questions: PrincipalPartsQuestion._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *PrincipalPartsQuestion) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONPrincipalPartsQuestion(data)
	if err != nil {
		return fmt.Errorf("questions: PrincipalPartsQuestion.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *PrincipalPartsQuestion) _unmarshalJSONPrincipalPartsQuestion(data []byte) (PrincipalPartsQuestion, error) {
	result := PrincipalPartsQuestion{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: PrincipalPartsQuestion._unmarshalJSONPrincipalPartsQuestion: native struct unwrap; %w", err)
	}
	if fieldPrincipalParts, ok := partial["principal_parts"]; ok {
		result.PrincipalParts, err = r._unmarshalJSONSlicestring(fieldPrincipalParts)
		if err != nil {
			return result, fmt.Errorf("questions: PrincipalPartsQuestion._unmarshalJSONPrincipalPartsQuestion: field PrincipalParts; %w", err)
		}
	}
	if fieldPrompt, ok := partial["prompt"]; ok {
		result.Prompt, err = r._unmarshalJSONstring(fieldPrompt)
		if err != nil {
			return result, fmt.Errorf("questions: PrincipalPartsQuestion._unmarshalJSONPrincipalPartsQuestion: field Prompt; %w", err)
		}
	}
	return result, nil
}
func (r *PrincipalPartsQuestion) _unmarshalJSONSlicestring(data []byte) ([]string, error) {
	result := make([]string, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: PrincipalPartsQuestion._unmarshalJSONSlicestring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("questions: PrincipalPartsQuestion._unmarshalJSONSlicestring: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *PrincipalPartsQuestion) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("questions: PrincipalPartsQuestion._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func TypeInEngtoLatQuestionFromJSON(x []byte) (*TypeInEngtoLatQuestion, error) {
	result := new(TypeInEngtoLatQuestion)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("questions.TypeInEngtoLatQuestionFromJSON: %w", err)
	}
	return result, nil
}

func TypeInEngtoLatQuestionToJSON(x *TypeInEngtoLatQuestion) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*TypeInEngtoLatQuestion)(nil)
	_ json.Marshaler   = (*TypeInEngtoLatQuestion)(nil)
)

func (r *TypeInEngtoLatQuestion) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONTypeInEngtoLatQuestion(*r)
}
func (r *TypeInEngtoLatQuestion) _marshalJSONTypeInEngtoLatQuestion(x TypeInEngtoLatQuestion) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldAnswers []byte
	fieldAnswers, err = r._marshalJSONSlicestring(x.Answers)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInEngtoLatQuestion._marshalJSONTypeInEngtoLatQuestion: field name Answers; %w", err)
	}
	partial["answers"] = fieldAnswers
	var fieldMainAnswer []byte
	fieldMainAnswer, err = r._marshalJSONstring(x.MainAnswer)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInEngtoLatQuestion._marshalJSONTypeInEngtoLatQuestion: field name MainAnswer; %w", err)
	}
	partial["main_answer"] = fieldMainAnswer
	var fieldPrompt []byte
	fieldPrompt, err = r._marshalJSONstring(x.Prompt)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInEngtoLatQuestion._marshalJSONTypeInEngtoLatQuestion: field name Prompt; %w", err)
	}
	partial["prompt"] = fieldPrompt
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInEngtoLatQuestion._marshalJSONTypeInEngtoLatQuestion: struct; %w", err)
	}
	return result, nil
}
func (r *TypeInEngtoLatQuestion) _marshalJSONSlicestring(x []string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("questions: TypeInEngtoLatQuestion._marshalJSONSlicestring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInEngtoLatQuestion._marshalJSONSlicestring:; %w", err)
	}
	return result, nil
}
func (r *TypeInEngtoLatQuestion) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInEngtoLatQuestion._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *TypeInEngtoLatQuestion) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONTypeInEngtoLatQuestion(data)
	if err != nil {
		return fmt.Errorf("questions: TypeInEngtoLatQuestion.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *TypeInEngtoLatQuestion) _unmarshalJSONTypeInEngtoLatQuestion(data []byte) (TypeInEngtoLatQuestion, error) {
	result := TypeInEngtoLatQuestion{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: TypeInEngtoLatQuestion._unmarshalJSONTypeInEngtoLatQuestion: native struct unwrap; %w", err)
	}
	if fieldAnswers, ok := partial["answers"]; ok {
		result.Answers, err = r._unmarshalJSONSlicestring(fieldAnswers)
		if err != nil {
			return result, fmt.Errorf("questions: TypeInEngtoLatQuestion._unmarshalJSONTypeInEngtoLatQuestion: field Answers; %w", err)
		}
	}
	if fieldMainAnswer, ok := partial["main_answer"]; ok {
		result.MainAnswer, err = r._unmarshalJSONstring(fieldMainAnswer)
		if err != nil {
			return result, fmt.Errorf("questions: TypeInEngtoLatQuestion._unmarshalJSONTypeInEngtoLatQuestion: field MainAnswer; %w", err)
		}
	}
	if fieldPrompt, ok := partial["prompt"]; ok {
		result.Prompt, err = r._unmarshalJSONstring(fieldPrompt)
		if err != nil {
			return result, fmt.Errorf("questions: TypeInEngtoLatQuestion._unmarshalJSONTypeInEngtoLatQuestion: field Prompt; %w", err)
		}
	}
	return result, nil
}
func (r *TypeInEngtoLatQuestion) _unmarshalJSONSlicestring(data []byte) ([]string, error) {
	result := make([]string, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: TypeInEngtoLatQuestion._unmarshalJSONSlicestring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("questions: TypeInEngtoLatQuestion._unmarshalJSONSlicestring: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *TypeInEngtoLatQuestion) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("questions: TypeInEngtoLatQuestion._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func TypeInLattoEngQuestionFromJSON(x []byte) (*TypeInLattoEngQuestion, error) {
	result := new(TypeInLattoEngQuestion)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("questions.TypeInLattoEngQuestionFromJSON: %w", err)
	}
	return result, nil
}

func TypeInLattoEngQuestionToJSON(x *TypeInLattoEngQuestion) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*TypeInLattoEngQuestion)(nil)
	_ json.Marshaler   = (*TypeInLattoEngQuestion)(nil)
)

func (r *TypeInLattoEngQuestion) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONTypeInLattoEngQuestion(*r)
}
func (r *TypeInLattoEngQuestion) _marshalJSONTypeInLattoEngQuestion(x TypeInLattoEngQuestion) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldAnswers []byte
	fieldAnswers, err = r._marshalJSONSlicestring(x.Answers)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInLattoEngQuestion._marshalJSONTypeInLattoEngQuestion: field name Answers; %w", err)
	}
	partial["answers"] = fieldAnswers
	var fieldMainAnswer []byte
	fieldMainAnswer, err = r._marshalJSONstring(x.MainAnswer)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInLattoEngQuestion._marshalJSONTypeInLattoEngQuestion: field name MainAnswer; %w", err)
	}
	partial["main_answer"] = fieldMainAnswer
	var fieldPrompt []byte
	fieldPrompt, err = r._marshalJSONstring(x.Prompt)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInLattoEngQuestion._marshalJSONTypeInLattoEngQuestion: field name Prompt; %w", err)
	}
	partial["prompt"] = fieldPrompt
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInLattoEngQuestion._marshalJSONTypeInLattoEngQuestion: struct; %w", err)
	}
	return result, nil
}
func (r *TypeInLattoEngQuestion) _marshalJSONSlicestring(x []string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("questions: TypeInLattoEngQuestion._marshalJSONSlicestring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInLattoEngQuestion._marshalJSONSlicestring:; %w", err)
	}
	return result, nil
}
func (r *TypeInLattoEngQuestion) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("questions: TypeInLattoEngQuestion._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *TypeInLattoEngQuestion) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONTypeInLattoEngQuestion(data)
	if err != nil {
		return fmt.Errorf("questions: TypeInLattoEngQuestion.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *TypeInLattoEngQuestion) _unmarshalJSONTypeInLattoEngQuestion(data []byte) (TypeInLattoEngQuestion, error) {
	result := TypeInLattoEngQuestion{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: TypeInLattoEngQuestion._unmarshalJSONTypeInLattoEngQuestion: native struct unwrap; %w", err)
	}
	if fieldAnswers, ok := partial["answers"]; ok {
		result.Answers, err = r._unmarshalJSONSlicestring(fieldAnswers)
		if err != nil {
			return result, fmt.Errorf("questions: TypeInLattoEngQuestion._unmarshalJSONTypeInLattoEngQuestion: field Answers; %w", err)
		}
	}
	if fieldMainAnswer, ok := partial["main_answer"]; ok {
		result.MainAnswer, err = r._unmarshalJSONstring(fieldMainAnswer)
		if err != nil {
			return result, fmt.Errorf("questions: TypeInLattoEngQuestion._unmarshalJSONTypeInLattoEngQuestion: field MainAnswer; %w", err)
		}
	}
	if fieldPrompt, ok := partial["prompt"]; ok {
		result.Prompt, err = r._unmarshalJSONstring(fieldPrompt)
		if err != nil {
			return result, fmt.Errorf("questions: TypeInLattoEngQuestion._unmarshalJSONTypeInLattoEngQuestion: field Prompt; %w", err)
		}
	}
	return result, nil
}
func (r *TypeInLattoEngQuestion) _unmarshalJSONSlicestring(data []byte) ([]string, error) {
	result := make([]string, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("questions: TypeInLattoEngQuestion._unmarshalJSONSlicestring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("questions: TypeInLattoEngQuestion._unmarshalJSONSlicestring: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *TypeInLattoEngQuestion) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("questions: TypeInLattoEngQuestion._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

