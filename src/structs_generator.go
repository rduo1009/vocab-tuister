//go:build ignore

package main

import (
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

const (
	outputFilepath = "client/pkg/questions/questions.go"
	jsonDir        = "scripts/json_output/questions"
)

func removeStartLines(s string, n int) string {
	lines := strings.Split(s, "\n")
	if len(lines) <= n {
		return ""
	}
	return strings.Join(lines[n:], "\n")
}

func removeCharsFromFirstLine(s string, n int) string {
	lines := strings.SplitN(s, "\n", 2)
	if len(lines[0]) > n {
		lines[0] = lines[0][n:]
	} else {
		lines[0] = ""
	}
	return strings.Join(lines, "\n")
}

func deriveQuestionType(filename string) string {
	noExtension := strings.TrimSuffix(filename, filepath.Ext(filename))
	return strings.TrimSuffix(noExtension, "_sample")
}

func main() {
	cmd1 := exec.Command("python3", "scripts/create_question_json.py")
	if err := cmd1.Run(); err != nil {
		log.Fatalf("Error running create_question_json.py: %v", err)
	}

	output_file, err := os.Create(outputFilepath)
	if err != nil {
		log.Fatalf("Error creating output file: %v", err)
	}
	defer output_file.Close()

	_, err = output_file.WriteString(`// Code generated by gojsonstruct; DO NOT EDIT.

package questions

type Questions []Question

//go:tag mkunion:"Question"
type (
`)
	if err != nil {
		log.Fatalf("Error writing to file: %v", err)
	}

	json_files, err := os.ReadDir(jsonDir)
	if err != nil {
		log.Fatalf("Failed to read directory: %v", err)
	}
	for _, file := range json_files {
		inputFilepath := filepath.Join(jsonDir, file.Name())
		questionType := deriveQuestionType(file.Name())

		if !file.IsDir() && filepath.Ext(file.Name()) == ".json" {
			cmd2 := exec.Command(
				"gojsonstruct", "--typename", questionType, inputFilepath,
			)

			raw_code, err := cmd2.Output()
			if err != nil {
				log.Fatalf("Error running gojsonstruct: %v", err)
			}

			code := removeCharsFromFirstLine(removeStartLines(string(raw_code), 2), 5)
			output_file.WriteString(code)
		}
	}

	_, err = output_file.WriteString(")")
	if err != nil {
		log.Fatalf("Error writing to file: %v", err)
	}

	cmd3 := exec.Command("gofmt", "-w", outputFilepath)
	if err := cmd3.Run(); err != nil {
		log.Fatalf("Error running gofmt on the generated file: %v", err)
	}
}
