from nltk.corpus.util import LazyCorpusLoader
from nltk.data import ZipFilePathPointer

class Lemma:
    def __init__(
        self,
        wordnet_corpus_reader: WordNetCorpusReader,
        synset: Synset,
        name: str,
        lexname_index: int,
        lex_id: int,
        syntactic_marker: None,
    ) -> None: ...
    def name(self) -> str: ...

class Synset:
    def __init__(self, wordnet_corpus_reader: WordNetCorpusReader) -> None: ...
    def lemmas(self, lang: str = ...) -> list[Lemma]: ...
    def similar_tos(self) -> list[Synset]: ...

class WordNetCorpusReader:
    ADJ: str
    ADJ_SAT: str
    ADV: str
    NOUN: str
    VERB: str
    def __init__(
        self, root: ZipFilePathPointer, omw_reader: LazyCorpusLoader
    ) -> None: ...
    def get_version(self) -> str: ...
    def index_sense(self, version: str | None = ...) -> dict[str, str]: ...
    def map_to_many(self, version: str = ...) -> dict[str, list[str]]: ...
    def map_to_one(self, version: str = ...) -> dict[str, str]: ...
    def map_wn(self, version: str = ...) -> dict[str, str]: ...
    def synset_from_pos_and_offset(self, pos: str, offset: int) -> Synset: ...
    def synsets(
        self,
        lemma: str,
        pos: str | None = ...,
        lang: str = ...,
        check_exceptions: bool = ...,
    ) -> list[Synset]: ...
