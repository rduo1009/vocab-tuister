import types
from abc import ABCMeta, abstractmethod

from _typeshed import Incomplete

path: list[str]

class PathPointer(metaclass=ABCMeta):
    @abstractmethod
    def open(self, encoding: Incomplete | None = None) -> Incomplete: ...
    @abstractmethod
    def file_size(self) -> Incomplete: ...
    @abstractmethod
    def join(self, fileid: Incomplete) -> Incomplete: ...

class ZipFilePathPointer(PathPointer):
    def __init__(self, zipfile: Incomplete, entry: str = "") -> None: ...
    @property
    def zipfile(self) -> Incomplete: ...
    @property
    def entry(self) -> Incomplete: ...
    def open(self, encoding: Incomplete | None = None) -> Incomplete: ...
    def file_size(self) -> Incomplete: ...
    def join(self, fileid: Incomplete) -> Incomplete: ...

def find(
    resource_name: Incomplete, paths: Incomplete | None = None
) -> Incomplete: ...

class SeekableUnicodeStreamReader:
    DEBUG: bool
    stream: Incomplete
    encoding: Incomplete
    errors: Incomplete
    decode: Incomplete
    bytebuffer: bytes
    linebuffer: Incomplete
    def __init__(
        self, stream: Incomplete, encoding: Incomplete, errors: str = "strict"
    ) -> None: ...
    def read(self, size: Incomplete | None = None) -> Incomplete: ...
    def discard_line(self) -> None: ...
    def readline(self, size: Incomplete | None = None) -> Incomplete: ...
    def readlines(
        self, sizehint: Incomplete | None = None, keepends: bool = True
    ) -> Incomplete: ...
    def next(self) -> Incomplete: ...
    def __next__(self) -> Incomplete: ...
    def __iter__(self) -> Incomplete: ...
    def __del__(self) -> None: ...
    def __enter__(self) -> Incomplete: ...
    def __exit__(
        self,
        type: type[BaseException] | None,
        value: BaseException | None,
        traceback: types.TracebackType | None,
    ) -> None: ...
    def xreadlines(self) -> Incomplete: ...
    @property
    def closed(self) -> Incomplete: ...
    @property
    def name(self) -> Incomplete: ...
    @property
    def mode(self) -> Incomplete: ...
    def close(self) -> None: ...
    def seek(self, offset: Incomplete, whence: int = 0) -> None: ...
    def char_seek_forward(self, offset: Incomplete) -> None: ...
    def tell(self) -> Incomplete: ...
