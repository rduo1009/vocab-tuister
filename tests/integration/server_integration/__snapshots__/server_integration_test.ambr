# serializer version: 1
# name: test_cli_error_extra_config
  'Vocab list received.'
# ---
# name: test_cli_error_extra_config.1
  "Bad request: 400 Bad Request: Required settings are missing: 'exclude-deponents', 'exclude-participle-future-active', 'exclude-verb-future-passive-indicative', 'exclude-verb-future-perfect-passive-indicative', 'exclude-verb-imperfect-passive-indicative', 'exclude-verb-perfect-active-subjunctive', 'exclude-verb-perfect-passive-indicative', 'exclude-verb-pluperfect-passive-indicative', 'exclude-verb-present-active-subjunctive', 'exclude-verb-present-passive-indicative', 'exclude-verb-present-passive-infinitive'. (InvalidSettingsError)"
# ---
# name: test_cli_error_list
  "Bad request: 400 Bad Request: InvalidVocabFileFormatError: Invalid part of speech: 'Cause an error'"
# ---
# name: test_cli_error_list.1
  'Bad request: 400 Bad Request: Vocab list has not been provided.'
# ---
# name: test_cli_error_missing1_config
  'Vocab list received.'
# ---
# name: test_cli_error_missing1_config.1
  "Bad request: 400 Bad Request: Required settings are missing: 'number-of-questions'. (InvalidSettingsError)"
# ---
# name: test_cli_error_missing2_config
  'Vocab list received.'
# ---
# name: test_cli_error_missing2_config.1
  "Bad request: 400 Bad Request: Required settings are missing: 'exclude-deponents', 'exclude-participle-future-active', 'exclude-verb-future-passive-indicative', 'exclude-verb-future-perfect-passive-indicative', 'exclude-verb-imperfect-passive-indicative', 'exclude-verb-perfect-active-subjunctive', 'exclude-verb-perfect-passive-indicative', 'exclude-verb-pluperfect-passive-indicative', 'exclude-verb-present-active-subjunctive', 'exclude-verb-present-passive-indicative', 'exclude-verb-present-passive-infinitive', 'number-multiplechoice-options'. (InvalidSettingsError)"
# ---
# name: test_cli_error_type1_config
  'Vocab list received.'
# ---
# name: test_cli_error_type1_config.1
  "Bad request: 400 Bad Request: Required settings are missing: 'exclude-deponents', 'exclude-participle-future-active', 'exclude-verb-future-passive-indicative', 'exclude-verb-future-perfect-passive-indicative', 'exclude-verb-imperfect-passive-indicative', 'exclude-verb-perfect-active-subjunctive', 'exclude-verb-perfect-passive-indicative', 'exclude-verb-pluperfect-passive-indicative', 'exclude-verb-present-active-subjunctive', 'exclude-verb-present-passive-indicative', 'exclude-verb-present-passive-infinitive'. (InvalidSettingsError)"
# ---
# name: test_cli_error_type2_config
  'Vocab list received.'
# ---
# name: test_cli_error_type2_config.1
  "Bad request: 400 Bad Request: Invalid settings: 'number-of-questions' must be an integer (got type str). (InvalidSettingsError)"
# ---
# name: test_cli_normal
  'Vocab list received.'
# ---
# name: test_cli_normal.1
  list([
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'hic',
        'choices': list([
          'acer',
          'hic',
          'laetus',
        ]),
        'prompt': 'this',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'dative singular',
          'genitive singular',
          'nominative plural',
          'vocative plural',
        ]),
        'dictionary_entry': 'farmer: agricola, agricolae, (m)',
        'main_answer': 'nominative plural',
        'prompt': 'agricolae',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'canem',
          'canis',
        ]),
        'main_answer': 'canem',
        'prompt': 'dog',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'ego',
        'choices': list([
          'levis',
          'puer',
          'ego',
        ]),
        'prompt': 'I',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'comparative ablative singular feminine',
          'comparative ablative singular masculine',
          'comparative ablative singular neuter',
        ]),
        'dictionary_entry': 'large: ingens, ingentis, (3-1)',
        'main_answer': 'comparative ablative singular masculine',
        'prompt': 'ingentiore',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'by means of the names',
          'by the names',
          'for names',
          'for the names',
          'names',
          'to names',
          'to the names',
          'with the names',
        ]),
        'main_answer': 'for the names',
        'prompt': 'nominibus',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'good',
        'choices': list([
          'say',
          'good',
          'large',
        ]),
        'prompt': 'bonus',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'bonus',
          'bona',
          'bonum',
        ]),
        'prompt': 'bonus',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'levis',
        'choices': list([
          'ille',
          'audio',
          'levis',
        ]),
        'prompt': 'light',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'agricolas',
        ]),
        'components': 'accusative plural',
        'main_answer': 'agricolas',
        'prompt': 'farmer: agricola, agricolae, (m)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'large',
        ]),
        'main_answer': 'large',
        'prompt': 'ingentia',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'positive accusative plural feminine',
          'positive accusative plural masculine',
          'positive nominative plural feminine',
          'positive nominative plural masculine',
          'positive vocative plural feminine',
          'positive vocative plural masculine',
        ]),
        'dictionary_entry': 'keen: acer, acris, acre, (3-3)',
        'main_answer': 'positive nominative plural masculine',
        'prompt': 'acres',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'horum',
        ]),
        'components': 'genitive plural neuter',
        'main_answer': 'horum',
        'prompt': 'this: hic, haec, hoc',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'into',
        'choices': list([
          'keen',
          'boy',
          'into',
        ]),
        'prompt': 'in',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'laetissima',
        ]),
        'components': 'superlative accusative plural neuter',
        'main_answer': 'laetissima',
        'prompt': 'happy: laetus, laeta, laetum, (2-1-2)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'illius',
        ]),
        'main_answer': 'illius',
        'prompt': 'of that',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'perfect active indicative singular 1st person',
        ]),
        'dictionary_entry': 'say: inquam',
        'main_answer': 'perfect active indicative singular 1st person',
        'prompt': 'inquii',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'ingens',
          'ingentis',
        ]),
        'prompt': 'ingens',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'inquam',
        'choices': list([
          'ingredior',
          'laetus',
          'inquam',
        ]),
        'prompt': 'say',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'comparative ablative singular feminine',
          'comparative ablative singular masculine',
          'comparative ablative singular neuter',
        ]),
        'dictionary_entry': 'large: ingens, ingentis, (3-1)',
        'main_answer': 'comparative ablative singular masculine',
        'prompt': 'ingentiore',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'good',
        'choices': list([
          'say',
          'from',
          'good',
        ]),
        'prompt': 'bonus',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'dative singular',
        ]),
        'dictionary_entry': 'dog: canis, canis, (m)',
        'main_answer': 'dative singular',
        'prompt': 'cani',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'puellis',
        ]),
        'main_answer': 'puellis',
        'prompt': 'for the girls',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'ablative singular',
          'nominative singular',
          'vocative singular',
        ]),
        'dictionary_entry': 'girl: puella, puellae, (f)',
        'main_answer': 'nominative singular',
        'prompt': 'puella',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'genitive singular',
        ]),
        'dictionary_entry': 'I: ego, (irregular)',
        'main_answer': 'genitive singular',
        'prompt': 'mei',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'audio',
          'audire',
          'audivi',
          'auditus',
        ]),
        'prompt': 'audio',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'capiendi',
        ]),
        'components': 'gerundive masculine genitive singular',
        'main_answer': 'capiendi',
        'prompt': 'take: capio, capere, cepi, captus',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'puer',
        'choices': list([
          'laetus',
          'puer',
          'nomen',
        ]),
        'prompt': 'boy',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'lighter',
          'more light',
        ]),
        'main_answer': 'lighter',
        'prompt': 'levioris',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'genitive singular feminine',
          'genitive singular masculine',
          'genitive singular neuter',
        ]),
        'dictionary_entry': 'that: ille, illa, illud',
        'main_answer': 'genitive singular masculine',
        'prompt': 'illius',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'ablative plural',
          'dative plural',
        ]),
        'dictionary_entry': 'girl: puella, puellae, (f)',
        'main_answer': 'dative plural',
        'prompt': 'puellis',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'positive ablative singular feminine',
          'positive accusative plural neuter',
          'positive nominative plural neuter',
          'positive nominative singular feminine',
          'positive vocative plural neuter',
          'positive vocative singular feminine',
        ]),
        'dictionary_entry': 'good: bonus, bona, bonum, (2-1-2)',
        'main_answer': 'positive nominative singular feminine',
        'prompt': 'bona',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'acer',
          'acris',
          'acre',
        ]),
        'prompt': 'acer',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'harum',
        ]),
        'components': 'genitive plural feminine',
        'main_answer': 'harum',
        'prompt': 'this: hic, haec, hoc',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'superlative ablative singular feminine',
          'superlative accusative plural neuter',
          'superlative nominative plural neuter',
          'superlative nominative singular feminine',
          'superlative vocative plural neuter',
          'superlative vocative singular feminine',
        ]),
        'dictionary_entry': 'light: levis, leve, (3-2)',
        'main_answer': 'superlative nominative singular feminine',
        'prompt': 'levissima',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'puella',
          'puellae',
        ]),
        'prompt': 'puella',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'bonus',
        'choices': list([
          'capio',
          'acer',
          'bonus',
        ]),
        'prompt': 'good',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'e',
        'choices': list([
          'capio',
          'ingens',
          'e',
        ]),
        'prompt': 'from',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'ingredior',
          'ingredi',
          'ingressus sum',
          'ingressus',
        ]),
        'prompt': 'ingredior',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'best',
          'extremely good',
          'most good',
          'quite good',
          'rather good',
          'too good',
          'very good',
        ]),
        'main_answer': 'best',
        'prompt': 'optima',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'present active imperative singular 2nd person',
        ]),
        'dictionary_entry': 'say: inquam',
        'main_answer': 'present active imperative singular 2nd person',
        'prompt': 'inque',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'keener',
          'more keen',
        ]),
        'main_answer': 'keener',
        'prompt': 'acriori',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'mihi',
        ]),
        'main_answer': 'mihi',
        'prompt': 'to me',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'acerrimis',
        ]),
        'components': 'superlative ablative plural masculine',
        'main_answer': 'acerrimis',
        'prompt': 'keen: acer, acris, acre, (3-3)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'inquimus',
        ]),
        'main_answer': 'inquimus',
        'prompt': 'we say',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'ille',
        'choices': list([
          'agricola',
          'laetus',
          'ille',
        ]),
        'prompt': 'that',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'genitive singular',
        ]),
        'dictionary_entry': 'name: nomen, nominis, (n)',
        'main_answer': 'genitive singular',
        'prompt': 'nominis',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'nomen',
        'choices': list([
          'hic',
          'capio',
          'nomen',
        ]),
        'prompt': 'name',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'puellae',
          'puellas',
        ]),
        'main_answer': 'puellae',
        'prompt': 'girls',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'ingens',
          'ingentis',
        ]),
        'prompt': 'ingens',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
  ])
# ---
