# serializer version: 1
# name: test_cli_normal
  'Vocab list received.'
# ---
# name: test_cli_normal.1
  list([
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'imperfect active subjunctive plural 1st person',
        ]),
        'dictionary_entry': 'take: capio, capere, cepi',
        'main_answer': 'imperfect active subjunctive plural 1st person',
        'prompt': 'caperemus',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'nominative plural',
          'nominative plural',
          'nominative plural',
        ]),
        'dictionary_entry': 'name: nomen, nominis, (n)',
        'main_answer': 'nominative plural',
        'prompt': 'nomina',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'canis',
        'choices': list([
          'levis',
          'canis',
          'acer',
        ]),
        'prompt': 'dog',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'ingentior',
          'ingentiora',
          'ingentiore',
          'ingentiorem',
          'ingentiores',
          'ingentiori',
          'ingentioribus',
          'ingentioris',
          'ingentiorum',
          'ingentius',
        ]),
        'main_answer': 'ingentior',
        'prompt': 'larger',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'from',
        ]),
        'main_answer': 'from',
        'prompt': 'e',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'extremely keen',
          'keenest',
          'most keen',
          'quite keen',
          'rather keen',
          'too keen',
          'very keen',
        ]),
        'main_answer': 'keenest',
        'prompt': 'acerrimam',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'this',
        'choices': list([
          'dog',
          'good',
          'this',
        ]),
        'prompt': 'hic',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'superlative vocative plural masculine',
          'superlative vocative plural masculine',
          'superlative vocative plural masculine',
          'superlative vocative plural masculine',
        ]),
        'dictionary_entry': 'large: ingens, ingentis, (3-1)',
        'main_answer': 'superlative vocative plural masculine',
        'prompt': 'ingentissimi',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'capio',
          'capere',
          'cepi',
        ]),
        'prompt': 'capio',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'hear',
        'choices': list([
          'hear',
          'boy',
          'dog',
        ]),
        'prompt': 'audio',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'ingentissima',
        ]),
        'components': 'superlative vocative singular feminine',
        'main_answer': 'ingentissima',
        'prompt': 'large: ingens, ingentis, (3-1)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'nominative plural feminine',
        ]),
        'dictionary_entry': 'this: hic, haec, hoc',
        'main_answer': 'nominative plural feminine',
        'prompt': 'hae',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'better',
          'more good',
        ]),
        'main_answer': 'better',
        'prompt': 'meliori',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'positive accusative plural neuter',
          'positive accusative plural neuter',
          'positive accusative plural neuter',
        ]),
        'dictionary_entry': 'large: ingens, ingentis, (3-1)',
        'main_answer': 'positive accusative plural neuter',
        'prompt': 'ingentia',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'pluperfect active indicative singular 2nd person',
        ]),
        'dictionary_entry': 'take: capio, capere, cepi',
        'main_answer': 'pluperfect active indicative singular 2nd person',
        'prompt': 'ceperas',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'girl',
        'choices': list([
          'good',
          'girl',
          'name',
        ]),
        'prompt': 'puella',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'by a farmer',
          'by means of a farmer',
          'by means of the farmer',
          'by the farmer',
          'farmer',
          'with a farmer',
          'with the farmer',
        ]),
        'main_answer': 'farmer',
        'prompt': 'agricola',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'dog',
          "dog's",
          'of a dog',
          'of the dog',
        ]),
        'main_answer': 'of the dog',
        'prompt': 'canis',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'this',
        'choices': list([
          'girl',
          'this',
          'keen',
        ]),
        'prompt': 'hic',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'agricolae',
        ]),
        'components': 'vocative plural',
        'main_answer': 'agricolae',
        'prompt': 'farmer: agricola, agricolae, (m)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'keen',
        'choices': list([
          'keen',
          'girl',
          'from',
        ]),
        'prompt': 'acer',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'positive ablative singular masculine',
          'positive ablative singular masculine',
          'positive ablative singular masculine',
          'positive ablative singular masculine',
        ]),
        'dictionary_entry': 'good: bonus, bona, bonum, (2-1-2)',
        'main_answer': 'positive ablative singular masculine',
        'prompt': 'bono',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'ceperat',
        ]),
        'components': 'pluperfect active indicative singular 3rd person',
        'main_answer': 'ceperat',
        'prompt': 'take: capio, capere, cepi',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'ingens',
        'choices': list([
          'levis',
          'ingens',
          'puer',
        ]),
        'prompt': 'large',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'into',
        ]),
        'main_answer': 'into',
        'prompt': 'in',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'levis',
          'leve',
        ]),
        'prompt': 'levis',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'ille',
          'illa',
          'illud',
        ]),
        'prompt': 'ille',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'ille',
        'choices': list([
          'ille',
          'puella',
          'ingens',
        ]),
        'prompt': 'that',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'into',
        'choices': list([
          'into',
          'keen',
          'light',
        ]),
        'prompt': 'in',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'illa',
          'illae',
          'illi',
        ]),
        'main_answer': 'illi',
        'prompt': 'those',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'ablative singular',
          'ablative singular',
          'ablative singular',
        ]),
        'dictionary_entry': 'farmer: agricola, agricolae, (m)',
        'main_answer': 'ablative singular',
        'prompt': 'agricola',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'hic',
          'haec',
          'hoc',
        ]),
        'prompt': 'hic',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'puella',
        'choices': list([
          'nomen',
          'capio',
          'puella',
        ]),
        'prompt': 'girl',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'these',
          'this',
        ]),
        'main_answer': 'this',
        'prompt': 'haec',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'vocative plural',
          'vocative plural',
          'vocative plural',
        ]),
        'dictionary_entry': 'boy: puer, pueri, (m)',
        'main_answer': 'vocative plural',
        'prompt': 'pueri',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'huic',
        ]),
        'components': 'dative singular neuter',
        'main_answer': 'huic',
        'prompt': 'this: hic, haec, hoc',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'extremely light',
          'lightest',
          'most light',
          'quite light',
          'rather light',
          'too light',
          'very light',
        ]),
        'main_answer': 'lightest',
        'prompt': 'levissima',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'pueri',
        ]),
        'main_answer': 'pueri',
        'prompt': 'of a boy',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'cepi',
        ]),
        'main_answer': 'cepi',
        'prompt': 'I took',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'ille',
        'choices': list([
          'ille',
          'capio',
          'in',
        ]),
        'prompt': 'that',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'ingentior',
          'ingentiora',
          'ingentiore',
          'ingentiorem',
          'ingentiores',
          'ingentiori',
          'ingentioribus',
          'ingentioris',
          'ingentiorum',
          'ingentius',
        ]),
        'main_answer': 'ingentior',
        'prompt': 'larger',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'capio',
          'capere',
          'cepi',
        ]),
        'prompt': 'capio',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          "farmer's",
          'farmers',
          'for a farmer',
          'for the farmer',
          'of a farmer',
          'of the farmer',
          'to a farmer',
          'to the farmer',
        ]),
        'main_answer': 'farmers',
        'prompt': 'agricolae',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'that',
        'choices': list([
          'name',
          'keen',
          'that',
        ]),
        'prompt': 'ille',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'canis',
        'choices': list([
          'agricola',
          'canis',
          'bonus',
        ]),
        'prompt': 'dog',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'agricolae',
        ]),
        'main_answer': 'agricolae',
        'prompt': 'to the farmer',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'nominum',
        ]),
        'components': 'genitive plural',
        'main_answer': 'nominum',
        'prompt': 'name: nomen, nominis, (n)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'laetus',
        'choices': list([
          'bonus',
          'laetus',
          'e',
        ]),
        'prompt': 'happy',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'genitive plural',
        ]),
        'dictionary_entry': 'name: nomen, nominis, (n)',
        'main_answer': 'genitive plural',
        'prompt': 'nominum',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'into',
        ]),
        'main_answer': 'into',
        'prompt': 'in',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'from',
        ]),
        'main_answer': 'from',
        'prompt': 'e',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'laetioribus',
        ]),
        'components': 'comparative dative plural masculine',
        'main_answer': 'laetioribus',
        'prompt': 'happy: laetus, laeta, laetum, (2-1-2)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'ablative singular neuter',
          'ablative singular neuter',
          'ablative singular neuter',
          'ablative singular neuter',
        ]),
        'dictionary_entry': 'this: hic, haec, hoc',
        'main_answer': 'ablative singular neuter',
        'prompt': 'hoc',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'superlative nominative plural feminine',
          'superlative nominative plural feminine',
          'superlative nominative plural feminine',
          'superlative nominative plural feminine',
        ]),
        'dictionary_entry': 'keen: acer, acris, acre, (3-3)',
        'main_answer': 'superlative nominative plural feminine',
        'prompt': 'acerrimae',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'ille',
          'illa',
          'illud',
        ]),
        'prompt': 'ille',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'comparative vocative plural masculine',
          'comparative vocative plural masculine',
          'comparative vocative plural masculine',
          'comparative vocative plural masculine',
          'comparative vocative plural masculine',
          'comparative vocative plural masculine',
        ]),
        'dictionary_entry': 'light: levis, leve, (3-2)',
        'main_answer': 'comparative vocative plural masculine',
        'prompt': 'leviores',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'optimas',
        ]),
        'components': 'superlative accusative plural feminine',
        'main_answer': 'optimas',
        'prompt': 'good: bonus, bona, bonum, (2-1-2)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'comparative genitive plural masculine',
          'comparative genitive plural masculine',
          'comparative genitive plural masculine',
        ]),
        'dictionary_entry': 'light: levis, leve, (3-2)',
        'main_answer': 'comparative genitive plural masculine',
        'prompt': 'leviorum',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'ille',
        'choices': list([
          'ille',
          'laetus',
          'levis',
        ]),
        'prompt': 'that',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'into',
        ]),
        'main_answer': 'into',
        'prompt': 'in',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'puella',
          'puellae',
        ]),
        'prompt': 'puella',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'acer',
        'choices': list([
          'acer',
          'bonus',
          'canis',
        ]),
        'prompt': 'keen',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'puellae',
          'puellas',
        ]),
        'main_answer': 'puellae',
        'prompt': 'girls',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'acer',
          'acris',
          'acre',
        ]),
        'prompt': 'acer',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'dog',
        'choices': list([
          'boy',
          'dog',
          'take',
        ]),
        'prompt': 'canis',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'ingens',
          'ingentis',
        ]),
        'prompt': 'ingens',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'vocative plural',
          'vocative plural',
          'vocative plural',
          'vocative plural',
        ]),
        'dictionary_entry': 'girl: puella, puellae, (f)',
        'main_answer': 'vocative plural',
        'prompt': 'puellae',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'present active imperative singular 2nd person',
        ]),
        'dictionary_entry': 'hear: audio, audire, audivi, auditus',
        'main_answer': 'present active imperative singular 2nd person',
        'prompt': 'audi',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'nomen',
          'nominis',
        ]),
        'prompt': 'nomen',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'good',
        ]),
        'main_answer': 'good',
        'prompt': 'boni',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'capio',
          'capere',
          'cepi',
        ]),
        'prompt': 'capio',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'happier',
          'more happy',
        ]),
        'main_answer': 'happier',
        'prompt': 'laetiorem',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'dog',
        ]),
        'main_answer': 'dog',
        'prompt': 'canem',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'happy',
        'choices': list([
          'happy',
          'into',
          'light',
        ]),
        'prompt': 'laetus',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'nominative plural',
          'nominative plural',
          'nominative plural',
          'nominative plural',
        ]),
        'dictionary_entry': 'girl: puella, puellae, (f)',
        'main_answer': 'nominative plural',
        'prompt': 'puellae',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'take',
        'choices': list([
          'take',
          'into',
          'light',
        ]),
        'prompt': 'capio',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'hic',
          'haec',
          'hoc',
        ]),
        'prompt': 'hic',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'canes',
        ]),
        'components': 'nominative plural',
        'main_answer': 'canes',
        'prompt': 'dog: canis, canis, (m)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'bonus',
          'bona',
          'bonum',
        ]),
        'prompt': 'bonus',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'accusative plural masculine',
        ]),
        'dictionary_entry': 'this: hic, haec, hoc',
        'main_answer': 'accusative plural masculine',
        'prompt': 'hos',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'e',
        ]),
        'main_answer': 'e',
        'prompt': 'from',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'canibus',
        ]),
        'main_answer': 'canibus',
        'prompt': 'for the dogs',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'from',
        ]),
        'main_answer': 'from',
        'prompt': 'e',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'capio',
          'capere',
          'cepi',
        ]),
        'prompt': 'capio',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'take',
        'choices': list([
          'boy',
          'take',
          'hear',
        ]),
        'prompt': 'capio',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'agricolarum',
        ]),
        'main_answer': 'agricolarum',
        'prompt': 'of the farmers',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'canis',
        ]),
        'components': 'nominative singular',
        'main_answer': 'canis',
        'prompt': 'dog: canis, canis, (m)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'e',
        'choices': list([
          'in',
          'canis',
          'e',
        ]),
        'prompt': 'from',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'dog',
        'choices': list([
          'dog',
          'that',
          'from',
        ]),
        'prompt': 'canis',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'take',
        'choices': list([
          'into',
          'take',
          'good',
        ]),
        'prompt': 'capio',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'in',
        'choices': list([
          'nomen',
          'hic',
          'in',
        ]),
        'prompt': 'into',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'dative plural',
          'dative plural',
        ]),
        'dictionary_entry': 'farmer: agricola, agricolae, (m)',
        'main_answer': 'dative plural',
        'prompt': 'agricolis',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'acer',
          'acris',
          'acre',
        ]),
        'prompt': 'acer',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'agricolas',
        ]),
        'components': 'accusative plural',
        'main_answer': 'agricolas',
        'prompt': 'farmer: agricola, agricolae, (m)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'ille',
          'illa',
          'illud',
        ]),
        'prompt': 'ille',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'ingens',
          'ingentis',
        ]),
        'prompt': 'ingens',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'acer',
        'choices': list([
          'acer',
          'laetus',
          'puella',
        ]),
        'prompt': 'keen',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'ingens',
        'choices': list([
          'laetus',
          'ingens',
          'acer',
        ]),
        'prompt': 'large',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'nomine',
        ]),
        'components': 'ablative singular',
        'main_answer': 'nomine',
        'prompt': 'name: nomen, nominis, (n)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'girl',
        'choices': list([
          'take',
          'large',
          'girl',
        ]),
        'prompt': 'puella',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
  ])
# ---
# name: test_cli_normal.2
  '''
  [38;5;192;1mWARN[0m UserWarning: Cyclopts application invoked without tokens under unit-test framework "pytest". Did you mean "cli([])"? [2mwarnings.py:110[0m
  [38;5;86;1mINFO[0m Using random seed '10'. [2m__main__.py:91[0m
  [38;5;86;1mINFO[0m Serving on http://127.0.0.1:5500 [2mwasyncore.py:449[0m
  [38;5;86;1mINFO[0m Reading vocab list. [2mapp.py:63[0m
  [38;5;63;1mDEBU[0m Reading line '@ Verb' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m Reading line 'hear: audio, audire, audivi, auditus' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m RegularWord(audio, audire, audivi, auditus, hear) [2m_class_verb.py:98[0m
  [38;5;63;1mDEBU[0m Reading line 'take: capio, capere, cepi' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m RegularWord(capio, capere, cepi, , take) [2m_class_verb.py:98[0m
  [38;5;63;1mDEBU[0m Reading line '@ Noun' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m Reading line 'girl: puella, puellae, (f)' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m Noun(puella, puellae, feminine, girl) [2m_class_noun.py:106[0m
  [38;5;63;1mDEBU[0m Reading line 'farmer: agricola, agricolae, (m)' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m Noun(agricola, agricolae, masculine, farmer) [2m_class_noun.py:106[0m
  [38;5;63;1mDEBU[0m Reading line 'boy: puer, pueri, (m)' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m Noun(puer, pueri, masculine, boy) [2m_class_noun.py:106[0m
  [38;5;63;1mDEBU[0m Reading line 'dog: canis, canis, (m)' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m Noun(canis, canis, masculine, dog) [2m_class_noun.py:106[0m
  [38;5;63;1mDEBU[0m Reading line 'name: nomen, nominis, (n)' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m Noun(nomen, nominis, neuter, name) [2m_class_noun.py:106[0m
  [38;5;63;1mDEBU[0m Reading line '@ Adjective' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m Reading line 'large: ingens, ingentis, (3-1)' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m Adjective(ingens, ingentis, 1, 3, large) [2m_class_adjective.py:120[0m
  [38;5;63;1mDEBU[0m Reading line 'light: levis, leve, (3-2)' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m Adjective(levis, leve, 2, 3, light) [2m_class_adjective.py:120[0m
  [38;5;63;1mDEBU[0m Reading line 'keen: acer, acris, acre, (3-3)' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m Adjective(acer, acris, acre, 3, 3, keen) [2m_class_adjective.py:120[0m
  [38;5;63;1mDEBU[0m Reading line 'good: bonus, bona, bonum, (212)' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m Adjective(bonus, bona, bonum, None, 212, good) [2m_class_adjective.py:120[0m
  [38;5;63;1mDEBU[0m Reading line 'happy: laetus, laeta, laetum, (2-1-2)' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m Adjective(laetus, laeta, laetum, None, 212, happy) [2m_class_adjective.py:120[0m
  [38;5;63;1mDEBU[0m Reading line '@ Regular' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m Reading line 'into: in' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m RegularWord(in, into) [2m_class_regularword.py:46[0m
  [38;5;63;1mDEBU[0m Reading line 'from: e' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m RegularWord(e, from) [2m_class_regularword.py:46[0m
  [38;5;63;1mDEBU[0m Reading line '@ Pronoun' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m Reading line 'this: hic, haec, hoc' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m Pronoun(hic, this) [2m_class_pronoun.py:60[0m
  [38;5;63;1mDEBU[0m Reading line 'that: ille' [2mreader.py:212[0m
  [38;5;63;1mDEBU[0m Pronoun(ille, that) [2m_class_pronoun.py:60[0m
  [38;5;86;1mINFO[0m Validating settings. [2mapp.py:111[0m
  [38;5;86;1mINFO[0m Returning 100 questions. [2mapp.py:126[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'take: capio, capere, cepi'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'take: capio, capere, cepi' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'name: nomen, nominis, (n)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'name: nomen, nominis, (n)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceEngtoLatQuestion with word 'dog: canis, canis, (m)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceEngtoLatQuestion with word 'dog: canis, canis, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInEngtoLatQuestion with word 'large: ingens, ingentis, (3-1)'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m ingens.get(comparative, masculine, nominative, singular, adverb=False) [2m_class_adjective.py:859[0m
  [38;5;63;1mDEBU[0m find_inflection(large, comparative dative plural masculine, main=False) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInEngtoLatQuestion with word 'large: ingens, ingentis, (3-1)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInLattoEngQuestion with word 'from: e'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(from, , main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(from, , main=True) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInLattoEngQuestion with word 'from: e' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'into: in'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m Creating question of type ParseWordLattoCompQuestion with word 'into: in' failed. [2masker.py:152[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInLattoEngQuestion with word 'keen: acer, acris, acre, (3-3)'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(keen, superlative accusative singular feminine, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(keen, superlative accusative singular feminine, main=True) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInLattoEngQuestion with word 'keen: acer, acris, acre, (3-3)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceLatToEngQuestion with word 'this: hic, haec, hoc'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceLatToEngQuestion with word 'this: hic, haec, hoc' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'large: ingens, ingentis, (3-1)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'large: ingens, ingentis, (3-1)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'take: capio, capere, cepi'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type PrincipalPartsQuestion with word 'take: capio, capere, cepi' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceLatToEngQuestion with word 'hear: audio, audire, audivi, auditus'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceLatToEngQuestion with word 'hear: audio, audire, audivi, auditus' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordComptoLatQuestion with word 'large: ingens, ingentis, (3-1)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordComptoLatQuestion with word 'large: ingens, ingentis, (3-1)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'this: hic, haec, hoc'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'this: hic, haec, hoc' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInLattoEngQuestion with word 'good: bonus, bona, bonum, (2-1-2)'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(good, comparative dative singular masculine, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(good, comparative dative singular masculine, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(good, comparative dative singular feminine, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(good, comparative dative singular feminine, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(good, comparative dative singular neuter, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(good, comparative dative singular neuter, main=True) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInLattoEngQuestion with word 'good: bonus, bona, bonum, (2-1-2)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'large: ingens, ingentis, (3-1)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'large: ingens, ingentis, (3-1)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'take: capio, capere, cepi'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'take: capio, capere, cepi' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceLatToEngQuestion with word 'girl: puella, puellae, (f)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceLatToEngQuestion with word 'girl: puella, puellae, (f)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInLattoEngQuestion with word 'farmer: agricola, agricolae, (m)'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(farmer, nominative singular, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(farmer, nominative singular, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(farmer, vocative singular, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(farmer, vocative singular, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(farmer, ablative singular, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(farmer, ablative singular, main=True) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInLattoEngQuestion with word 'farmer: agricola, agricolae, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInLattoEngQuestion with word 'dog: canis, canis, (m)'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(dog, nominative singular, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(dog, nominative singular, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(dog, vocative singular, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(dog, vocative singular, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(dog, genitive singular, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(dog, genitive singular, main=True) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInLattoEngQuestion with word 'dog: canis, canis, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'from: e'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m Creating question of type ParseWordLattoCompQuestion with word 'from: e' failed. [2masker.py:152[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceLatToEngQuestion with word 'this: hic, haec, hoc'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceLatToEngQuestion with word 'this: hic, haec, hoc' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordComptoLatQuestion with word 'farmer: agricola, agricolae, (m)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordComptoLatQuestion with word 'farmer: agricola, agricolae, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceLatToEngQuestion with word 'keen: acer, acris, acre, (3-3)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceLatToEngQuestion with word 'keen: acer, acris, acre, (3-3)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'good: bonus, bona, bonum, (2-1-2)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'good: bonus, bona, bonum, (2-1-2)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordComptoLatQuestion with word 'take: capio, capere, cepi'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordComptoLatQuestion with word 'take: capio, capere, cepi' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceEngtoLatQuestion with word 'large: ingens, ingentis, (3-1)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceEngtoLatQuestion with word 'large: ingens, ingentis, (3-1)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInLattoEngQuestion with word 'into: in'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(into, , main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(into, , main=True) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInLattoEngQuestion with word 'into: in' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'light: levis, leve, (3-2)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type PrincipalPartsQuestion with word 'light: levis, leve, (3-2)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'that: ille, illa, illud'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type PrincipalPartsQuestion with word 'that: ille, illa, illud' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceEngtoLatQuestion with word 'that: ille, illa, illud'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceEngtoLatQuestion with word 'that: ille, illa, illud' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceLatToEngQuestion with word 'into: in'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceLatToEngQuestion with word 'into: in' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInEngtoLatQuestion with word 'that: ille, illa, illud'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m ille.get(masculine, nominative, plural) [2m_class_pronoun.py:117[0m
  [38;5;63;1mDEBU[0m ille.get(feminine, nominative, plural) [2m_class_pronoun.py:117[0m
  [38;5;63;1mDEBU[0m ille.get(neuter, nominative, plural) [2m_class_pronoun.py:117[0m
  [38;5;63;1mDEBU[0m ille.get(masculine, nominative, plural) [2m_class_pronoun.py:117[0m
  [38;5;63;1mDEBU[0m find_inflection(that, nominative plural masculine, main=False) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInEngtoLatQuestion with word 'that: ille, illa, illud' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'farmer: agricola, agricolae, (m)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'farmer: agricola, agricolae, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'this: hic, haec, hoc'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type PrincipalPartsQuestion with word 'this: hic, haec, hoc' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceEngtoLatQuestion with word 'girl: puella, puellae, (f)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceEngtoLatQuestion with word 'girl: puella, puellae, (f)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInLattoEngQuestion with word 'this: hic, haec, hoc'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(this, nominative singular feminine, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(this, nominative singular feminine, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(this, nominative plural neuter, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(this, nominative plural neuter, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(this, accusative plural neuter, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(this, accusative plural neuter, main=True) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInLattoEngQuestion with word 'this: hic, haec, hoc' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'boy: puer, pueri, (m)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'boy: puer, pueri, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordComptoLatQuestion with word 'this: hic, haec, hoc'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordComptoLatQuestion with word 'this: hic, haec, hoc' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInLattoEngQuestion with word 'light: levis, leve, (3-2)'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(light, superlative nominative singular feminine, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(light, superlative nominative singular feminine, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(light, superlative vocative singular feminine, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(light, superlative vocative singular feminine, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(light, superlative ablative singular feminine, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(light, superlative ablative singular feminine, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(light, superlative nominative plural neuter, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(light, superlative nominative plural neuter, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(light, superlative vocative plural neuter, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(light, superlative vocative plural neuter, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(light, superlative accusative plural neuter, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(light, superlative accusative plural neuter, main=True) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInLattoEngQuestion with word 'light: levis, leve, (3-2)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordComptoLatQuestion with word 'from: e'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m Creating question of type ParseWordComptoLatQuestion with word 'from: e' failed. [2masker.py:152[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInEngtoLatQuestion with word 'boy: puer, pueri, (m)'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(boy, genitive singular, main=False) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInEngtoLatQuestion with word 'boy: puer, pueri, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInEngtoLatQuestion with word 'take: capio, capere, cepi'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(take, perfect active indicative singular 1st person, main=False) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInEngtoLatQuestion with word 'take: capio, capere, cepi' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceEngtoLatQuestion with word 'that: ille, illa, illud'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceEngtoLatQuestion with word 'that: ille, illa, illud' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInEngtoLatQuestion with word 'large: ingens, ingentis, (3-1)'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m ingens.get(comparative, masculine, nominative, singular, adverb=False) [2m_class_adjective.py:859[0m
  [38;5;63;1mDEBU[0m find_inflection(large, comparative vocative singular masculine, main=False) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInEngtoLatQuestion with word 'large: ingens, ingentis, (3-1)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'take: capio, capere, cepi'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type PrincipalPartsQuestion with word 'take: capio, capere, cepi' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInLattoEngQuestion with word 'farmer: agricola, agricolae, (m)'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(farmer, genitive singular, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(farmer, genitive singular, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(farmer, dative singular, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(farmer, dative singular, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(farmer, nominative plural, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(farmer, nominative plural, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(farmer, vocative plural, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(farmer, vocative plural, main=True) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInLattoEngQuestion with word 'farmer: agricola, agricolae, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceLatToEngQuestion with word 'that: ille, illa, illud'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceLatToEngQuestion with word 'that: ille, illa, illud' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceEngtoLatQuestion with word 'dog: canis, canis, (m)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceEngtoLatQuestion with word 'dog: canis, canis, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInEngtoLatQuestion with word 'farmer: agricola, agricolae, (m)'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(farmer, dative singular, main=False) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInEngtoLatQuestion with word 'farmer: agricola, agricolae, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'from: e'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m Creating question of type ParseWordLattoCompQuestion with word 'from: e' failed. [2masker.py:152[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordComptoLatQuestion with word 'name: nomen, nominis, (n)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordComptoLatQuestion with word 'name: nomen, nominis, (n)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceEngtoLatQuestion with word 'happy: laetus, laeta, laetum, (2-1-2)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceEngtoLatQuestion with word 'happy: laetus, laeta, laetum, (2-1-2)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'name: nomen, nominis, (n)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'name: nomen, nominis, (n)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInLattoEngQuestion with word 'into: in'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(into, , main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(into, , main=True) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInLattoEngQuestion with word 'into: in' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInLattoEngQuestion with word 'from: e'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(from, , main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(from, , main=True) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInLattoEngQuestion with word 'from: e' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordComptoLatQuestion with word 'happy: laetus, laeta, laetum, (2-1-2)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordComptoLatQuestion with word 'happy: laetus, laeta, laetum, (2-1-2)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'this: hic, haec, hoc'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'this: hic, haec, hoc' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'keen: acer, acris, acre, (3-3)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'keen: acer, acris, acre, (3-3)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'that: ille, illa, illud'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type PrincipalPartsQuestion with word 'that: ille, illa, illud' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'light: levis, leve, (3-2)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'light: levis, leve, (3-2)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordComptoLatQuestion with word 'good: bonus, bona, bonum, (2-1-2)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordComptoLatQuestion with word 'good: bonus, bona, bonum, (2-1-2)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'light: levis, leve, (3-2)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'light: levis, leve, (3-2)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceEngtoLatQuestion with word 'that: ille, illa, illud'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceEngtoLatQuestion with word 'that: ille, illa, illud' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInLattoEngQuestion with word 'into: in'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(into, , main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(into, , main=True) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInLattoEngQuestion with word 'into: in' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'girl: puella, puellae, (f)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type PrincipalPartsQuestion with word 'girl: puella, puellae, (f)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceEngtoLatQuestion with word 'keen: acer, acris, acre, (3-3)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceEngtoLatQuestion with word 'keen: acer, acris, acre, (3-3)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInEngtoLatQuestion with word 'girl: puella, puellae, (f)'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m puella.get(nominative, plural) [2m_class_noun.py:327[0m
  [38;5;63;1mDEBU[0m puella.get(accusative, plural) [2m_class_noun.py:327[0m
  [38;5;63;1mDEBU[0m puella.get(vocative, plural) [2m_class_noun.py:327[0m
  [38;5;63;1mDEBU[0m find_inflection(girl, nominative plural, main=False) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInEngtoLatQuestion with word 'girl: puella, puellae, (f)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'keen: acer, acris, acre, (3-3)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type PrincipalPartsQuestion with word 'keen: acer, acris, acre, (3-3)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceLatToEngQuestion with word 'dog: canis, canis, (m)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceLatToEngQuestion with word 'dog: canis, canis, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'large: ingens, ingentis, (3-1)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type PrincipalPartsQuestion with word 'large: ingens, ingentis, (3-1)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'girl: puella, puellae, (f)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'girl: puella, puellae, (f)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'hear: audio, audire, audivi, auditus'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'hear: audio, audire, audivi, auditus' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'name: nomen, nominis, (n)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type PrincipalPartsQuestion with word 'name: nomen, nominis, (n)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInLattoEngQuestion with word 'good: bonus, bona, bonum, (2-1-2)'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(good, positive genitive singular masculine, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(good, positive genitive singular masculine, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(good, positive nominative plural masculine, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(good, positive nominative plural masculine, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(good, positive vocative plural masculine, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(good, positive vocative plural masculine, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(good, positive genitive singular neuter, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(good, positive genitive singular neuter, main=True) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInLattoEngQuestion with word 'good: bonus, bona, bonum, (2-1-2)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'take: capio, capere, cepi'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type PrincipalPartsQuestion with word 'take: capio, capere, cepi' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInLattoEngQuestion with word 'happy: laetus, laeta, laetum, (2-1-2)'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(happy, comparative accusative singular masculine, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(happy, comparative accusative singular masculine, main=True) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(happy, comparative accusative singular feminine, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(happy, comparative accusative singular feminine, main=True) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInLattoEngQuestion with word 'happy: laetus, laeta, laetum, (2-1-2)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInLattoEngQuestion with word 'dog: canis, canis, (m)'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(dog, accusative singular, main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(dog, accusative singular, main=True) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInLattoEngQuestion with word 'dog: canis, canis, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceLatToEngQuestion with word 'happy: laetus, laeta, laetum, (2-1-2)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceLatToEngQuestion with word 'happy: laetus, laeta, laetum, (2-1-2)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'girl: puella, puellae, (f)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'girl: puella, puellae, (f)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceLatToEngQuestion with word 'take: capio, capere, cepi'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceLatToEngQuestion with word 'take: capio, capere, cepi' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'this: hic, haec, hoc'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type PrincipalPartsQuestion with word 'this: hic, haec, hoc' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordComptoLatQuestion with word 'dog: canis, canis, (m)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordComptoLatQuestion with word 'dog: canis, canis, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'good: bonus, bona, bonum, (2-1-2)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type PrincipalPartsQuestion with word 'good: bonus, bona, bonum, (2-1-2)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'this: hic, haec, hoc'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'this: hic, haec, hoc' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInEngtoLatQuestion with word 'from: e'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(from, , main=False) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInEngtoLatQuestion with word 'from: e' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInEngtoLatQuestion with word 'dog: canis, canis, (m)'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(dog, dative plural, main=False) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInEngtoLatQuestion with word 'dog: canis, canis, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInLattoEngQuestion with word 'from: e'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(from, , main=False) [2mwords.py:59[0m
  [38;5;63;1mDEBU[0m find_inflection(from, , main=True) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInLattoEngQuestion with word 'from: e' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'take: capio, capere, cepi'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type PrincipalPartsQuestion with word 'take: capio, capere, cepi' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceLatToEngQuestion with word 'take: capio, capere, cepi'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceLatToEngQuestion with word 'take: capio, capere, cepi' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type TypeInEngtoLatQuestion with word 'farmer: agricola, agricolae, (m)'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m find_inflection(farmer, genitive plural, main=False) [2mwords.py:59[0m
  [38;5;86;1mINFO[0m Creating question of type TypeInEngtoLatQuestion with word 'farmer: agricola, agricolae, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordComptoLatQuestion with word 'dog: canis, canis, (m)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordComptoLatQuestion with word 'dog: canis, canis, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'into: in'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m Creating question of type PrincipalPartsQuestion with word 'into: in' failed. [2masker.py:152[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceEngtoLatQuestion with word 'from: e'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceEngtoLatQuestion with word 'from: e' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceLatToEngQuestion with word 'dog: canis, canis, (m)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceLatToEngQuestion with word 'dog: canis, canis, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceLatToEngQuestion with word 'take: capio, capere, cepi'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceLatToEngQuestion with word 'take: capio, capere, cepi' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceEngtoLatQuestion with word 'into: in'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceEngtoLatQuestion with word 'into: in' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordLattoCompQuestion with word 'farmer: agricola, agricolae, (m)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordLattoCompQuestion with word 'farmer: agricola, agricolae, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'keen: acer, acris, acre, (3-3)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type PrincipalPartsQuestion with word 'keen: acer, acris, acre, (3-3)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordComptoLatQuestion with word 'farmer: agricola, agricolae, (m)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordComptoLatQuestion with word 'farmer: agricola, agricolae, (m)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'that: ille, illa, illud'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type PrincipalPartsQuestion with word 'that: ille, illa, illud' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'large: ingens, ingentis, (3-1)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type PrincipalPartsQuestion with word 'large: ingens, ingentis, (3-1)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceEngtoLatQuestion with word 'keen: acer, acris, acre, (3-3)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceEngtoLatQuestion with word 'keen: acer, acris, acre, (3-3)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceEngtoLatQuestion with word 'large: ingens, ingentis, (3-1)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceEngtoLatQuestion with word 'large: ingens, ingentis, (3-1)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type PrincipalPartsQuestion with word 'into: in'. [2masker.py:100[0m
  [38;5;63;1mDEBU[0m Creating question of type PrincipalPartsQuestion with word 'into: in' failed. [2masker.py:152[0m
  [38;5;63;1mDEBU[0m Creating new question of type ParseWordComptoLatQuestion with word 'name: nomen, nominis, (n)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type ParseWordComptoLatQuestion with word 'name: nomen, nominis, (n)' succeeded. [2masker.py:142[0m
  [38;5;63;1mDEBU[0m Creating new question of type MultipleChoiceLatToEngQuestion with word 'girl: puella, puellae, (f)'. [2masker.py:100[0m
  [38;5;86;1mINFO[0m Creating question of type MultipleChoiceLatToEngQuestion with word 'girl: puella, puellae, (f)' succeeded. [2masker.py:142[0m
  '''
# ---
