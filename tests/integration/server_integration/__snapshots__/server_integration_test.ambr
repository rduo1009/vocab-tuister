# serializer version: 1
# name: test_cli_error_config
  'Vocab list received.'
# ---
# name: test_cli_error_config.1
  "Bad request: 400 Bad Request: The settings provided are not valid: 'number-of-questions' (InvalidSettingsError)"
# ---
# name: test_cli_error_config.2
  '''
  INFO     root:__main__.py:104 Using random seed '10'.
  INFO     waitress:wasyncore.py:449 Serving on http://127.0.0.1:5502
  DEBUG    urllib3.connectionpool:connectionpool.py:241 Starting new HTTP connection (1): 127.0.0.1:5502
  INFO     src.server.app:app.py:63 Reading vocab list.
  DEBUG    src.core.lego.reader:reader.py:212 Reading line '@ Verb'
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'hear: audio, audire, audivi, auditus'
  DEBUG    src.core.accido._class_verb:_class_verb.py:99 RegularWord(audio, audire, audivi, auditus, hear)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'take: capio, capere, cepi'
  DEBUG    src.core.accido._class_verb:_class_verb.py:99 RegularWord(capio, capere, cepi, , take)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line '@ Noun'
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'girl: puella, puellae, (f)'
  DEBUG    src.core.accido._class_noun:_class_noun.py:106 Noun(puella, puellae, feminine, girl)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'farmer: agricola, agricolae, (m)'
  DEBUG    src.core.accido._class_noun:_class_noun.py:106 Noun(agricola, agricolae, masculine, farmer)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'boy: puer, pueri, (m)'
  DEBUG    src.core.accido._class_noun:_class_noun.py:106 Noun(puer, pueri, masculine, boy)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'dog: canis, canis, (m)'
  DEBUG    src.core.accido._class_noun:_class_noun.py:106 Noun(canis, canis, masculine, dog)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'name: nomen, nominis, (n)'
  DEBUG    src.core.accido._class_noun:_class_noun.py:106 Noun(nomen, nominis, neuter, name)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line '@ Adjective'
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'large: ingens, ingentis, (3-1)'
  DEBUG    src.core.accido._class_adjective:_class_adjective.py:120 Adjective(ingens, ingentis, 1, 3, large)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'light: levis, leve, (3-2)'
  DEBUG    src.core.accido._class_adjective:_class_adjective.py:120 Adjective(levis, leve, 2, 3, light)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'keen: acer, acris, acre, (3-3)'
  DEBUG    src.core.accido._class_adjective:_class_adjective.py:120 Adjective(acer, acris, acre, 3, 3, keen)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'good: bonus, bona, bonum, (212)'
  DEBUG    src.core.accido._class_adjective:_class_adjective.py:120 Adjective(bonus, bona, bonum, None, 212, good)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'happy: laetus, laeta, laetum, (2-1-2)'
  DEBUG    src.core.accido._class_adjective:_class_adjective.py:120 Adjective(laetus, laeta, laetum, None, 212, happy)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line '@ Regular'
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'into: in'
  DEBUG    src.core.accido._class_regularword:_class_regularword.py:46 RegularWord(in, into)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'from: e'
  DEBUG    src.core.accido._class_regularword:_class_regularword.py:46 RegularWord(e, from)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line '@ Pronoun'
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'this: hic, haec, hoc'
  DEBUG    src.core.accido._class_pronoun:_class_pronoun.py:60 Pronoun(hic, this)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'that: ille'
  DEBUG    src.core.accido._class_pronoun:_class_pronoun.py:60 Pronoun(ille, that)
  DEBUG    urllib3.connectionpool:connectionpool.py:544 http://127.0.0.1:5502 "POST /send-vocab HTTP/1.1" 200 20
  DEBUG    urllib3.connectionpool:connectionpool.py:241 Starting new HTTP connection (1): 127.0.0.1:5502
  INFO     src.server.app:app.py:111 Validating settings.
  ERROR    src.server.app:app.py:42 The settings provided are not valid: 'number-of-questions' (InvalidSettingsError)
  DEBUG    urllib3.connectionpool:connectionpool.py:544 http://127.0.0.1:5502 "POST /session HTTP/1.1" 400 111
  
  '''
# ---
# name: test_cli_error_list
  "Bad request: 400 Bad Request: Invalid part of speech: 'Cause an error' (InvalidVocabFileFormatError)"
# ---
# name: test_cli_error_list.1
  'Bad request: 400 Bad Request: Vocab list has not been provided.'
# ---
# name: test_cli_error_list.2
  '''
  INFO     root:__main__.py:104 Using random seed '10'.
  INFO     waitress:wasyncore.py:449 Serving on http://127.0.0.1:5501
  DEBUG    urllib3.connectionpool:connectionpool.py:241 Starting new HTTP connection (1): 127.0.0.1:5501
  INFO     src.server.app:app.py:63 Reading vocab list.
  DEBUG    src.core.lego.reader:reader.py:212 Reading line '@ Cause an error'
  ERROR    src.server.app:app.py:42 Invalid part of speech: 'Cause an error' (InvalidVocabFileFormatError)
  DEBUG    urllib3.connectionpool:connectionpool.py:544 http://127.0.0.1:5501 "POST /send-vocab HTTP/1.1" 400 100
  DEBUG    urllib3.connectionpool:connectionpool.py:241 Starting new HTTP connection (1): 127.0.0.1:5501
  ERROR    src.server.app:app.py:42 Vocab list has not been provided.
  DEBUG    urllib3.connectionpool:connectionpool.py:544 http://127.0.0.1:5501 "POST /session HTTP/1.1" 400 63
  
  '''
# ---
# name: test_cli_list_badpos
  "Bad request: 400 Bad Request: Invalid part of speech: 'Cause an error' (InvalidVocabFileFormatError)"
# ---
# name: test_cli_list_badpos.1
  'Bad request: 400 Bad Request: Vocab list has not been provided.'
# ---
# name: test_cli_list_badpos.2
  '''
  INFO     root:__main__.py:91 Using random seed '10'.
  INFO     waitress:wasyncore.py:449 Serving on http://127.0.0.1:5501
  DEBUG    urllib3.connectionpool:connectionpool.py:241 Starting new HTTP connection (1): 127.0.0.1:5501
  INFO     src.server.app:app.py:84 Reading vocab list.
  DEBUG    src.core.lego.reader:reader.py:212 Reading line '@ Cause an error'
  ERROR    src.server.app:app.py:46 Invalid part of speech: 'Cause an error' (InvalidVocabFileFormatError)
  DEBUG    urllib3.connectionpool:connectionpool.py:544 http://127.0.0.1:5501 "POST /send-vocab HTTP/1.1" 400 100
  DEBUG    urllib3.connectionpool:connectionpool.py:241 Starting new HTTP connection (1): 127.0.0.1:5501
  ERROR    src.server.app:app.py:46 Vocab list has not been provided.
  DEBUG    urllib3.connectionpool:connectionpool.py:544 http://127.0.0.1:5501 "POST /session HTTP/1.1" 400 63
  
  '''
# ---
# name: test_cli_normal
  'Vocab list received.'
# ---
# name: test_cli_normal.1
  list([
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'imperfect active subjunctive plural 1st person',
        ]),
        'dictionary_entry': 'take: capio, capere, cepi',
        'main_answer': 'imperfect active subjunctive plural 1st person',
        'prompt': 'caperemus',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'nominative plural',
          'nominative plural',
          'nominative plural',
        ]),
        'dictionary_entry': 'name: nomen, nominis, (n)',
        'main_answer': 'nominative plural',
        'prompt': 'nomina',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'canis',
        'choices': list([
          'levis',
          'canis',
          'acer',
        ]),
        'prompt': 'dog',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'ingentior',
          'ingentiora',
          'ingentiore',
          'ingentiorem',
          'ingentiores',
          'ingentiori',
          'ingentioribus',
          'ingentioris',
          'ingentiorum',
          'ingentius',
        ]),
        'main_answer': 'ingentior',
        'prompt': 'larger',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'from',
        ]),
        'main_answer': 'from',
        'prompt': 'e',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'extremely keen',
          'keenest',
          'most keen',
          'quite keen',
          'rather keen',
          'too keen',
          'very keen',
        ]),
        'main_answer': 'keenest',
        'prompt': 'acerrimam',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'this',
        'choices': list([
          'dog',
          'good',
          'this',
        ]),
        'prompt': 'hic',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'superlative vocative plural masculine',
          'superlative vocative plural masculine',
          'superlative vocative plural masculine',
          'superlative vocative plural masculine',
        ]),
        'dictionary_entry': 'large: ingens, ingentis, (3-1)',
        'main_answer': 'superlative vocative plural masculine',
        'prompt': 'ingentissimi',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'capio',
          'capere',
          'cepi',
        ]),
        'prompt': 'capio',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'hear',
        'choices': list([
          'hear',
          'boy',
          'dog',
        ]),
        'prompt': 'audio',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'ingentissima',
        ]),
        'components': 'superlative vocative singular feminine',
        'main_answer': 'ingentissima',
        'prompt': 'large: ingens, ingentis, (3-1)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'nominative plural feminine',
        ]),
        'dictionary_entry': 'this: hic, haec, hoc',
        'main_answer': 'nominative plural feminine',
        'prompt': 'hae',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'better',
          'more good',
        ]),
        'main_answer': 'better',
        'prompt': 'meliori',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'positive accusative plural neuter',
          'positive accusative plural neuter',
          'positive accusative plural neuter',
        ]),
        'dictionary_entry': 'large: ingens, ingentis, (3-1)',
        'main_answer': 'positive accusative plural neuter',
        'prompt': 'ingentia',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'pluperfect active indicative singular 2nd person',
        ]),
        'dictionary_entry': 'take: capio, capere, cepi',
        'main_answer': 'pluperfect active indicative singular 2nd person',
        'prompt': 'ceperas',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'girl',
        'choices': list([
          'good',
          'girl',
          'name',
        ]),
        'prompt': 'puella',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'by a farmer',
          'by means of a farmer',
          'by means of the farmer',
          'by the farmer',
          'farmer',
          'with a farmer',
          'with the farmer',
        ]),
        'main_answer': 'farmer',
        'prompt': 'agricola',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'dog',
          "dog's",
          'of a dog',
          'of the dog',
        ]),
        'main_answer': 'of the dog',
        'prompt': 'canis',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'this',
        'choices': list([
          'girl',
          'this',
          'keen',
        ]),
        'prompt': 'hic',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'agricolae',
        ]),
        'components': 'vocative plural',
        'main_answer': 'agricolae',
        'prompt': 'farmer: agricola, agricolae, (m)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'keen',
        'choices': list([
          'keen',
          'girl',
          'from',
        ]),
        'prompt': 'acer',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'positive ablative singular masculine',
          'positive ablative singular masculine',
          'positive ablative singular masculine',
          'positive ablative singular masculine',
        ]),
        'dictionary_entry': 'good: bonus, bona, bonum, (2-1-2)',
        'main_answer': 'positive ablative singular masculine',
        'prompt': 'bono',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'ceperat',
        ]),
        'components': 'pluperfect active indicative singular 3rd person',
        'main_answer': 'ceperat',
        'prompt': 'take: capio, capere, cepi',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'ingens',
        'choices': list([
          'levis',
          'ingens',
          'puer',
        ]),
        'prompt': 'large',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'into',
        ]),
        'main_answer': 'into',
        'prompt': 'in',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'levis',
          'leve',
        ]),
        'prompt': 'levis',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'ille',
          'illa',
          'illud',
        ]),
        'prompt': 'ille',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'ille',
        'choices': list([
          'ille',
          'puella',
          'ingens',
        ]),
        'prompt': 'that',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'into',
        'choices': list([
          'into',
          'keen',
          'light',
        ]),
        'prompt': 'in',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'illa',
          'illae',
          'illi',
        ]),
        'main_answer': 'illi',
        'prompt': 'those',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'ablative singular',
          'ablative singular',
          'ablative singular',
        ]),
        'dictionary_entry': 'farmer: agricola, agricolae, (m)',
        'main_answer': 'ablative singular',
        'prompt': 'agricola',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'hic',
          'haec',
          'hoc',
        ]),
        'prompt': 'hic',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'puella',
        'choices': list([
          'nomen',
          'capio',
          'puella',
        ]),
        'prompt': 'girl',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'these',
          'this',
        ]),
        'main_answer': 'this',
        'prompt': 'haec',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'vocative plural',
          'vocative plural',
          'vocative plural',
        ]),
        'dictionary_entry': 'boy: puer, pueri, (m)',
        'main_answer': 'vocative plural',
        'prompt': 'pueri',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'huic',
        ]),
        'components': 'dative singular neuter',
        'main_answer': 'huic',
        'prompt': 'this: hic, haec, hoc',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'extremely light',
          'lightest',
          'most light',
          'quite light',
          'rather light',
          'too light',
          'very light',
        ]),
        'main_answer': 'lightest',
        'prompt': 'levissima',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'pueri',
        ]),
        'main_answer': 'pueri',
        'prompt': 'of a boy',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'cepi',
        ]),
        'main_answer': 'cepi',
        'prompt': 'I took',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'ille',
        'choices': list([
          'ille',
          'capio',
          'in',
        ]),
        'prompt': 'that',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'ingentior',
          'ingentiora',
          'ingentiore',
          'ingentiorem',
          'ingentiores',
          'ingentiori',
          'ingentioribus',
          'ingentioris',
          'ingentiorum',
          'ingentius',
        ]),
        'main_answer': 'ingentior',
        'prompt': 'larger',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'capio',
          'capere',
          'cepi',
        ]),
        'prompt': 'capio',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          "farmer's",
          'farmers',
          'for a farmer',
          'for the farmer',
          'of a farmer',
          'of the farmer',
          'to a farmer',
          'to the farmer',
        ]),
        'main_answer': 'farmers',
        'prompt': 'agricolae',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'that',
        'choices': list([
          'name',
          'keen',
          'that',
        ]),
        'prompt': 'ille',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'canis',
        'choices': list([
          'agricola',
          'canis',
          'bonus',
        ]),
        'prompt': 'dog',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'agricolae',
        ]),
        'main_answer': 'agricolae',
        'prompt': 'to the farmer',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'nominum',
        ]),
        'components': 'genitive plural',
        'main_answer': 'nominum',
        'prompt': 'name: nomen, nominis, (n)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'laetus',
        'choices': list([
          'bonus',
          'laetus',
          'e',
        ]),
        'prompt': 'happy',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'genitive plural',
        ]),
        'dictionary_entry': 'name: nomen, nominis, (n)',
        'main_answer': 'genitive plural',
        'prompt': 'nominum',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'into',
        ]),
        'main_answer': 'into',
        'prompt': 'in',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
  ])
# ---
# name: test_cli_normal.2
  '''
  INFO     root:__main__.py:104 Using random seed '10'.
  INFO     waitress:wasyncore.py:449 Serving on http://127.0.0.1:5500
  DEBUG    urllib3.connectionpool:connectionpool.py:241 Starting new HTTP connection (1): 127.0.0.1:5500
  INFO     src.server.app:app.py:63 Reading vocab list.
  DEBUG    src.core.lego.reader:reader.py:212 Reading line '@ Verb'
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'hear: audio, audire, audivi, auditus'
  DEBUG    src.core.accido._class_verb:_class_verb.py:99 RegularWord(audio, audire, audivi, auditus, hear)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'take: capio, capere, cepi'
  DEBUG    src.core.accido._class_verb:_class_verb.py:99 RegularWord(capio, capere, cepi, , take)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line '@ Noun'
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'girl: puella, puellae, (f)'
  DEBUG    src.core.accido._class_noun:_class_noun.py:106 Noun(puella, puellae, feminine, girl)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'farmer: agricola, agricolae, (m)'
  DEBUG    src.core.accido._class_noun:_class_noun.py:106 Noun(agricola, agricolae, masculine, farmer)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'boy: puer, pueri, (m)'
  DEBUG    src.core.accido._class_noun:_class_noun.py:106 Noun(puer, pueri, masculine, boy)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'dog: canis, canis, (m)'
  DEBUG    src.core.accido._class_noun:_class_noun.py:106 Noun(canis, canis, masculine, dog)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'name: nomen, nominis, (n)'
  DEBUG    src.core.accido._class_noun:_class_noun.py:106 Noun(nomen, nominis, neuter, name)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line '@ Adjective'
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'large: ingens, ingentis, (3-1)'
  DEBUG    src.core.accido._class_adjective:_class_adjective.py:120 Adjective(ingens, ingentis, 1, 3, large)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'light: levis, leve, (3-2)'
  DEBUG    src.core.accido._class_adjective:_class_adjective.py:120 Adjective(levis, leve, 2, 3, light)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'keen: acer, acris, acre, (3-3)'
  DEBUG    src.core.accido._class_adjective:_class_adjective.py:120 Adjective(acer, acris, acre, 3, 3, keen)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'good: bonus, bona, bonum, (212)'
  DEBUG    src.core.accido._class_adjective:_class_adjective.py:120 Adjective(bonus, bona, bonum, None, 212, good)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'happy: laetus, laeta, laetum, (2-1-2)'
  DEBUG    src.core.accido._class_adjective:_class_adjective.py:120 Adjective(laetus, laeta, laetum, None, 212, happy)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line '@ Regular'
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'into: in'
  DEBUG    src.core.accido._class_regularword:_class_regularword.py:46 RegularWord(in, into)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'from: e'
  DEBUG    src.core.accido._class_regularword:_class_regularword.py:46 RegularWord(e, from)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line '@ Pronoun'
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'this: hic, haec, hoc'
  DEBUG    src.core.accido._class_pronoun:_class_pronoun.py:60 Pronoun(hic, this)
  DEBUG    src.core.lego.reader:reader.py:212 Reading line 'that: ille'
  DEBUG    src.core.accido._class_pronoun:_class_pronoun.py:60 Pronoun(ille, that)
  DEBUG    urllib3.connectionpool:connectionpool.py:544 http://127.0.0.1:5500 "POST /send-vocab HTTP/1.1" 200 20
  DEBUG    urllib3.connectionpool:connectionpool.py:241 Starting new HTTP connection (1): 127.0.0.1:5500
  INFO     src.server.app:app.py:111 Validating settings.
  INFO     src.server.app:app.py:126 Returning 50 questions.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordLatToCompQuestion with word 'take: capio, capere, cepi'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type ParseWordLatToCompQuestion with word 'take: capio, capere, cepi' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordLatToCompQuestion with word 'name: nomen, nominis, (n)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type ParseWordLatToCompQuestion with word 'name: nomen, nominis, (n)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type MultipleChoiceEngToLatQuestion with word 'dog: canis, canis, (m)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type MultipleChoiceEngToLatQuestion with word 'dog: canis, canis, (m)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type TypeInEngToLatQuestion with word 'large: ingens, ingentis, (3-1)'.
  DEBUG    src.core.accido._class_adjective:_class_adjective.py:859 ingens.get(comparative, masculine, nominative, singular, adverb=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(large, comparative dative plural masculine, main=False)
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type TypeInEngToLatQuestion with word 'large: ingens, ingentis, (3-1)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type TypeInLatToEngQuestion with word 'from: e'.
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(from, , main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(from, , main=True)
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type TypeInLatToEngQuestion with word 'from: e' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordLatToCompQuestion with word 'into: in'.
  DEBUG    src.core.rogo.asker:asker.py:152 Creating question of type ParseWordLatToCompQuestion with word 'into: in' failed.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type TypeInLatToEngQuestion with word 'keen: acer, acris, acre, (3-3)'.
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(keen, superlative accusative singular feminine, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(keen, superlative accusative singular feminine, main=True)
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type TypeInLatToEngQuestion with word 'keen: acer, acris, acre, (3-3)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type MultipleChoiceLatToEngQuestion with word 'this: hic, haec, hoc'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type MultipleChoiceLatToEngQuestion with word 'this: hic, haec, hoc' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordLatToCompQuestion with word 'large: ingens, ingentis, (3-1)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type ParseWordLatToCompQuestion with word 'large: ingens, ingentis, (3-1)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type PrincipalPartsQuestion with word 'take: capio, capere, cepi'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type PrincipalPartsQuestion with word 'take: capio, capere, cepi' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type MultipleChoiceLatToEngQuestion with word 'hear: audio, audire, audivi, auditus'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type MultipleChoiceLatToEngQuestion with word 'hear: audio, audire, audivi, auditus' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordCompToLatQuestion with word 'large: ingens, ingentis, (3-1)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type ParseWordCompToLatQuestion with word 'large: ingens, ingentis, (3-1)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordLatToCompQuestion with word 'this: hic, haec, hoc'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type ParseWordLatToCompQuestion with word 'this: hic, haec, hoc' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type TypeInLatToEngQuestion with word 'good: bonus, bona, bonum, (2-1-2)'.
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(good, comparative dative singular masculine, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(good, comparative dative singular masculine, main=True)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(good, comparative dative singular feminine, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(good, comparative dative singular feminine, main=True)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(good, comparative dative singular neuter, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(good, comparative dative singular neuter, main=True)
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type TypeInLatToEngQuestion with word 'good: bonus, bona, bonum, (2-1-2)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordLatToCompQuestion with word 'large: ingens, ingentis, (3-1)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type ParseWordLatToCompQuestion with word 'large: ingens, ingentis, (3-1)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordLatToCompQuestion with word 'take: capio, capere, cepi'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type ParseWordLatToCompQuestion with word 'take: capio, capere, cepi' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type MultipleChoiceLatToEngQuestion with word 'girl: puella, puellae, (f)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type MultipleChoiceLatToEngQuestion with word 'girl: puella, puellae, (f)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type TypeInLatToEngQuestion with word 'farmer: agricola, agricolae, (m)'.
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(farmer, nominative singular, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(farmer, nominative singular, main=True)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(farmer, vocative singular, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(farmer, vocative singular, main=True)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(farmer, ablative singular, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(farmer, ablative singular, main=True)
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type TypeInLatToEngQuestion with word 'farmer: agricola, agricolae, (m)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type TypeInLatToEngQuestion with word 'dog: canis, canis, (m)'.
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(dog, nominative singular, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(dog, nominative singular, main=True)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(dog, vocative singular, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(dog, vocative singular, main=True)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(dog, genitive singular, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(dog, genitive singular, main=True)
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type TypeInLatToEngQuestion with word 'dog: canis, canis, (m)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordLatToCompQuestion with word 'from: e'.
  DEBUG    src.core.rogo.asker:asker.py:152 Creating question of type ParseWordLatToCompQuestion with word 'from: e' failed.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type MultipleChoiceLatToEngQuestion with word 'this: hic, haec, hoc'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type MultipleChoiceLatToEngQuestion with word 'this: hic, haec, hoc' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordCompToLatQuestion with word 'farmer: agricola, agricolae, (m)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type ParseWordCompToLatQuestion with word 'farmer: agricola, agricolae, (m)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type MultipleChoiceLatToEngQuestion with word 'keen: acer, acris, acre, (3-3)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type MultipleChoiceLatToEngQuestion with word 'keen: acer, acris, acre, (3-3)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordLatToCompQuestion with word 'good: bonus, bona, bonum, (2-1-2)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type ParseWordLatToCompQuestion with word 'good: bonus, bona, bonum, (2-1-2)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordCompToLatQuestion with word 'take: capio, capere, cepi'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type ParseWordCompToLatQuestion with word 'take: capio, capere, cepi' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type MultipleChoiceEngToLatQuestion with word 'large: ingens, ingentis, (3-1)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type MultipleChoiceEngToLatQuestion with word 'large: ingens, ingentis, (3-1)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type TypeInLatToEngQuestion with word 'into: in'.
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(into, , main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(into, , main=True)
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type TypeInLatToEngQuestion with word 'into: in' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type PrincipalPartsQuestion with word 'light: levis, leve, (3-2)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type PrincipalPartsQuestion with word 'light: levis, leve, (3-2)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type PrincipalPartsQuestion with word 'that: ille, illa, illud'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type PrincipalPartsQuestion with word 'that: ille, illa, illud' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type MultipleChoiceEngToLatQuestion with word 'that: ille, illa, illud'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type MultipleChoiceEngToLatQuestion with word 'that: ille, illa, illud' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type MultipleChoiceLatToEngQuestion with word 'into: in'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type MultipleChoiceLatToEngQuestion with word 'into: in' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type TypeInEngToLatQuestion with word 'that: ille, illa, illud'.
  DEBUG    src.core.accido._class_pronoun:_class_pronoun.py:117 ille.get(masculine, nominative, plural)
  DEBUG    src.core.accido._class_pronoun:_class_pronoun.py:117 ille.get(feminine, nominative, plural)
  DEBUG    src.core.accido._class_pronoun:_class_pronoun.py:117 ille.get(neuter, nominative, plural)
  DEBUG    src.core.accido._class_pronoun:_class_pronoun.py:117 ille.get(masculine, nominative, plural)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(that, nominative plural masculine, main=False)
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type TypeInEngToLatQuestion with word 'that: ille, illa, illud' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordLatToCompQuestion with word 'farmer: agricola, agricolae, (m)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type ParseWordLatToCompQuestion with word 'farmer: agricola, agricolae, (m)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type PrincipalPartsQuestion with word 'this: hic, haec, hoc'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type PrincipalPartsQuestion with word 'this: hic, haec, hoc' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type MultipleChoiceEngToLatQuestion with word 'girl: puella, puellae, (f)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type MultipleChoiceEngToLatQuestion with word 'girl: puella, puellae, (f)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type TypeInLatToEngQuestion with word 'this: hic, haec, hoc'.
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(this, nominative singular feminine, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(this, nominative singular feminine, main=True)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(this, nominative plural neuter, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(this, nominative plural neuter, main=True)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(this, accusative plural neuter, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(this, accusative plural neuter, main=True)
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type TypeInLatToEngQuestion with word 'this: hic, haec, hoc' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordLatToCompQuestion with word 'boy: puer, pueri, (m)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type ParseWordLatToCompQuestion with word 'boy: puer, pueri, (m)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordCompToLatQuestion with word 'this: hic, haec, hoc'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type ParseWordCompToLatQuestion with word 'this: hic, haec, hoc' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type TypeInLatToEngQuestion with word 'light: levis, leve, (3-2)'.
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(light, superlative nominative singular feminine, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(light, superlative nominative singular feminine, main=True)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(light, superlative vocative singular feminine, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(light, superlative vocative singular feminine, main=True)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(light, superlative ablative singular feminine, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(light, superlative ablative singular feminine, main=True)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(light, superlative nominative plural neuter, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(light, superlative nominative plural neuter, main=True)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(light, superlative vocative plural neuter, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(light, superlative vocative plural neuter, main=True)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(light, superlative accusative plural neuter, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(light, superlative accusative plural neuter, main=True)
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type TypeInLatToEngQuestion with word 'light: levis, leve, (3-2)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordCompToLatQuestion with word 'from: e'.
  DEBUG    src.core.rogo.asker:asker.py:152 Creating question of type ParseWordCompToLatQuestion with word 'from: e' failed.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type TypeInEngToLatQuestion with word 'boy: puer, pueri, (m)'.
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(boy, genitive singular, main=False)
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type TypeInEngToLatQuestion with word 'boy: puer, pueri, (m)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type TypeInEngToLatQuestion with word 'take: capio, capere, cepi'.
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(take, perfect active indicative singular 1st person, main=False)
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type TypeInEngToLatQuestion with word 'take: capio, capere, cepi' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type MultipleChoiceEngToLatQuestion with word 'that: ille, illa, illud'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type MultipleChoiceEngToLatQuestion with word 'that: ille, illa, illud' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type TypeInEngToLatQuestion with word 'large: ingens, ingentis, (3-1)'.
  DEBUG    src.core.accido._class_adjective:_class_adjective.py:859 ingens.get(comparative, masculine, nominative, singular, adverb=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(large, comparative vocative singular masculine, main=False)
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type TypeInEngToLatQuestion with word 'large: ingens, ingentis, (3-1)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type PrincipalPartsQuestion with word 'take: capio, capere, cepi'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type PrincipalPartsQuestion with word 'take: capio, capere, cepi' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type TypeInLatToEngQuestion with word 'farmer: agricola, agricolae, (m)'.
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(farmer, genitive singular, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(farmer, genitive singular, main=True)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(farmer, dative singular, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(farmer, dative singular, main=True)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(farmer, nominative plural, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(farmer, nominative plural, main=True)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(farmer, vocative plural, main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(farmer, vocative plural, main=True)
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type TypeInLatToEngQuestion with word 'farmer: agricola, agricolae, (m)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type MultipleChoiceLatToEngQuestion with word 'that: ille, illa, illud'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type MultipleChoiceLatToEngQuestion with word 'that: ille, illa, illud' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type MultipleChoiceEngToLatQuestion with word 'dog: canis, canis, (m)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type MultipleChoiceEngToLatQuestion with word 'dog: canis, canis, (m)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type TypeInEngToLatQuestion with word 'farmer: agricola, agricolae, (m)'.
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(farmer, dative singular, main=False)
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type TypeInEngToLatQuestion with word 'farmer: agricola, agricolae, (m)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordLatToCompQuestion with word 'from: e'.
  DEBUG    src.core.rogo.asker:asker.py:152 Creating question of type ParseWordLatToCompQuestion with word 'from: e' failed.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordCompToLatQuestion with word 'name: nomen, nominis, (n)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type ParseWordCompToLatQuestion with word 'name: nomen, nominis, (n)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type MultipleChoiceEngToLatQuestion with word 'happy: laetus, laeta, laetum, (2-1-2)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type MultipleChoiceEngToLatQuestion with word 'happy: laetus, laeta, laetum, (2-1-2)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type ParseWordLatToCompQuestion with word 'name: nomen, nominis, (n)'.
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type ParseWordLatToCompQuestion with word 'name: nomen, nominis, (n)' succeeded.
  DEBUG    src.core.rogo.asker:asker.py:100 Creating new question of type TypeInLatToEngQuestion with word 'into: in'.
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(into, , main=False)
  DEBUG    src.core.transfero.words:words.py:59 find_inflection(into, , main=True)
  INFO     src.core.rogo.asker:asker.py:142 Creating question of type TypeInLatToEngQuestion with word 'into: in' succeeded.
  DEBUG    urllib3.connectionpool:connectionpool.py:544 http://127.0.0.1:5500 "POST /session HTTP/1.1" 200 9971
  
  '''
# ---
