# serializer version: 1
# name: test_cli_error_config
  'Vocab list received.'
# ---
# name: test_cli_error_config.1
  "Bad request: 400 Bad Request: The settings provided are not valid: 'number-of-questions' (InvalidSettingsError)"
# ---
# name: test_cli_error_config.2
  '''
  INFO     root: Using random seed '10'.
  INFO     waitress: Serving on http://127.0.0.1:5502
  DEBUG    urllib3.connectionpool: Starting new HTTP connection (1): 127.0.0.1:5502
  INFO     src.server.app: Reading vocab list.
  DEBUG    src.core.lego.reader: Reading line '@ Verb'
  DEBUG    src.core.lego.reader: Reading line 'hear: audio, audire, audivi, auditus'
  DEBUG    src.core.accido._class_verb: RegularWord(audio, audire, audivi, auditus, meaning=hear)
  DEBUG    src.core.lego.reader: Reading line 'take: capio, capere, cepi'
  DEBUG    src.core.accido._class_verb: RegularWord(capio, capere, cepi, None, meaning=take)
  DEBUG    src.core.lego.reader: Reading line 'say: inquam'
  DEBUG    src.core.accido._class_verb: RegularWord(inquam, None, None, None, meaning=say)
  DEBUG    src.core.lego.reader: Reading line '@ Noun'
  DEBUG    src.core.lego.reader: Reading line 'girl: puella, puellae, (f)'
  DEBUG    src.core.accido._class_noun: Noun(puella, puellae, gender=feminine, meaning=girl)
  DEBUG    src.core.lego.reader: Reading line 'farmer: agricola, agricolae, (m)'
  DEBUG    src.core.accido._class_noun: Noun(agricola, agricolae, gender=masculine, meaning=farmer)
  DEBUG    src.core.lego.reader: Reading line 'boy: puer, pueri, (m)'
  DEBUG    src.core.accido._class_noun: Noun(puer, pueri, gender=masculine, meaning=boy)
  DEBUG    src.core.lego.reader: Reading line 'dog: canis, canis, (m)'
  DEBUG    src.core.accido._class_noun: Noun(canis, canis, gender=masculine, meaning=dog)
  DEBUG    src.core.lego.reader: Reading line 'name: nomen, nominis, (n)'
  DEBUG    src.core.accido._class_noun: Noun(nomen, nominis, gender=neuter, meaning=name)
  DEBUG    src.core.lego.reader: Reading line 'I: ego'
  DEBUG    src.core.accido._class_noun: Noun(ego, None, gender=None, meaning=I)
  DEBUG    src.core.lego.reader: Reading line '@ Adjective'
  DEBUG    src.core.lego.reader: Reading line 'large: ingens, ingentis, (3-1)'
  DEBUG    src.core.accido._class_adjective: Adjective(ingens, ingentis, termination=1, declension=3, meaning=large)
  DEBUG    src.core.lego.reader: Reading line 'light: levis, leve, (3-2)'
  DEBUG    src.core.accido._class_adjective: Adjective(levis, leve, termination=2, declension=3, meaning=light)
  DEBUG    src.core.lego.reader: Reading line 'keen: acer, acris, acre, (3-3)'
  DEBUG    src.core.accido._class_adjective: Adjective(acer, acris, acre, termination=3, declension=3, meaning=keen)
  DEBUG    src.core.lego.reader: Reading line 'good: bonus, bona, bonum, (212)'
  DEBUG    src.core.accido._class_adjective: Adjective(bonus, bona, bonum, termination=None, declension=212, meaning=good)
  DEBUG    src.core.lego.reader: Reading line 'happy: laetus, laeta, laetum, (2-1-2)'
  DEBUG    src.core.accido._class_adjective: Adjective(laetus, laeta, laetum, termination=None, declension=212, meaning=happy)
  DEBUG    src.core.lego.reader: Reading line '@ Regular'
  DEBUG    src.core.lego.reader: Reading line 'into: in'
  DEBUG    src.core.accido._class_regularword: RegularWord(in, meaning=into)
  DEBUG    src.core.lego.reader: Reading line 'from: e'
  DEBUG    src.core.accido._class_regularword: RegularWord(e, meaning=from)
  DEBUG    src.core.lego.reader: Reading line '@ Pronoun'
  DEBUG    src.core.lego.reader: Reading line 'this: hic, haec, hoc'
  DEBUG    src.core.accido._class_pronoun: Pronoun(hic, meaning=this)
  DEBUG    src.core.lego.reader: Reading line 'that: ille'
  DEBUG    src.core.accido._class_pronoun: Pronoun(ille, meaning=that)
  DEBUG    urllib3.connectionpool: http://127.0.0.1:5502 "POST /send-vocab HTTP/1.1" 200 20
  DEBUG    urllib3.connectionpool: Starting new HTTP connection (1): 127.0.0.1:5502
  INFO     src.server.app: Validating settings.
  ERROR    src.server.app: The settings provided are not valid: 'number-of-questions' (InvalidSettingsError)
  DEBUG    urllib3.connectionpool: http://127.0.0.1:5502 "POST /session HTTP/1.1" 400 111
  
  '''
# ---
# name: test_cli_error_list
  '''
  Bad request: 400 Bad Request: InvalidVocabFileFormatError: Invalid part of speech: 'Cause an error'
  Traceback (most recent call last):
    File "/Users/robertduong/coding/vocab-tuister/src/server/app.py", line 63, in send_vocab
      _read_vocab_file_internal(vocab_list_text),
      ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
    File "/Users/robertduong/coding/vocab-tuister/src/core/lego/reader.py", line 186, in _read_vocab_file_internal
      raise InvalidVocabFileFormatError(
          f"Invalid part of speech: '{line[1:].strip()}'"
      )
  src.core.lego.exceptions.InvalidVocabFileFormatError: Invalid part of speech: 'Cause an error'
  
  '''
# ---
# name: test_cli_error_list.1
  'Bad request: 400 Bad Request: Vocab list has not been provided.'
# ---
# name: test_cli_error_list.2
  '''
  INFO     root: Using random seed '10'.
  INFO     waitress: Serving on http://127.0.0.1:5501
  DEBUG    urllib3.connectionpool: Starting new HTTP connection (1): 127.0.0.1:5501
  INFO     src.server.app: Reading vocab list.
  DEBUG    src.core.lego.reader: Reading line '@ Cause an error'
  ERROR    src.server.app: InvalidVocabFileFormatError: Invalid part of speech: 'Cause an error'
  Traceback (most recent call last):
    File "/Users/robertduong/coding/vocab-tuister/src/server/app.py", line 63, in send_vocab
      _read_vocab_file_internal(vocab_list_text),
      ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
    File "/Users/robertduong/coding/vocab-tuister/src/core/lego/reader.py", line 186, in _read_vocab_file_internal
      raise InvalidVocabFileFormatError(
          f"Invalid part of speech: '{line[1:].strip()}'"
      )
  src.core.lego.exceptions.InvalidVocabFileFormatError: Invalid part of speech: 'Cause an error'
  
  DEBUG    urllib3.connectionpool: http://127.0.0.1:5501 "POST /send-vocab HTTP/1.1" 400 630
  DEBUG    urllib3.connectionpool: Starting new HTTP connection (1): 127.0.0.1:5501
  ERROR    src.server.app: Vocab list has not been provided.
  DEBUG    urllib3.connectionpool: http://127.0.0.1:5501 "POST /session HTTP/1.1" 400 63
  
  '''
# ---
# name: test_cli_list_badpos
  "Bad request: 400 Bad Request: Invalid part of speech: 'Cause an error' (InvalidVocabFileFormatError)"
# ---
# name: test_cli_list_badpos.1
  'Bad request: 400 Bad Request: Vocab list has not been provided.'
# ---
# name: test_cli_list_badpos.2
  '''
  INFO     root:__main__.py:91 Using random seed '10'.
  INFO     waitress:wasyncore.py:449 Serving on http://127.0.0.1:5501
  DEBUG    urllib3.connectionpool:connectionpool.py:241 Starting new HTTP connection (1): 127.0.0.1:5501
  INFO     src.server.app:app.py:84 Reading vocab list.
  DEBUG    src.core.lego.reader:reader.py:212 Reading line '@ Cause an error'
  ERROR    src.server.app:app.py:46 Invalid part of speech: 'Cause an error' (InvalidVocabFileFormatError)
  DEBUG    urllib3.connectionpool:connectionpool.py:544 http://127.0.0.1:5501 "POST /send-vocab HTTP/1.1" 400 100
  DEBUG    urllib3.connectionpool:connectionpool.py:241 Starting new HTTP connection (1): 127.0.0.1:5501
  ERROR    src.server.app:app.py:46 Vocab list has not been provided.
  DEBUG    urllib3.connectionpool:connectionpool.py:544 http://127.0.0.1:5501 "POST /session HTTP/1.1" 400 63
  
  '''
# ---
# name: test_cli_normal
  'Vocab list received.'
# ---
# name: test_cli_normal.1
  list([
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'imperfect active subjunctive plural 1st person',
        ]),
        'dictionary_entry': 'take: capio, capere, cepi',
        'main_answer': 'imperfect active subjunctive plural 1st person',
        'prompt': 'caperemus',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'hear',
        'choices': list([
          'this',
          'hear',
          'large',
        ]),
        'prompt': 'audio',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'capio',
          'capere',
          'cepi',
        ]),
        'prompt': 'capio',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'say',
        'choices': list([
          'into',
          'take',
          'say',
        ]),
        'prompt': 'inquam',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'comparative nominative singular masculine',
          'comparative nominative singular masculine',
          'comparative nominative singular masculine',
          'comparative nominative singular masculine',
        ]),
        'dictionary_entry': 'good: bonus, bona, bonum, (2-1-2)',
        'main_answer': 'comparative nominative singular masculine',
        'prompt': 'melior',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'accusative singular',
          'accusative singular',
        ]),
        'dictionary_entry': 'I: ego, (irregular)',
        'main_answer': 'accusative singular',
        'prompt': 'me',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'ingentior',
          'ingentiora',
          'ingentiore',
          'ingentiorem',
          'ingentiores',
          'ingentiori',
          'ingentioribus',
          'ingentioris',
          'ingentiorum',
          'ingentius',
        ]),
        'main_answer': 'ingentior',
        'prompt': 'larger',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'into',
        ]),
        'main_answer': 'into',
        'prompt': 'in',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'bonus',
        'choices': list([
          'audio',
          'nomen',
          'bonus',
        ]),
        'prompt': 'good',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'ingens',
          'ingentis',
        ]),
        'prompt': 'ingens',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'keen',
        ]),
        'main_answer': 'keen',
        'prompt': 'acria',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'nominative plural masculine',
          'nominative plural masculine',
          'nominative plural masculine',
          'nominative plural masculine',
        ]),
        'dictionary_entry': 'that: ille, illa, illud',
        'main_answer': 'nominative plural masculine',
        'prompt': 'illi',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'e',
        'choices': list([
          'puer',
          'levis',
          'e',
        ]),
        'prompt': 'from',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'nomen',
        'choices': list([
          'hic',
          'nomen',
          'capio',
        ]),
        'prompt': 'name',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'of that',
        ]),
        'main_answer': 'of that',
        'prompt': 'illius',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'bonus',
          'bona',
          'bonum',
        ]),
        'prompt': 'bonus',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'acer',
          'acris',
          'acre',
        ]),
        'prompt': 'acer',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'agricola',
        'choices': list([
          'puella',
          'e',
          'agricola',
        ]),
        'prompt': 'farmer',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'comparative ablative singular masculine',
          'comparative ablative singular masculine',
          'comparative ablative singular masculine',
        ]),
        'dictionary_entry': 'keen: acer, acris, acre, (3-3)',
        'main_answer': 'comparative ablative singular masculine',
        'prompt': 'acriore',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'into',
        'choices': list([
          'boy',
          'farmer',
          'into',
        ]),
        'prompt': 'in',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'pueris',
        ]),
        'main_answer': 'pueris',
        'prompt': 'for the boys',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'dative singular',
          'dative singular',
        ]),
        'dictionary_entry': 'boy: puer, pueri, (m)',
        'main_answer': 'dative singular',
        'prompt': 'puero',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'positive dative singular masculine',
          'positive dative singular masculine',
          'positive dative singular masculine',
          'positive dative singular masculine',
          'positive dative singular masculine',
          'positive dative singular masculine',
        ]),
        'dictionary_entry': 'light: levis, leve, (3-2)',
        'main_answer': 'positive dative singular masculine',
        'prompt': 'levi',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'audio',
          'audire',
          'audivi',
          'auditus',
        ]),
        'prompt': 'audio',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'ceperat',
        ]),
        'components': 'pluperfect active indicative singular 3rd person',
        'main_answer': 'ceperat',
        'prompt': 'take: capio, capere, cepi',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'nomen',
        'choices': list([
          'e',
          'nomen',
          'ingens',
        ]),
        'prompt': 'name',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'better',
          'more good',
        ]),
        'main_answer': 'better',
        'prompt': 'melioris',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'has',
        ]),
        'components': 'accusative plural feminine',
        'main_answer': 'has',
        'prompt': 'this: hic, haec, hoc',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'e',
        'choices': list([
          'e',
          'puer',
          'hic',
        ]),
        'prompt': 'from',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'good',
        'choices': list([
          'happy',
          'good',
          'keen',
        ]),
        'prompt': 'bonus',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'nominative plural masculine',
          'nominative plural masculine',
          'nominative plural masculine',
          'nominative plural masculine',
        ]),
        'dictionary_entry': 'that: ille, illa, illud',
        'main_answer': 'nominative plural masculine',
        'prompt': 'illi',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'happy',
        ]),
        'main_answer': 'happy',
        'prompt': 'laeto',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'inquam',
        'choices': list([
          'bonus',
          'puella',
          'inquam',
        ]),
        'prompt': 'say',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'into',
        ]),
        'main_answer': 'into',
        'prompt': 'in',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'into',
        ]),
        'main_answer': 'into',
        'prompt': 'in',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'leve',
          'levem',
          'leves',
          'levi',
          'levia',
          'levibus',
          'levis',
          'levium',
        ]),
        'main_answer': 'levis',
        'prompt': 'light',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'laetissimis',
        ]),
        'components': 'superlative ablative plural masculine',
        'main_answer': 'laetissimis',
        'prompt': 'happy: laetus, laeta, laetum, (2-1-2)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'hic',
          'haec',
          'hoc',
        ]),
        'prompt': 'hic',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'agricolae',
        ]),
        'main_answer': 'agricolae',
        'prompt': 'of a farmer',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'cepi',
        ]),
        'main_answer': 'cepi',
        'prompt': 'I took',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'e',
        'choices': list([
          'ingens',
          'e',
          'puella',
        ]),
        'prompt': 'from',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'ingens',
        'choices': list([
          'puella',
          'ingens',
          'capio',
        ]),
        'prompt': 'large',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'from',
        'choices': list([
          'dog',
          'from',
          'good',
        ]),
        'prompt': 'e',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'nominative singular',
          'nominative singular',
          'nominative singular',
        ]),
        'dictionary_entry': 'dog: canis, canis, (m)',
        'main_answer': 'nominative singular',
        'prompt': 'canis',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'puellae',
        ]),
        'main_answer': 'puellae',
        'prompt': 'to the girl',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'huic',
        ]),
        'main_answer': 'huic',
        'prompt': 'to this',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'that',
        'choices': list([
          'keen',
          'that',
          'girl',
        ]),
        'prompt': 'ille',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'genitive plural',
        ]),
        'dictionary_entry': 'dog: canis, canis, (m)',
        'main_answer': 'genitive plural',
        'prompt': 'canium',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'happier',
          'more happy',
        ]),
        'main_answer': 'happier',
        'prompt': 'laetior',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'he was saying',
          'it was saying',
          'she was saying',
        ]),
        'main_answer': 'he was saying',
        'prompt': 'inquiebat',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
  ])
# ---
# name: test_cli_normal.2
  '''
  INFO     root: Using random seed '10'.
  INFO     waitress: Serving on http://127.0.0.1:5500
  DEBUG    urllib3.connectionpool: Starting new HTTP connection (1): 127.0.0.1:5500
  INFO     src.server.app: Reading vocab list.
  DEBUG    src.core.lego.reader: Reading line '@ Verb'
  DEBUG    src.core.lego.reader: Reading line 'hear: audio, audire, audivi, auditus'
  DEBUG    src.core.accido._class_verb: RegularWord(audio, audire, audivi, auditus, meaning=hear)
  DEBUG    src.core.lego.reader: Reading line 'take: capio, capere, cepi'
  DEBUG    src.core.accido._class_verb: RegularWord(capio, capere, cepi, None, meaning=take)
  DEBUG    src.core.lego.reader: Reading line 'say: inquam'
  DEBUG    src.core.accido._class_verb: RegularWord(inquam, None, None, None, meaning=say)
  DEBUG    src.core.lego.reader: Reading line '@ Noun'
  DEBUG    src.core.lego.reader: Reading line 'girl: puella, puellae, (f)'
  DEBUG    src.core.accido._class_noun: Noun(puella, puellae, gender=feminine, meaning=girl)
  DEBUG    src.core.lego.reader: Reading line 'farmer: agricola, agricolae, (m)'
  DEBUG    src.core.accido._class_noun: Noun(agricola, agricolae, gender=masculine, meaning=farmer)
  DEBUG    src.core.lego.reader: Reading line 'boy: puer, pueri, (m)'
  DEBUG    src.core.accido._class_noun: Noun(puer, pueri, gender=masculine, meaning=boy)
  DEBUG    src.core.lego.reader: Reading line 'dog: canis, canis, (m)'
  DEBUG    src.core.accido._class_noun: Noun(canis, canis, gender=masculine, meaning=dog)
  DEBUG    src.core.lego.reader: Reading line 'name: nomen, nominis, (n)'
  DEBUG    src.core.accido._class_noun: Noun(nomen, nominis, gender=neuter, meaning=name)
  DEBUG    src.core.lego.reader: Reading line 'I: ego'
  DEBUG    src.core.accido._class_noun: Noun(ego, None, gender=None, meaning=I)
  DEBUG    src.core.lego.reader: Reading line '@ Adjective'
  DEBUG    src.core.lego.reader: Reading line 'large: ingens, ingentis, (3-1)'
  DEBUG    src.core.accido._class_adjective: Adjective(ingens, ingentis, termination=1, declension=3, meaning=large)
  DEBUG    src.core.lego.reader: Reading line 'light: levis, leve, (3-2)'
  DEBUG    src.core.accido._class_adjective: Adjective(levis, leve, termination=2, declension=3, meaning=light)
  DEBUG    src.core.lego.reader: Reading line 'keen: acer, acris, acre, (3-3)'
  DEBUG    src.core.accido._class_adjective: Adjective(acer, acris, acre, termination=3, declension=3, meaning=keen)
  DEBUG    src.core.lego.reader: Reading line 'good: bonus, bona, bonum, (212)'
  DEBUG    src.core.accido._class_adjective: Adjective(bonus, bona, bonum, termination=None, declension=212, meaning=good)
  DEBUG    src.core.lego.reader: Reading line 'happy: laetus, laeta, laetum, (2-1-2)'
  DEBUG    src.core.accido._class_adjective: Adjective(laetus, laeta, laetum, termination=None, declension=212, meaning=happy)
  DEBUG    src.core.lego.reader: Reading line '@ Regular'
  DEBUG    src.core.lego.reader: Reading line 'into: in'
  DEBUG    src.core.accido._class_regularword: RegularWord(in, meaning=into)
  DEBUG    src.core.lego.reader: Reading line 'from: e'
  DEBUG    src.core.accido._class_regularword: RegularWord(e, meaning=from)
  DEBUG    src.core.lego.reader: Reading line '@ Pronoun'
  DEBUG    src.core.lego.reader: Reading line 'this: hic, haec, hoc'
  DEBUG    src.core.accido._class_pronoun: Pronoun(hic, meaning=this)
  DEBUG    src.core.lego.reader: Reading line 'that: ille'
  DEBUG    src.core.accido._class_pronoun: Pronoun(ille, meaning=that)
  DEBUG    urllib3.connectionpool: http://127.0.0.1:5500 "POST /send-vocab HTTP/1.1" 200 20
  DEBUG    urllib3.connectionpool: Starting new HTTP connection (1): 127.0.0.1:5500
  INFO     src.server.app: Validating settings.
  INFO     src.server.app: Returning 50 questions.
  DEBUG    src.core.rogo.asker: Creating new question of type ParseWordLatToCompQuestion with word 'take: capio, capere, cepi'.
  INFO     src.core.rogo.asker: Creating question of type ParseWordLatToCompQuestion with word 'take: capio, capere, cepi' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type MultipleChoiceLatToEngQuestion with word 'hear: audio, audire, audivi, auditus'.
  INFO     src.core.rogo.asker: Creating question of type MultipleChoiceLatToEngQuestion with word 'hear: audio, audire, audivi, auditus' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type PrincipalPartsQuestion with word 'take: capio, capere, cepi'.
  INFO     src.core.rogo.asker: Creating question of type PrincipalPartsQuestion with word 'take: capio, capere, cepi' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type ParseWordCompToLatQuestion with word 'from: e'.
  DEBUG    src.core.rogo.asker: Creating question of type ParseWordCompToLatQuestion with word 'from: e' failed.
  DEBUG    src.core.rogo.asker: Creating new question of type MultipleChoiceLatToEngQuestion with word 'say: inquam'.
  INFO     src.core.rogo.asker: Creating question of type MultipleChoiceLatToEngQuestion with word 'say: inquam' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type ParseWordLatToCompQuestion with word 'good: bonus, bona, bonum, (2-1-2)'.
  INFO     src.core.rogo.asker: Creating question of type ParseWordLatToCompQuestion with word 'good: bonus, bona, bonum, (2-1-2)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type ParseWordLatToCompQuestion with word 'I: ego, (irregular)'.
  INFO     src.core.rogo.asker: Creating question of type ParseWordLatToCompQuestion with word 'I: ego, (irregular)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type TypeInEngToLatQuestion with word 'large: ingens, ingentis, (3-1)'.
  DEBUG    src.core.accido._class_adjective: ingens.get(comparative, masculine, nominative, singular, adverb=False)
  DEBUG    src.core.transfero.words: find_inflection(large, comparative dative plural masculine, main=False)
  INFO     src.core.rogo.asker: Creating question of type TypeInEngToLatQuestion with word 'large: ingens, ingentis, (3-1)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type TypeInLatToEngQuestion with word 'into: in'.
  DEBUG    src.core.transfero.words: find_inflection(into, , main=False)
  DEBUG    src.core.transfero.words: find_inflection(into, , main=True)
  INFO     src.core.rogo.asker: Creating question of type TypeInLatToEngQuestion with word 'into: in' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type MultipleChoiceEngToLatQuestion with word 'good: bonus, bona, bonum, (2-1-2)'.
  INFO     src.core.rogo.asker: Creating question of type MultipleChoiceEngToLatQuestion with word 'good: bonus, bona, bonum, (2-1-2)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type PrincipalPartsQuestion with word 'large: ingens, ingentis, (3-1)'.
  INFO     src.core.rogo.asker: Creating question of type PrincipalPartsQuestion with word 'large: ingens, ingentis, (3-1)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type TypeInLatToEngQuestion with word 'keen: acer, acris, acre, (3-3)'.
  DEBUG    src.core.transfero.words: find_inflection(keen, positive nominative plural neuter, main=False)
  DEBUG    src.core.transfero.words: find_inflection(keen, positive nominative plural neuter, main=True)
  DEBUG    src.core.transfero.words: find_inflection(keen, positive vocative plural neuter, main=False)
  DEBUG    src.core.transfero.words: find_inflection(keen, positive vocative plural neuter, main=True)
  DEBUG    src.core.transfero.words: find_inflection(keen, positive accusative plural neuter, main=False)
  DEBUG    src.core.transfero.words: find_inflection(keen, positive accusative plural neuter, main=True)
  INFO     src.core.rogo.asker: Creating question of type TypeInLatToEngQuestion with word 'keen: acer, acris, acre, (3-3)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type ParseWordLatToCompQuestion with word 'that: ille, illa, illud'.
  INFO     src.core.rogo.asker: Creating question of type ParseWordLatToCompQuestion with word 'that: ille, illa, illud' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type MultipleChoiceEngToLatQuestion with word 'from: e'.
  INFO     src.core.rogo.asker: Creating question of type MultipleChoiceEngToLatQuestion with word 'from: e' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type MultipleChoiceEngToLatQuestion with word 'name: nomen, nominis, (n)'.
  INFO     src.core.rogo.asker: Creating question of type MultipleChoiceEngToLatQuestion with word 'name: nomen, nominis, (n)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type TypeInLatToEngQuestion with word 'that: ille, illa, illud'.
  DEBUG    src.core.transfero.words: find_inflection(that, genitive singular masculine, main=False)
  DEBUG    src.core.transfero.words: find_inflection(that, genitive singular masculine, main=True)
  DEBUG    src.core.transfero.words: find_inflection(that, genitive singular feminine, main=False)
  DEBUG    src.core.transfero.words: find_inflection(that, genitive singular feminine, main=True)
  DEBUG    src.core.transfero.words: find_inflection(that, genitive singular neuter, main=False)
  DEBUG    src.core.transfero.words: find_inflection(that, genitive singular neuter, main=True)
  INFO     src.core.rogo.asker: Creating question of type TypeInLatToEngQuestion with word 'that: ille, illa, illud' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type PrincipalPartsQuestion with word 'good: bonus, bona, bonum, (2-1-2)'.
  INFO     src.core.rogo.asker: Creating question of type PrincipalPartsQuestion with word 'good: bonus, bona, bonum, (2-1-2)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type PrincipalPartsQuestion with word 'keen: acer, acris, acre, (3-3)'.
  INFO     src.core.rogo.asker: Creating question of type PrincipalPartsQuestion with word 'keen: acer, acris, acre, (3-3)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type MultipleChoiceEngToLatQuestion with word 'farmer: agricola, agricolae, (m)'.
  INFO     src.core.rogo.asker: Creating question of type MultipleChoiceEngToLatQuestion with word 'farmer: agricola, agricolae, (m)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type ParseWordLatToCompQuestion with word 'keen: acer, acris, acre, (3-3)'.
  INFO     src.core.rogo.asker: Creating question of type ParseWordLatToCompQuestion with word 'keen: acer, acris, acre, (3-3)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type MultipleChoiceLatToEngQuestion with word 'into: in'.
  INFO     src.core.rogo.asker: Creating question of type MultipleChoiceLatToEngQuestion with word 'into: in' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type ParseWordCompToLatQuestion with word 'into: in'.
  DEBUG    src.core.rogo.asker: Creating question of type ParseWordCompToLatQuestion with word 'into: in' failed.
  DEBUG    src.core.rogo.asker: Creating new question of type TypeInEngToLatQuestion with word 'boy: puer, pueri, (m)'.
  DEBUG    src.core.transfero.words: find_inflection(boy, dative plural, main=False)
  INFO     src.core.rogo.asker: Creating question of type TypeInEngToLatQuestion with word 'boy: puer, pueri, (m)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type ParseWordLatToCompQuestion with word 'boy: puer, pueri, (m)'.
  INFO     src.core.rogo.asker: Creating question of type ParseWordLatToCompQuestion with word 'boy: puer, pueri, (m)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type ParseWordLatToCompQuestion with word 'light: levis, leve, (3-2)'.
  INFO     src.core.rogo.asker: Creating question of type ParseWordLatToCompQuestion with word 'light: levis, leve, (3-2)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type PrincipalPartsQuestion with word 'hear: audio, audire, audivi, auditus'.
  INFO     src.core.rogo.asker: Creating question of type PrincipalPartsQuestion with word 'hear: audio, audire, audivi, auditus' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type ParseWordCompToLatQuestion with word 'take: capio, capere, cepi'.
  INFO     src.core.rogo.asker: Creating question of type ParseWordCompToLatQuestion with word 'take: capio, capere, cepi' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type MultipleChoiceEngToLatQuestion with word 'name: nomen, nominis, (n)'.
  INFO     src.core.rogo.asker: Creating question of type MultipleChoiceEngToLatQuestion with word 'name: nomen, nominis, (n)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type TypeInLatToEngQuestion with word 'good: bonus, bona, bonum, (2-1-2)'.
  DEBUG    src.core.transfero.words: find_inflection(good, comparative genitive singular masculine, main=False)
  DEBUG    src.core.transfero.words: find_inflection(good, comparative genitive singular masculine, main=True)
  DEBUG    src.core.transfero.words: find_inflection(good, comparative genitive singular feminine, main=False)
  DEBUG    src.core.transfero.words: find_inflection(good, comparative genitive singular feminine, main=True)
  DEBUG    src.core.transfero.words: find_inflection(good, comparative genitive singular neuter, main=False)
  DEBUG    src.core.transfero.words: find_inflection(good, comparative genitive singular neuter, main=True)
  INFO     src.core.rogo.asker: Creating question of type TypeInLatToEngQuestion with word 'good: bonus, bona, bonum, (2-1-2)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type ParseWordCompToLatQuestion with word 'this: hic, haec, hoc'.
  INFO     src.core.rogo.asker: Creating question of type ParseWordCompToLatQuestion with word 'this: hic, haec, hoc' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type PrincipalPartsQuestion with word 'from: e'.
  DEBUG    src.core.rogo.asker: Creating question of type PrincipalPartsQuestion with word 'from: e' failed.
  DEBUG    src.core.rogo.asker: Creating new question of type MultipleChoiceEngToLatQuestion with word 'from: e'.
  INFO     src.core.rogo.asker: Creating question of type MultipleChoiceEngToLatQuestion with word 'from: e' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type MultipleChoiceLatToEngQuestion with word 'good: bonus, bona, bonum, (2-1-2)'.
  INFO     src.core.rogo.asker: Creating question of type MultipleChoiceLatToEngQuestion with word 'good: bonus, bona, bonum, (2-1-2)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type ParseWordLatToCompQuestion with word 'that: ille, illa, illud'.
  INFO     src.core.rogo.asker: Creating question of type ParseWordLatToCompQuestion with word 'that: ille, illa, illud' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type TypeInLatToEngQuestion with word 'happy: laetus, laeta, laetum, (2-1-2)'.
  DEBUG    src.core.transfero.words: find_inflection(happy, positive dative singular masculine, main=False)
  DEBUG    src.core.transfero.words: find_inflection(happy, positive dative singular masculine, main=True)
  DEBUG    src.core.transfero.words: find_inflection(happy, positive ablative singular masculine, main=False)
  DEBUG    src.core.transfero.words: find_inflection(happy, positive ablative singular masculine, main=True)
  DEBUG    src.core.transfero.words: find_inflection(happy, positive dative singular neuter, main=False)
  DEBUG    src.core.transfero.words: find_inflection(happy, positive dative singular neuter, main=True)
  DEBUG    src.core.transfero.words: find_inflection(happy, positive ablative singular neuter, main=False)
  DEBUG    src.core.transfero.words: find_inflection(happy, positive ablative singular neuter, main=True)
  INFO     src.core.rogo.asker: Creating question of type TypeInLatToEngQuestion with word 'happy: laetus, laeta, laetum, (2-1-2)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type PrincipalPartsQuestion with word 'into: in'.
  DEBUG    src.core.rogo.asker: Creating question of type PrincipalPartsQuestion with word 'into: in' failed.
  DEBUG    src.core.rogo.asker: Creating new question of type MultipleChoiceEngToLatQuestion with word 'say: inquam'.
  INFO     src.core.rogo.asker: Creating question of type MultipleChoiceEngToLatQuestion with word 'say: inquam' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type TypeInLatToEngQuestion with word 'into: in'.
  DEBUG    src.core.transfero.words: find_inflection(into, , main=False)
  DEBUG    src.core.transfero.words: find_inflection(into, , main=True)
  INFO     src.core.rogo.asker: Creating question of type TypeInLatToEngQuestion with word 'into: in' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type TypeInLatToEngQuestion with word 'into: in'.
  DEBUG    src.core.transfero.words: find_inflection(into, , main=False)
  DEBUG    src.core.transfero.words: find_inflection(into, , main=True)
  INFO     src.core.rogo.asker: Creating question of type TypeInLatToEngQuestion with word 'into: in' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type TypeInEngToLatQuestion with word 'light: levis, leve, (3-2)'.
  DEBUG    src.core.accido._class_adjective: levis.get(positive, masculine, nominative, singular, adverb=False)
  DEBUG    src.core.transfero.words: find_inflection(light, positive genitive plural neuter, main=False)
  INFO     src.core.rogo.asker: Creating question of type TypeInEngToLatQuestion with word 'light: levis, leve, (3-2)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type ParseWordCompToLatQuestion with word 'happy: laetus, laeta, laetum, (2-1-2)'.
  INFO     src.core.rogo.asker: Creating question of type ParseWordCompToLatQuestion with word 'happy: laetus, laeta, laetum, (2-1-2)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type PrincipalPartsQuestion with word 'this: hic, haec, hoc'.
  INFO     src.core.rogo.asker: Creating question of type PrincipalPartsQuestion with word 'this: hic, haec, hoc' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type TypeInEngToLatQuestion with word 'farmer: agricola, agricolae, (m)'.
  DEBUG    src.core.transfero.words: find_inflection(farmer, genitive singular, main=False)
  INFO     src.core.rogo.asker: Creating question of type TypeInEngToLatQuestion with word 'farmer: agricola, agricolae, (m)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type TypeInEngToLatQuestion with word 'take: capio, capere, cepi'.
  DEBUG    src.core.transfero.words: find_inflection(take, perfect active indicative singular 1st person, main=False)
  INFO     src.core.rogo.asker: Creating question of type TypeInEngToLatQuestion with word 'take: capio, capere, cepi' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type MultipleChoiceEngToLatQuestion with word 'from: e'.
  INFO     src.core.rogo.asker: Creating question of type MultipleChoiceEngToLatQuestion with word 'from: e' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type MultipleChoiceEngToLatQuestion with word 'large: ingens, ingentis, (3-1)'.
  INFO     src.core.rogo.asker: Creating question of type MultipleChoiceEngToLatQuestion with word 'large: ingens, ingentis, (3-1)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type MultipleChoiceLatToEngQuestion with word 'from: e'.
  INFO     src.core.rogo.asker: Creating question of type MultipleChoiceLatToEngQuestion with word 'from: e' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type PrincipalPartsQuestion with word 'say: inquam'.
  DEBUG    src.core.rogo.asker: Creating question of type PrincipalPartsQuestion with word 'say: inquam' failed.
  DEBUG    src.core.rogo.asker: Creating new question of type ParseWordLatToCompQuestion with word 'dog: canis, canis, (m)'.
  INFO     src.core.rogo.asker: Creating question of type ParseWordLatToCompQuestion with word 'dog: canis, canis, (m)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type TypeInEngToLatQuestion with word 'girl: puella, puellae, (f)'.
  DEBUG    src.core.transfero.words: find_inflection(girl, dative singular, main=False)
  INFO     src.core.rogo.asker: Creating question of type TypeInEngToLatQuestion with word 'girl: puella, puellae, (f)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type TypeInEngToLatQuestion with word 'this: hic, haec, hoc'.
  DEBUG    src.core.accido._class_pronoun: hic.get(masculine, dative, singular)
  DEBUG    src.core.accido._class_pronoun: hic.get(feminine, dative, singular)
  DEBUG    src.core.accido._class_pronoun: hic.get(neuter, dative, singular)
  DEBUG    src.core.accido._class_pronoun: hic.get(masculine, dative, singular)
  DEBUG    src.core.transfero.words: find_inflection(this, dative singular feminine, main=False)
  INFO     src.core.rogo.asker: Creating question of type TypeInEngToLatQuestion with word 'this: hic, haec, hoc' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type MultipleChoiceLatToEngQuestion with word 'that: ille, illa, illud'.
  INFO     src.core.rogo.asker: Creating question of type MultipleChoiceLatToEngQuestion with word 'that: ille, illa, illud' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type ParseWordLatToCompQuestion with word 'dog: canis, canis, (m)'.
  INFO     src.core.rogo.asker: Creating question of type ParseWordLatToCompQuestion with word 'dog: canis, canis, (m)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type TypeInLatToEngQuestion with word 'happy: laetus, laeta, laetum, (2-1-2)'.
  DEBUG    src.core.transfero.words: find_inflection(happy, comparative nominative singular masculine, main=False)
  DEBUG    src.core.transfero.words: find_inflection(happy, comparative nominative singular masculine, main=True)
  DEBUG    src.core.transfero.words: find_inflection(happy, comparative vocative singular masculine, main=False)
  DEBUG    src.core.transfero.words: find_inflection(happy, comparative vocative singular masculine, main=True)
  DEBUG    src.core.transfero.words: find_inflection(happy, comparative nominative singular feminine, main=False)
  DEBUG    src.core.transfero.words: find_inflection(happy, comparative nominative singular feminine, main=True)
  DEBUG    src.core.transfero.words: find_inflection(happy, comparative vocative singular feminine, main=False)
  DEBUG    src.core.transfero.words: find_inflection(happy, comparative vocative singular feminine, main=True)
  INFO     src.core.rogo.asker: Creating question of type TypeInLatToEngQuestion with word 'happy: laetus, laeta, laetum, (2-1-2)' succeeded.
  DEBUG    src.core.rogo.asker: Creating new question of type TypeInLatToEngQuestion with word 'say: inquam'.
  DEBUG    src.core.transfero.words: find_inflection(say, imperfect active indicative singular 3rd person, main=False)
  DEBUG    src.core.transfero.words: find_inflection(say, imperfect active indicative singular 3rd person, main=True)
  INFO     src.core.rogo.asker: Creating question of type TypeInLatToEngQuestion with word 'say: inquam' succeeded.
  DEBUG    urllib3.connectionpool: http://127.0.0.1:5500 "POST /session HTTP/1.1" 200 9585
  
  '''
# ---
