# serializer version: 1
# name: test_cli_error_extra_config
  'Vocab list received.'
# ---
# name: test_cli_error_extra_config.1
  "Bad request: 400 Bad Request: Required settings are missing: 'exclude-deponents', 'exclude-participle-future-active', 'exclude-verb-future-active-infinitive', 'exclude-verb-future-passive-indicative', 'exclude-verb-future-passive-infinitive', 'exclude-verb-future-perfect-passive-indicative', 'exclude-verb-imperfect-passive-indicative', 'exclude-verb-perfect-active-infinitive', 'exclude-verb-perfect-active-subjunctive', 'exclude-verb-perfect-passive-indicative', 'exclude-verb-perfect-passive-infinitive', 'exclude-verb-pluperfect-passive-indicative', 'exclude-verb-present-active-subjunctive', 'exclude-verb-present-passive-indicative', 'exclude-verb-present-passive-infinitive'. (InvalidSettingsError)"
# ---
# name: test_cli_error_list
  "Bad request: 400 Bad Request: InvalidVocabFileFormatError: Invalid part of speech: 'Cause an error'"
# ---
# name: test_cli_error_list.1
  'Bad request: 400 Bad Request: Vocab list has not been provided.'
# ---
# name: test_cli_error_missing1_config
  'Vocab list received.'
# ---
# name: test_cli_error_missing1_config.1
  "Bad request: 400 Bad Request: Required settings are missing: 'number-of-questions'. (InvalidSettingsError)"
# ---
# name: test_cli_error_missing2_config
  'Vocab list received.'
# ---
# name: test_cli_error_missing2_config.1
  "Bad request: 400 Bad Request: Required settings are missing: 'exclude-deponents', 'exclude-participle-future-active', 'exclude-verb-future-active-infinitive', 'exclude-verb-future-passive-indicative', 'exclude-verb-future-passive-infinitive', 'exclude-verb-future-perfect-passive-indicative', 'exclude-verb-imperfect-passive-indicative', 'exclude-verb-perfect-active-infinitive', 'exclude-verb-perfect-active-subjunctive', 'exclude-verb-perfect-passive-indicative', 'exclude-verb-perfect-passive-infinitive', 'exclude-verb-pluperfect-passive-indicative', 'exclude-verb-present-active-subjunctive', 'exclude-verb-present-passive-indicative', 'exclude-verb-present-passive-infinitive', 'number-multiplechoice-options'. (InvalidSettingsError)"
# ---
# name: test_cli_error_type1_config
  'Vocab list received.'
# ---
# name: test_cli_error_type1_config.1
  "Bad request: 400 Bad Request: Required settings are missing: 'exclude-deponents', 'exclude-participle-future-active', 'exclude-verb-future-active-infinitive', 'exclude-verb-future-passive-indicative', 'exclude-verb-future-passive-infinitive', 'exclude-verb-future-perfect-passive-indicative', 'exclude-verb-imperfect-passive-indicative', 'exclude-verb-perfect-active-infinitive', 'exclude-verb-perfect-active-subjunctive', 'exclude-verb-perfect-passive-indicative', 'exclude-verb-perfect-passive-infinitive', 'exclude-verb-pluperfect-passive-indicative', 'exclude-verb-present-active-subjunctive', 'exclude-verb-present-passive-indicative', 'exclude-verb-present-passive-infinitive'. (InvalidSettingsError)"
# ---
# name: test_cli_error_type2_config
  'Vocab list received.'
# ---
# name: test_cli_error_type2_config.1
  "Bad request: 400 Bad Request: Invalid settings: 'number-of-questions' must be an integer (got type str). (InvalidSettingsError)"
# ---
# name: test_cli_normal
  'Vocab list received.'
# ---
# name: test_cli_normal.1
  list([
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'in',
        'choices': list([
          'acer',
          'in',
          'laetus',
        ]),
        'prompt': 'into',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'dative singular',
          'genitive singular',
          'nominative plural',
          'vocative plural',
        ]),
        'dictionary_entry': 'farmer: agricola, agricolae, (m)',
        'main_answer': 'nominative plural',
        'prompt': 'agricolae',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'canem',
          'canis',
        ]),
        'main_answer': 'canem',
        'prompt': 'dog',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'accusative plural neuter',
          'nominative plural neuter',
          'nominative singular feminine',
        ]),
        'dictionary_entry': 'this: hic, haec, hoc',
        'main_answer': 'nominative singular feminine',
        'prompt': 'haec',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'try',
        'choices': list([
          'good',
          'take',
          'try',
        ]),
        'prompt': 'conor',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'comparative nominative singular feminine',
          'comparative nominative singular masculine',
          'comparative vocative singular feminine',
          'comparative vocative singular masculine',
        ]),
        'dictionary_entry': 'light: levis, leve, (3-2)',
        'main_answer': 'comparative nominative singular masculine',
        'prompt': 'levior',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'accusative singular',
        ]),
        'dictionary_entry': 'dog: canis, canis, (m)',
        'main_answer': 'accusative singular',
        'prompt': 'canem',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'nomine',
        ]),
        'main_answer': 'nomine',
        'prompt': 'by means of a name',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'best',
          'extremely good',
          'extremely well',
          'most good',
          'most well',
          'quite good',
          'quite well',
          'rather good',
          'rather well',
          'too good',
          'too well',
          'very good',
          'very well',
        ]),
        'main_answer': 'best',
        'prompt': 'optime',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'bonus',
          'bona',
          'bonum',
        ]),
        'prompt': 'bonus',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'levis',
        'choices': list([
          'e',
          'audio',
          'levis',
        ]),
        'prompt': 'light',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'agricolas',
        ]),
        'components': 'accusative plural',
        'main_answer': 'agricolas',
        'prompt': 'farmer: agricola, agricolae, (m)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'large',
        ]),
        'main_answer': 'large',
        'prompt': 'ingentia',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'dative singular feminine',
          'dative singular masculine',
          'dative singular neuter',
          'nominative plural masculine',
        ]),
        'dictionary_entry': 'that: ille, illa, illud',
        'main_answer': 'nominative plural masculine',
        'prompt': 'illi',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'laetus',
        'choices': list([
          'e',
          'laetus',
          'ego',
        ]),
        'prompt': 'happy',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'genitive singular',
          'nominative plural',
          'vocative plural',
        ]),
        'dictionary_entry': 'boy: puer, pueri, (m)',
        'main_answer': 'nominative plural',
        'prompt': 'pueri',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'capio',
        'choices': list([
          'hic',
          'capio',
          'ego',
        ]),
        'prompt': 'take',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'of that',
        ]),
        'main_answer': 'of that',
        'prompt': 'illius',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'levis',
          'leve',
        ]),
        'prompt': 'levis',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'ingens',
          'ingentis',
        ]),
        'prompt': 'ingens',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'inquam',
        'choices': list([
          'ingredior',
          'laetus',
          'inquam',
        ]),
        'prompt': 'say',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'comparative ablative singular feminine',
          'comparative ablative singular masculine',
          'comparative ablative singular neuter',
        ]),
        'dictionary_entry': 'large: ingens, ingentis, (3-1)',
        'main_answer': 'comparative ablative singular masculine',
        'prompt': 'ingentiore',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'good',
        'choices': list([
          'say',
          'that',
          'good',
        ]),
        'prompt': 'bonus',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'dative singular',
        ]),
        'dictionary_entry': 'dog: canis, canis, (m)',
        'main_answer': 'dative singular',
        'prompt': 'cani',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'puellis',
        ]),
        'main_answer': 'puellis',
        'prompt': 'for the girls',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'ablative singular',
          'nominative singular',
          'vocative singular',
        ]),
        'dictionary_entry': 'girl: puella, puellae, (f)',
        'main_answer': 'nominative singular',
        'prompt': 'puella',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'genitive singular',
        ]),
        'dictionary_entry': 'I: ego, (irregular)',
        'main_answer': 'genitive singular',
        'prompt': 'mei',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'audio',
          'audire',
          'audivi',
          'auditus',
        ]),
        'prompt': 'audio',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'capiens',
        ]),
        'components': 'present active participle neuter accusative singular',
        'main_answer': 'capiens',
        'prompt': 'take: capio, capere, cepi, captus',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'puer',
        'choices': list([
          'laetus',
          'puer',
          'nomen',
        ]),
        'prompt': 'boy',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'lighter',
          'more light',
        ]),
        'main_answer': 'lighter',
        'prompt': 'levioris',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'has',
        ]),
        'components': 'accusative plural feminine',
        'main_answer': 'has',
        'prompt': 'this: hic, haec, hoc',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'laetus',
          'laeta',
          'laetum',
        ]),
        'prompt': 'laetus',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'laetus',
        'choices': list([
          'laetus',
          'puella',
          'hic',
        ]),
        'prompt': 'happy',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'MultipleChoiceLatToEngQuestion': dict({
        'answer': 'light',
        'choices': list([
          'light',
          'into',
          'large',
        ]),
        'prompt': 'levis',
      }),
      'question_type': 'MultipleChoiceLatToEngQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'laeta',
          'laetae',
          'laetam',
          'laetarum',
          'laetas',
          'laete',
          'laeti',
          'laetis',
          'laeto',
          'laetorum',
          'laetos',
          'laetum',
          'laetus',
        ]),
        'main_answer': 'laetus',
        'prompt': 'happy',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'gerund accusative',
          'gerundive masculine accusative singular',
          'gerundive neuter accusative singular',
          'gerundive neuter nominative singular',
          'gerundive neuter vocative singular',
        ]),
        'dictionary_entry': 'enter: ingredior, ingredi, ingressus sum',
        'main_answer': 'gerundive neuter nominative singular',
        'prompt': 'ingrediendum',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'you are being taken',
          'you are taken',
        ]),
        'main_answer': 'you are taken',
        'prompt': 'caperis',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'ille',
        'choices': list([
          'capio',
          'ingens',
          'ille',
        ]),
        'prompt': 'that',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'ingredior',
          'ingredi',
          'ingressus sum',
          'ingressus',
        ]),
        'prompt': 'ingredior',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'best',
          'extremely good',
          'most good',
          'quite good',
          'rather good',
          'too good',
          'very good',
        ]),
        'main_answer': 'best',
        'prompt': 'optima',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'present active imperative singular 2nd person',
        ]),
        'dictionary_entry': 'say: inquam',
        'main_answer': 'present active imperative singular 2nd person',
        'prompt': 'inque',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'TypeInLatToEngQuestion': dict({
        'answers': list([
          'keener',
          'more keen',
        ]),
        'main_answer': 'keener',
        'prompt': 'acriori',
      }),
      'question_type': 'TypeInLatToEngQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'mihi',
        ]),
        'main_answer': 'mihi',
        'prompt': 'to me',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'ParseWordCompToLatQuestion': dict({
        'answers': list([
          'acerrimis',
        ]),
        'components': 'superlative ablative plural masculine',
        'main_answer': 'acerrimis',
        'prompt': 'keen: acer, acris, acre, (3-3)',
      }),
      'question_type': 'ParseWordCompToLatQuestion',
    }),
    dict({
      'PrincipalPartsQuestion': dict({
        'principal_parts': list([
          'hic',
          'haec',
          'hoc',
        ]),
        'prompt': 'hic',
      }),
      'question_type': 'PrincipalPartsQuestion',
    }),
    dict({
      'TypeInEngToLatQuestion': dict({
        'answers': list([
          'inquimus',
        ]),
        'main_answer': 'inquimus',
        'prompt': 'we say',
      }),
      'question_type': 'TypeInEngToLatQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'e',
        'choices': list([
          'agricola',
          'laetus',
          'e',
        ]),
        'prompt': 'from',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
    dict({
      'ParseWordLatToCompQuestion': dict({
        'answers': list([
          'genitive singular',
        ]),
        'dictionary_entry': 'name: nomen, nominis, (n)',
        'main_answer': 'genitive singular',
        'prompt': 'nominis',
      }),
      'question_type': 'ParseWordLatToCompQuestion',
    }),
    dict({
      'MultipleChoiceEngToLatQuestion': dict({
        'answer': 'nomen',
        'choices': list([
          'in',
          'capio',
          'nomen',
        ]),
        'prompt': 'name',
      }),
      'question_type': 'MultipleChoiceEngToLatQuestion',
    }),
  ])
# ---
